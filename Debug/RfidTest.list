
RfidTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007084  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000300  08007264  08007264  00008264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007564  08007564  00009070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007564  08007564  00008564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800756c  0800756c  00009070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800756c  0800756c  0000856c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007570  08007570  00008570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08007574  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003cc  20000070  080075e4  00009070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000043c  080075e4  0000943c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001592a  00000000  00000000  000090a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035c0  00000000  00000000  0001e9ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001328  00000000  00000000  00021f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000eb1  00000000  00000000  000232b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021540  00000000  00000000  00024169  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001980c  00000000  00000000  000456a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c5646  00000000  00000000  0005eeb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001244fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005720  00000000  00000000  00124540  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00129c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800724c 	.word	0x0800724c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	0800724c 	.word	0x0800724c

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b988 	b.w	8000618 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	468e      	mov	lr, r1
 8000328:	4604      	mov	r4, r0
 800032a:	4688      	mov	r8, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d962      	bls.n	80003fc <__udivmoddi4+0xdc>
 8000336:	fab2 f682 	clz	r6, r2
 800033a:	b14e      	cbz	r6, 8000350 <__udivmoddi4+0x30>
 800033c:	f1c6 0320 	rsb	r3, r6, #32
 8000340:	fa01 f806 	lsl.w	r8, r1, r6
 8000344:	fa20 f303 	lsr.w	r3, r0, r3
 8000348:	40b7      	lsls	r7, r6
 800034a:	ea43 0808 	orr.w	r8, r3, r8
 800034e:	40b4      	lsls	r4, r6
 8000350:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000354:	fa1f fc87 	uxth.w	ip, r7
 8000358:	fbb8 f1fe 	udiv	r1, r8, lr
 800035c:	0c23      	lsrs	r3, r4, #16
 800035e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000362:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000366:	fb01 f20c 	mul.w	r2, r1, ip
 800036a:	429a      	cmp	r2, r3
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0x62>
 800036e:	18fb      	adds	r3, r7, r3
 8000370:	f101 30ff 	add.w	r0, r1, #4294967295
 8000374:	f080 80ea 	bcs.w	800054c <__udivmoddi4+0x22c>
 8000378:	429a      	cmp	r2, r3
 800037a:	f240 80e7 	bls.w	800054c <__udivmoddi4+0x22c>
 800037e:	3902      	subs	r1, #2
 8000380:	443b      	add	r3, r7
 8000382:	1a9a      	subs	r2, r3, r2
 8000384:	b2a3      	uxth	r3, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000392:	fb00 fc0c 	mul.w	ip, r0, ip
 8000396:	459c      	cmp	ip, r3
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0x8e>
 800039a:	18fb      	adds	r3, r7, r3
 800039c:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a0:	f080 80d6 	bcs.w	8000550 <__udivmoddi4+0x230>
 80003a4:	459c      	cmp	ip, r3
 80003a6:	f240 80d3 	bls.w	8000550 <__udivmoddi4+0x230>
 80003aa:	443b      	add	r3, r7
 80003ac:	3802      	subs	r0, #2
 80003ae:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b2:	eba3 030c 	sub.w	r3, r3, ip
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11d      	cbz	r5, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40f3      	lsrs	r3, r6
 80003bc:	2200      	movs	r2, #0
 80003be:	e9c5 3200 	strd	r3, r2, [r5]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d905      	bls.n	80003d6 <__udivmoddi4+0xb6>
 80003ca:	b10d      	cbz	r5, 80003d0 <__udivmoddi4+0xb0>
 80003cc:	e9c5 0100 	strd	r0, r1, [r5]
 80003d0:	2100      	movs	r1, #0
 80003d2:	4608      	mov	r0, r1
 80003d4:	e7f5      	b.n	80003c2 <__udivmoddi4+0xa2>
 80003d6:	fab3 f183 	clz	r1, r3
 80003da:	2900      	cmp	r1, #0
 80003dc:	d146      	bne.n	800046c <__udivmoddi4+0x14c>
 80003de:	4573      	cmp	r3, lr
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xc8>
 80003e2:	4282      	cmp	r2, r0
 80003e4:	f200 8105 	bhi.w	80005f2 <__udivmoddi4+0x2d2>
 80003e8:	1a84      	subs	r4, r0, r2
 80003ea:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	4690      	mov	r8, r2
 80003f2:	2d00      	cmp	r5, #0
 80003f4:	d0e5      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003f6:	e9c5 4800 	strd	r4, r8, [r5]
 80003fa:	e7e2      	b.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f000 8090 	beq.w	8000522 <__udivmoddi4+0x202>
 8000402:	fab2 f682 	clz	r6, r2
 8000406:	2e00      	cmp	r6, #0
 8000408:	f040 80a4 	bne.w	8000554 <__udivmoddi4+0x234>
 800040c:	1a8a      	subs	r2, r1, r2
 800040e:	0c03      	lsrs	r3, r0, #16
 8000410:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000414:	b280      	uxth	r0, r0
 8000416:	b2bc      	uxth	r4, r7
 8000418:	2101      	movs	r1, #1
 800041a:	fbb2 fcfe 	udiv	ip, r2, lr
 800041e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000422:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000426:	fb04 f20c 	mul.w	r2, r4, ip
 800042a:	429a      	cmp	r2, r3
 800042c:	d907      	bls.n	800043e <__udivmoddi4+0x11e>
 800042e:	18fb      	adds	r3, r7, r3
 8000430:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x11c>
 8000436:	429a      	cmp	r2, r3
 8000438:	f200 80e0 	bhi.w	80005fc <__udivmoddi4+0x2dc>
 800043c:	46c4      	mov	ip, r8
 800043e:	1a9b      	subs	r3, r3, r2
 8000440:	fbb3 f2fe 	udiv	r2, r3, lr
 8000444:	fb0e 3312 	mls	r3, lr, r2, r3
 8000448:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800044c:	fb02 f404 	mul.w	r4, r2, r4
 8000450:	429c      	cmp	r4, r3
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x144>
 8000454:	18fb      	adds	r3, r7, r3
 8000456:	f102 30ff 	add.w	r0, r2, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x142>
 800045c:	429c      	cmp	r4, r3
 800045e:	f200 80ca 	bhi.w	80005f6 <__udivmoddi4+0x2d6>
 8000462:	4602      	mov	r2, r0
 8000464:	1b1b      	subs	r3, r3, r4
 8000466:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800046a:	e7a5      	b.n	80003b8 <__udivmoddi4+0x98>
 800046c:	f1c1 0620 	rsb	r6, r1, #32
 8000470:	408b      	lsls	r3, r1
 8000472:	fa22 f706 	lsr.w	r7, r2, r6
 8000476:	431f      	orrs	r7, r3
 8000478:	fa0e f401 	lsl.w	r4, lr, r1
 800047c:	fa20 f306 	lsr.w	r3, r0, r6
 8000480:	fa2e fe06 	lsr.w	lr, lr, r6
 8000484:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000488:	4323      	orrs	r3, r4
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	fa1f fc87 	uxth.w	ip, r7
 8000492:	fbbe f0f9 	udiv	r0, lr, r9
 8000496:	0c1c      	lsrs	r4, r3, #16
 8000498:	fb09 ee10 	mls	lr, r9, r0, lr
 800049c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80004a0:	fb00 fe0c 	mul.w	lr, r0, ip
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	d909      	bls.n	80004c0 <__udivmoddi4+0x1a0>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 3aff 	add.w	sl, r0, #4294967295
 80004b2:	f080 809c 	bcs.w	80005ee <__udivmoddi4+0x2ce>
 80004b6:	45a6      	cmp	lr, r4
 80004b8:	f240 8099 	bls.w	80005ee <__udivmoddi4+0x2ce>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	eba4 040e 	sub.w	r4, r4, lr
 80004c4:	fa1f fe83 	uxth.w	lr, r3
 80004c8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004cc:	fb09 4413 	mls	r4, r9, r3, r4
 80004d0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004d4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004d8:	45a4      	cmp	ip, r4
 80004da:	d908      	bls.n	80004ee <__udivmoddi4+0x1ce>
 80004dc:	193c      	adds	r4, r7, r4
 80004de:	f103 3eff 	add.w	lr, r3, #4294967295
 80004e2:	f080 8082 	bcs.w	80005ea <__udivmoddi4+0x2ca>
 80004e6:	45a4      	cmp	ip, r4
 80004e8:	d97f      	bls.n	80005ea <__udivmoddi4+0x2ca>
 80004ea:	3b02      	subs	r3, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004f2:	eba4 040c 	sub.w	r4, r4, ip
 80004f6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004fa:	4564      	cmp	r4, ip
 80004fc:	4673      	mov	r3, lr
 80004fe:	46e1      	mov	r9, ip
 8000500:	d362      	bcc.n	80005c8 <__udivmoddi4+0x2a8>
 8000502:	d05f      	beq.n	80005c4 <__udivmoddi4+0x2a4>
 8000504:	b15d      	cbz	r5, 800051e <__udivmoddi4+0x1fe>
 8000506:	ebb8 0203 	subs.w	r2, r8, r3
 800050a:	eb64 0409 	sbc.w	r4, r4, r9
 800050e:	fa04 f606 	lsl.w	r6, r4, r6
 8000512:	fa22 f301 	lsr.w	r3, r2, r1
 8000516:	431e      	orrs	r6, r3
 8000518:	40cc      	lsrs	r4, r1
 800051a:	e9c5 6400 	strd	r6, r4, [r5]
 800051e:	2100      	movs	r1, #0
 8000520:	e74f      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000522:	fbb1 fcf2 	udiv	ip, r1, r2
 8000526:	0c01      	lsrs	r1, r0, #16
 8000528:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800052c:	b280      	uxth	r0, r0
 800052e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000532:	463b      	mov	r3, r7
 8000534:	4638      	mov	r0, r7
 8000536:	463c      	mov	r4, r7
 8000538:	46b8      	mov	r8, r7
 800053a:	46be      	mov	lr, r7
 800053c:	2620      	movs	r6, #32
 800053e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000542:	eba2 0208 	sub.w	r2, r2, r8
 8000546:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800054a:	e766      	b.n	800041a <__udivmoddi4+0xfa>
 800054c:	4601      	mov	r1, r0
 800054e:	e718      	b.n	8000382 <__udivmoddi4+0x62>
 8000550:	4610      	mov	r0, r2
 8000552:	e72c      	b.n	80003ae <__udivmoddi4+0x8e>
 8000554:	f1c6 0220 	rsb	r2, r6, #32
 8000558:	fa2e f302 	lsr.w	r3, lr, r2
 800055c:	40b7      	lsls	r7, r6
 800055e:	40b1      	lsls	r1, r6
 8000560:	fa20 f202 	lsr.w	r2, r0, r2
 8000564:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000568:	430a      	orrs	r2, r1
 800056a:	fbb3 f8fe 	udiv	r8, r3, lr
 800056e:	b2bc      	uxth	r4, r7
 8000570:	fb0e 3318 	mls	r3, lr, r8, r3
 8000574:	0c11      	lsrs	r1, r2, #16
 8000576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057a:	fb08 f904 	mul.w	r9, r8, r4
 800057e:	40b0      	lsls	r0, r6
 8000580:	4589      	cmp	r9, r1
 8000582:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000586:	b280      	uxth	r0, r0
 8000588:	d93e      	bls.n	8000608 <__udivmoddi4+0x2e8>
 800058a:	1879      	adds	r1, r7, r1
 800058c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000590:	d201      	bcs.n	8000596 <__udivmoddi4+0x276>
 8000592:	4589      	cmp	r9, r1
 8000594:	d81f      	bhi.n	80005d6 <__udivmoddi4+0x2b6>
 8000596:	eba1 0109 	sub.w	r1, r1, r9
 800059a:	fbb1 f9fe 	udiv	r9, r1, lr
 800059e:	fb09 f804 	mul.w	r8, r9, r4
 80005a2:	fb0e 1119 	mls	r1, lr, r9, r1
 80005a6:	b292      	uxth	r2, r2
 80005a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005ac:	4542      	cmp	r2, r8
 80005ae:	d229      	bcs.n	8000604 <__udivmoddi4+0x2e4>
 80005b0:	18ba      	adds	r2, r7, r2
 80005b2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005b6:	d2c4      	bcs.n	8000542 <__udivmoddi4+0x222>
 80005b8:	4542      	cmp	r2, r8
 80005ba:	d2c2      	bcs.n	8000542 <__udivmoddi4+0x222>
 80005bc:	f1a9 0102 	sub.w	r1, r9, #2
 80005c0:	443a      	add	r2, r7
 80005c2:	e7be      	b.n	8000542 <__udivmoddi4+0x222>
 80005c4:	45f0      	cmp	r8, lr
 80005c6:	d29d      	bcs.n	8000504 <__udivmoddi4+0x1e4>
 80005c8:	ebbe 0302 	subs.w	r3, lr, r2
 80005cc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005d0:	3801      	subs	r0, #1
 80005d2:	46e1      	mov	r9, ip
 80005d4:	e796      	b.n	8000504 <__udivmoddi4+0x1e4>
 80005d6:	eba7 0909 	sub.w	r9, r7, r9
 80005da:	4449      	add	r1, r9
 80005dc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005e0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e4:	fb09 f804 	mul.w	r8, r9, r4
 80005e8:	e7db      	b.n	80005a2 <__udivmoddi4+0x282>
 80005ea:	4673      	mov	r3, lr
 80005ec:	e77f      	b.n	80004ee <__udivmoddi4+0x1ce>
 80005ee:	4650      	mov	r0, sl
 80005f0:	e766      	b.n	80004c0 <__udivmoddi4+0x1a0>
 80005f2:	4608      	mov	r0, r1
 80005f4:	e6fd      	b.n	80003f2 <__udivmoddi4+0xd2>
 80005f6:	443b      	add	r3, r7
 80005f8:	3a02      	subs	r2, #2
 80005fa:	e733      	b.n	8000464 <__udivmoddi4+0x144>
 80005fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000600:	443b      	add	r3, r7
 8000602:	e71c      	b.n	800043e <__udivmoddi4+0x11e>
 8000604:	4649      	mov	r1, r9
 8000606:	e79c      	b.n	8000542 <__udivmoddi4+0x222>
 8000608:	eba1 0109 	sub.w	r1, r1, r9
 800060c:	46c4      	mov	ip, r8
 800060e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000612:	fb09 f804 	mul.w	r8, r9, r4
 8000616:	e7c4      	b.n	80005a2 <__udivmoddi4+0x282>

08000618 <__aeabi_idiv0>:
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop

0800061c <RC522_SPI_Transfer>:
 * Description: A common function used by Write_MFRC522 and Read_MFRC522
 * Input Parameters: data - the value to be written
 * Returns: a byte of data read from the module
 */
uint8_t RC522_SPI_Transfer(uchar data)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b086      	sub	sp, #24
 8000620:	af02      	add	r7, sp, #8
 8000622:	4603      	mov	r3, r0
 8000624:	71fb      	strb	r3, [r7, #7]
	uchar rx_data;
	HAL_SPI_TransmitReceive(HSPI_INSTANCE,&data,&rx_data,1,100);
 8000626:	f107 020f 	add.w	r2, r7, #15
 800062a:	1df9      	adds	r1, r7, #7
 800062c:	2364      	movs	r3, #100	@ 0x64
 800062e:	9300      	str	r3, [sp, #0]
 8000630:	2301      	movs	r3, #1
 8000632:	4804      	ldr	r0, [pc, #16]	@ (8000644 <RC522_SPI_Transfer+0x28>)
 8000634:	f004 fb94 	bl	8004d60 <HAL_SPI_TransmitReceive>

	return rx_data;
 8000638:	7bfb      	ldrb	r3, [r7, #15]
}
 800063a:	4618      	mov	r0, r3
 800063c:	3710      	adds	r7, #16
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	2000017c 	.word	0x2000017c

08000648 <Write_MFRC522>:
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parameters: addr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(uchar addr, uchar val)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	460a      	mov	r2, r1
 8000652:	71fb      	strb	r3, [r7, #7]
 8000654:	4613      	mov	r3, r2
 8000656:	71bb      	strb	r3, [r7, #6]
	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8000658:	2200      	movs	r2, #0
 800065a:	2102      	movs	r1, #2
 800065c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000660:	f002 fbcc 	bl	8002dfc <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and clear the MSb to indicate a write
	  // - bottom 8 bits are the data bits being sent for that address, we send them
	RC522_SPI_Transfer((addr<<1)&0x7E);	
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	005b      	lsls	r3, r3, #1
 8000668:	b2db      	uxtb	r3, r3
 800066a:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800066e:	b2db      	uxtb	r3, r3
 8000670:	4618      	mov	r0, r3
 8000672:	f7ff ffd3 	bl	800061c <RC522_SPI_Transfer>
	RC522_SPI_Transfer(val);
 8000676:	79bb      	ldrb	r3, [r7, #6]
 8000678:	4618      	mov	r0, r3
 800067a:	f7ff ffcf 	bl	800061c <RC522_SPI_Transfer>
	
	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 800067e:	2201      	movs	r2, #1
 8000680:	2102      	movs	r1, #2
 8000682:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000686:	f002 fbb9 	bl	8002dfc <HAL_GPIO_WritePin>
}
 800068a:	bf00      	nop
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}

08000692 <Read_MFRC522>:
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the module
 */
uchar Read_MFRC522(uchar addr)
{
 8000692:	b580      	push	{r7, lr}
 8000694:	b084      	sub	sp, #16
 8000696:	af00      	add	r7, sp, #0
 8000698:	4603      	mov	r3, r0
 800069a:	71fb      	strb	r3, [r7, #7]
	uchar val;

	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 800069c:	2200      	movs	r2, #0
 800069e:	2102      	movs	r1, #2
 80006a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006a4:	f002 fbaa 	bl	8002dfc <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and set the MSb to indicate a read
	  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
	RC522_SPI_Transfer(((addr<<1)&0x7E) | 0x80);	
 80006a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ac:	005b      	lsls	r3, r3, #1
 80006ae:	b25b      	sxtb	r3, r3
 80006b0:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80006b4:	b25b      	sxtb	r3, r3
 80006b6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80006ba:	b25b      	sxtb	r3, r3
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	4618      	mov	r0, r3
 80006c0:	f7ff ffac 	bl	800061c <RC522_SPI_Transfer>
	val = RC522_SPI_Transfer(0x00);
 80006c4:	2000      	movs	r0, #0
 80006c6:	f7ff ffa9 	bl	800061c <RC522_SPI_Transfer>
 80006ca:	4603      	mov	r3, r0
 80006cc:	73fb      	strb	r3, [r7, #15]
	
	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 80006ce:	2201      	movs	r2, #1
 80006d0:	2102      	movs	r1, #2
 80006d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006d6:	f002 fb91 	bl	8002dfc <HAL_GPIO_WritePin>
	
	return val;	
 80006da:	7bfb      	ldrb	r3, [r7, #15]
	
}
 80006dc:	4618      	mov	r0, r3
 80006de:	3710      	adds	r7, #16
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(uchar reg, uchar mask)  
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	460a      	mov	r2, r1
 80006ee:	71fb      	strb	r3, [r7, #7]
 80006f0:	4613      	mov	r3, r2
 80006f2:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 80006f4:	79fb      	ldrb	r3, [r7, #7]
 80006f6:	4618      	mov	r0, r3
 80006f8:	f7ff ffcb 	bl	8000692 <Read_MFRC522>
 80006fc:	4603      	mov	r3, r0
 80006fe:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 8000700:	7bfa      	ldrb	r2, [r7, #15]
 8000702:	79bb      	ldrb	r3, [r7, #6]
 8000704:	4313      	orrs	r3, r2
 8000706:	b2da      	uxtb	r2, r3
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	4611      	mov	r1, r2
 800070c:	4618      	mov	r0, r3
 800070e:	f7ff ff9b 	bl	8000648 <Write_MFRC522>
}
 8000712:	bf00      	nop
 8000714:	3710      	adds	r7, #16
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}

0800071a <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(uchar reg, uchar mask)  
{
 800071a:	b580      	push	{r7, lr}
 800071c:	b084      	sub	sp, #16
 800071e:	af00      	add	r7, sp, #0
 8000720:	4603      	mov	r3, r0
 8000722:	460a      	mov	r2, r1
 8000724:	71fb      	strb	r3, [r7, #7]
 8000726:	4613      	mov	r3, r2
 8000728:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	4618      	mov	r0, r3
 800072e:	f7ff ffb0 	bl	8000692 <Read_MFRC522>
 8000732:	4603      	mov	r3, r0
 8000734:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8000736:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800073a:	43db      	mvns	r3, r3
 800073c:	b25a      	sxtb	r2, r3
 800073e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000742:	4013      	ands	r3, r2
 8000744:	b25b      	sxtb	r3, r3
 8000746:	b2da      	uxtb	r2, r3
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	4611      	mov	r1, r2
 800074c:	4618      	mov	r0, r3
 800074e:	f7ff ff7b 	bl	8000648 <Write_MFRC522>
} 
 8000752:	bf00      	nop
 8000754:	3710      	adds	r7, #16
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}

0800075a <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 800075a:	b580      	push	{r7, lr}
 800075c:	af00      	add	r7, sp, #0

	Read_MFRC522(TxControlReg);
 800075e:	2014      	movs	r0, #20
 8000760:	f7ff ff97 	bl	8000692 <Read_MFRC522>
	SetBitMask(TxControlReg, 0x03);
 8000764:	2103      	movs	r1, #3
 8000766:	2014      	movs	r0, #20
 8000768:	f7ff ffbc 	bl	80006e4 <SetBitMask>
}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}

08000770 <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
 8000774:	210f      	movs	r1, #15
 8000776:	2001      	movs	r0, #1
 8000778:	f7ff ff66 	bl	8000648 <Write_MFRC522>
}
 800077c:	bf00      	nop
 800077e:	bd80      	pop	{r7, pc}

08000780 <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8000784:	2201      	movs	r2, #1
 8000786:	2102      	movs	r1, #2
 8000788:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800078c:	f002 fb36 	bl	8002dfc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MFRC522_RST_PORT,MFRC522_RST_PIN,GPIO_PIN_SET);
 8000790:	2201      	movs	r2, #1
 8000792:	2101      	movs	r1, #1
 8000794:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000798:	f002 fb30 	bl	8002dfc <HAL_GPIO_WritePin>
	MFRC522_Reset();
 800079c:	f7ff ffe8 	bl	8000770 <MFRC522_Reset>
	 	
	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);		//Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 80007a0:	218d      	movs	r1, #141	@ 0x8d
 80007a2:	202a      	movs	r0, #42	@ 0x2a
 80007a4:	f7ff ff50 	bl	8000648 <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 80007a8:	213e      	movs	r1, #62	@ 0x3e
 80007aa:	202b      	movs	r0, #43	@ 0x2b
 80007ac:	f7ff ff4c 	bl	8000648 <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);           
 80007b0:	211e      	movs	r1, #30
 80007b2:	202d      	movs	r0, #45	@ 0x2d
 80007b4:	f7ff ff48 	bl	8000648 <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 80007b8:	2100      	movs	r1, #0
 80007ba:	202c      	movs	r0, #44	@ 0x2c
 80007bc:	f7ff ff44 	bl	8000648 <Write_MFRC522>
	
	Write_MFRC522(TxAutoReg, 0x40);		// force 100% ASK modulation
 80007c0:	2140      	movs	r1, #64	@ 0x40
 80007c2:	2015      	movs	r0, #21
 80007c4:	f7ff ff40 	bl	8000648 <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);		// CRC Initial value 0x6363
 80007c8:	213d      	movs	r1, #61	@ 0x3d
 80007ca:	2011      	movs	r0, #17
 80007cc:	f7ff ff3c 	bl	8000648 <Write_MFRC522>

	AntennaOn();
 80007d0:	f7ff ffc3 	bl	800075a <AntennaOn>
}
 80007d4:	bf00      	nop
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
uchar MFRC522_ToCard(uchar command, uchar *sendData, uchar sendLen, uchar *backData, uint *backLen)
{
 80007d8:	b590      	push	{r4, r7, lr}
 80007da:	b089      	sub	sp, #36	@ 0x24
 80007dc:	af00      	add	r7, sp, #0
 80007de:	60b9      	str	r1, [r7, #8]
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	4603      	mov	r3, r0
 80007e4:	73fb      	strb	r3, [r7, #15]
 80007e6:	4613      	mov	r3, r2
 80007e8:	73bb      	strb	r3, [r7, #14]
    uchar status = MI_ERR;
 80007ea:	2302      	movs	r3, #2
 80007ec:	77fb      	strb	r3, [r7, #31]
    uchar irqEn = 0x00;
 80007ee:	2300      	movs	r3, #0
 80007f0:	77bb      	strb	r3, [r7, #30]
    uchar waitIRq = 0x00;
 80007f2:	2300      	movs	r3, #0
 80007f4:	777b      	strb	r3, [r7, #29]
    uchar lastBits;
    uchar n;
    uint i;

    switch (command)
 80007f6:	7bfb      	ldrb	r3, [r7, #15]
 80007f8:	2b0c      	cmp	r3, #12
 80007fa:	d006      	beq.n	800080a <MFRC522_ToCard+0x32>
 80007fc:	2b0e      	cmp	r3, #14
 80007fe:	d109      	bne.n	8000814 <MFRC522_ToCard+0x3c>
    {
        case PCD_AUTHENT:		// Certification cards close
		{
			irqEn = 0x12;
 8000800:	2312      	movs	r3, #18
 8000802:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x10;
 8000804:	2310      	movs	r3, #16
 8000806:	777b      	strb	r3, [r7, #29]
			break;
 8000808:	e005      	b.n	8000816 <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE:	// Transmit FIFO data
		{
			irqEn = 0x77;
 800080a:	2377      	movs	r3, #119	@ 0x77
 800080c:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x30;
 800080e:	2330      	movs	r3, #48	@ 0x30
 8000810:	777b      	strb	r3, [r7, #29]
			break;
 8000812:	e000      	b.n	8000816 <MFRC522_ToCard+0x3e>
		}
		default:
			break;
 8000814:	bf00      	nop
    }
   
    Write_MFRC522(CommIEnReg, irqEn|0x80);	// Interrupt request
 8000816:	7fbb      	ldrb	r3, [r7, #30]
 8000818:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800081c:	b2db      	uxtb	r3, r3
 800081e:	4619      	mov	r1, r3
 8000820:	2002      	movs	r0, #2
 8000822:	f7ff ff11 	bl	8000648 <Write_MFRC522>
    ClearBitMask(CommIrqReg, 0x80);			// Clear all interrupt request bit
 8000826:	2180      	movs	r1, #128	@ 0x80
 8000828:	2004      	movs	r0, #4
 800082a:	f7ff ff76 	bl	800071a <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			// FlushBuffer=1, FIFO Initialization
 800082e:	2180      	movs	r1, #128	@ 0x80
 8000830:	200a      	movs	r0, #10
 8000832:	f7ff ff57 	bl	80006e4 <SetBitMask>
    
	Write_MFRC522(CommandReg, PCD_IDLE);	// NO action; Cancel the current command
 8000836:	2100      	movs	r1, #0
 8000838:	2001      	movs	r0, #1
 800083a:	f7ff ff05 	bl	8000648 <Write_MFRC522>

	// Writing data to the FIFO
    for (i=0; i<sendLen; i++)
 800083e:	2300      	movs	r3, #0
 8000840:	61bb      	str	r3, [r7, #24]
 8000842:	e00a      	b.n	800085a <MFRC522_ToCard+0x82>
    {   
		Write_MFRC522(FIFODataReg, sendData[i]);    
 8000844:	68ba      	ldr	r2, [r7, #8]
 8000846:	69bb      	ldr	r3, [r7, #24]
 8000848:	4413      	add	r3, r2
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	4619      	mov	r1, r3
 800084e:	2009      	movs	r0, #9
 8000850:	f7ff fefa 	bl	8000648 <Write_MFRC522>
    for (i=0; i<sendLen; i++)
 8000854:	69bb      	ldr	r3, [r7, #24]
 8000856:	3301      	adds	r3, #1
 8000858:	61bb      	str	r3, [r7, #24]
 800085a:	7bbb      	ldrb	r3, [r7, #14]
 800085c:	69ba      	ldr	r2, [r7, #24]
 800085e:	429a      	cmp	r2, r3
 8000860:	d3f0      	bcc.n	8000844 <MFRC522_ToCard+0x6c>
	}

    // Execute the command
	Write_MFRC522(CommandReg, command);
 8000862:	7bfb      	ldrb	r3, [r7, #15]
 8000864:	4619      	mov	r1, r3
 8000866:	2001      	movs	r0, #1
 8000868:	f7ff feee 	bl	8000648 <Write_MFRC522>
    if (command == PCD_TRANSCEIVE)
 800086c:	7bfb      	ldrb	r3, [r7, #15]
 800086e:	2b0c      	cmp	r3, #12
 8000870:	d103      	bne.n	800087a <MFRC522_ToCard+0xa2>
    {    
		SetBitMask(BitFramingReg, 0x80);		// StartSend=1,transmission of data starts
 8000872:	2180      	movs	r1, #128	@ 0x80
 8000874:	200d      	movs	r0, #13
 8000876:	f7ff ff35 	bl	80006e4 <SetBitMask>
	}   
    
    // Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 800087a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800087e:	61bb      	str	r3, [r7, #24]
    do 
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = Read_MFRC522(CommIrqReg);
 8000880:	2004      	movs	r0, #4
 8000882:	f7ff ff06 	bl	8000692 <Read_MFRC522>
 8000886:	4603      	mov	r3, r0
 8000888:	773b      	strb	r3, [r7, #28]
        i--;
 800088a:	69bb      	ldr	r3, [r7, #24]
 800088c:	3b01      	subs	r3, #1
 800088e:	61bb      	str	r3, [r7, #24]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8000890:	69bb      	ldr	r3, [r7, #24]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d00a      	beq.n	80008ac <MFRC522_ToCard+0xd4>
 8000896:	7f3b      	ldrb	r3, [r7, #28]
 8000898:	f003 0301 	and.w	r3, r3, #1
 800089c:	2b00      	cmp	r3, #0
 800089e:	d105      	bne.n	80008ac <MFRC522_ToCard+0xd4>
 80008a0:	7f3a      	ldrb	r2, [r7, #28]
 80008a2:	7f7b      	ldrb	r3, [r7, #29]
 80008a4:	4013      	ands	r3, r2
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d0e9      	beq.n	8000880 <MFRC522_ToCard+0xa8>

    ClearBitMask(BitFramingReg, 0x80);			//StartSend=0
 80008ac:	2180      	movs	r1, #128	@ 0x80
 80008ae:	200d      	movs	r0, #13
 80008b0:	f7ff ff33 	bl	800071a <ClearBitMask>
	
    if (i != 0)
 80008b4:	69bb      	ldr	r3, [r7, #24]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d052      	beq.n	8000960 <MFRC522_ToCard+0x188>
    {    
        if(!(Read_MFRC522(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 80008ba:	2006      	movs	r0, #6
 80008bc:	f7ff fee9 	bl	8000692 <Read_MFRC522>
 80008c0:	4603      	mov	r3, r0
 80008c2:	f003 031b 	and.w	r3, r3, #27
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d148      	bne.n	800095c <MFRC522_ToCard+0x184>
        {
            status = MI_OK;
 80008ca:	2300      	movs	r3, #0
 80008cc:	77fb      	strb	r3, [r7, #31]
            if (n & irqEn & 0x01)
 80008ce:	7f3a      	ldrb	r2, [r7, #28]
 80008d0:	7fbb      	ldrb	r3, [r7, #30]
 80008d2:	4013      	ands	r3, r2
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	f003 0301 	and.w	r3, r3, #1
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MFRC522_ToCard+0x10a>
            {   
				status = MI_NOTAGERR;
 80008de:	2301      	movs	r3, #1
 80008e0:	77fb      	strb	r3, [r7, #31]
			}

            if (command == PCD_TRANSCEIVE)
 80008e2:	7bfb      	ldrb	r3, [r7, #15]
 80008e4:	2b0c      	cmp	r3, #12
 80008e6:	d13b      	bne.n	8000960 <MFRC522_ToCard+0x188>
            {
               	n = Read_MFRC522(FIFOLevelReg);
 80008e8:	200a      	movs	r0, #10
 80008ea:	f7ff fed2 	bl	8000692 <Read_MFRC522>
 80008ee:	4603      	mov	r3, r0
 80008f0:	773b      	strb	r3, [r7, #28]
              	lastBits = Read_MFRC522(ControlReg) & 0x07;
 80008f2:	200c      	movs	r0, #12
 80008f4:	f7ff fecd 	bl	8000692 <Read_MFRC522>
 80008f8:	4603      	mov	r3, r0
 80008fa:	f003 0307 	and.w	r3, r3, #7
 80008fe:	75fb      	strb	r3, [r7, #23]
                if (lastBits)
 8000900:	7dfb      	ldrb	r3, [r7, #23]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d008      	beq.n	8000918 <MFRC522_ToCard+0x140>
                {   
					*backLen = (n-1)*8 + lastBits;   
 8000906:	7f3b      	ldrb	r3, [r7, #28]
 8000908:	3b01      	subs	r3, #1
 800090a:	00da      	lsls	r2, r3, #3
 800090c:	7dfb      	ldrb	r3, [r7, #23]
 800090e:	4413      	add	r3, r2
 8000910:	461a      	mov	r2, r3
 8000912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	e004      	b.n	8000922 <MFRC522_ToCard+0x14a>
				}
                else
                {   
					*backLen = n*8;   
 8000918:	7f3b      	ldrb	r3, [r7, #28]
 800091a:	00db      	lsls	r3, r3, #3
 800091c:	461a      	mov	r2, r3
 800091e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000920:	601a      	str	r2, [r3, #0]
				}

                if (n == 0)
 8000922:	7f3b      	ldrb	r3, [r7, #28]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d101      	bne.n	800092c <MFRC522_ToCard+0x154>
                {   
					n = 1;    
 8000928:	2301      	movs	r3, #1
 800092a:	773b      	strb	r3, [r7, #28]
				}
                if (n > MAX_LEN)
 800092c:	7f3b      	ldrb	r3, [r7, #28]
 800092e:	2b10      	cmp	r3, #16
 8000930:	d901      	bls.n	8000936 <MFRC522_ToCard+0x15e>
                {   
					n = MAX_LEN;   
 8000932:	2310      	movs	r3, #16
 8000934:	773b      	strb	r3, [r7, #28]
				}
				
                // Reading the received data in FIFO
                for (i=0; i<n; i++)
 8000936:	2300      	movs	r3, #0
 8000938:	61bb      	str	r3, [r7, #24]
 800093a:	e00a      	b.n	8000952 <MFRC522_ToCard+0x17a>
                {   
					backData[i] = Read_MFRC522(FIFODataReg);    
 800093c:	687a      	ldr	r2, [r7, #4]
 800093e:	69bb      	ldr	r3, [r7, #24]
 8000940:	18d4      	adds	r4, r2, r3
 8000942:	2009      	movs	r0, #9
 8000944:	f7ff fea5 	bl	8000692 <Read_MFRC522>
 8000948:	4603      	mov	r3, r0
 800094a:	7023      	strb	r3, [r4, #0]
                for (i=0; i<n; i++)
 800094c:	69bb      	ldr	r3, [r7, #24]
 800094e:	3301      	adds	r3, #1
 8000950:	61bb      	str	r3, [r7, #24]
 8000952:	7f3b      	ldrb	r3, [r7, #28]
 8000954:	69ba      	ldr	r2, [r7, #24]
 8000956:	429a      	cmp	r2, r3
 8000958:	d3f0      	bcc.n	800093c <MFRC522_ToCard+0x164>
 800095a:	e001      	b.n	8000960 <MFRC522_ToCard+0x188>
				}
            }
        }
        else
        {   
			status = MI_ERR;  
 800095c:	2302      	movs	r3, #2
 800095e:	77fb      	strb	r3, [r7, #31]
    }
	
    //SetBitMask(ControlReg,0x80);           //timer stops
    //Write_MFRC522(CommandReg, PCD_IDLE); 

    return status;
 8000960:	7ffb      	ldrb	r3, [r7, #31]
}
 8000962:	4618      	mov	r0, r3
 8000964:	3724      	adds	r7, #36	@ 0x24
 8000966:	46bd      	mov	sp, r7
 8000968:	bd90      	pop	{r4, r7, pc}

0800096a <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Request(uchar reqMode, uchar *TagType)
{
 800096a:	b580      	push	{r7, lr}
 800096c:	b086      	sub	sp, #24
 800096e:	af02      	add	r7, sp, #8
 8000970:	4603      	mov	r3, r0
 8000972:	6039      	str	r1, [r7, #0]
 8000974:	71fb      	strb	r3, [r7, #7]
    uchar status;
    uint backBits;

    Write_MFRC522(BitFramingReg, 0x07); // TxLastBits = 7
 8000976:	2107      	movs	r1, #7
 8000978:	200d      	movs	r0, #13
 800097a:	f7ff fe65 	bl	8000648 <Write_MFRC522>

    TagType[0] = reqMode;
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	79fa      	ldrb	r2, [r7, #7]
 8000982:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8000984:	f107 0308 	add.w	r3, r7, #8
 8000988:	9300      	str	r3, [sp, #0]
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	2201      	movs	r2, #1
 800098e:	6839      	ldr	r1, [r7, #0]
 8000990:	200c      	movs	r0, #12
 8000992:	f7ff ff21 	bl	80007d8 <MFRC522_ToCard>
 8000996:	4603      	mov	r3, r0
 8000998:	73fb      	strb	r3, [r7, #15]

    if (status != MI_OK)
 800099a:	7bfb      	ldrb	r3, [r7, #15]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MFRC522_Request+0x3a>
        return status;
 80009a0:	7bfb      	ldrb	r3, [r7, #15]
 80009a2:	e005      	b.n	80009b0 <MFRC522_Request+0x46>

    if (backBits != 0x10)
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	2b10      	cmp	r3, #16
 80009a8:	d001      	beq.n	80009ae <MFRC522_Request+0x44>
        return MI_NOTAGERR;
 80009aa:	2301      	movs	r3, #1
 80009ac:	e000      	b.n	80009b0 <MFRC522_Request+0x46>

    return MI_OK;
 80009ae:	2300      	movs	r3, #0
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	3710      	adds	r7, #16
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Anticoll(uchar *serNum)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b086      	sub	sp, #24
 80009bc:	af02      	add	r7, sp, #8
 80009be:	6078      	str	r0, [r7, #4]
    uchar status;
    uchar i;
	uchar serNumCheck=0;
 80009c0:	2300      	movs	r3, #0
 80009c2:	737b      	strb	r3, [r7, #13]
    uint unLen;
    
	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 80009c4:	2100      	movs	r1, #0
 80009c6:	200d      	movs	r0, #13
 80009c8:	f7ff fe3e 	bl	8000648 <Write_MFRC522>
 
    serNum[0] = PICC_ANTICOLL;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	2293      	movs	r2, #147	@ 0x93
 80009d0:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	3301      	adds	r3, #1
 80009d6:	2220      	movs	r2, #32
 80009d8:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 80009da:	f107 0308 	add.w	r3, r7, #8
 80009de:	9300      	str	r3, [sp, #0]
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	2202      	movs	r2, #2
 80009e4:	6879      	ldr	r1, [r7, #4]
 80009e6:	200c      	movs	r0, #12
 80009e8:	f7ff fef6 	bl	80007d8 <MFRC522_ToCard>
 80009ec:	4603      	mov	r3, r0
 80009ee:	73fb      	strb	r3, [r7, #15]

    if (status == MI_OK)
 80009f0:	7bfb      	ldrb	r3, [r7, #15]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d118      	bne.n	8000a28 <MFRC522_Anticoll+0x70>
	{
    	 //Check card serial number
		for (i=0; i<4; i++)
 80009f6:	2300      	movs	r3, #0
 80009f8:	73bb      	strb	r3, [r7, #14]
 80009fa:	e009      	b.n	8000a10 <MFRC522_Anticoll+0x58>
		{   
		 	serNumCheck ^= serNum[i];
 80009fc:	7bbb      	ldrb	r3, [r7, #14]
 80009fe:	687a      	ldr	r2, [r7, #4]
 8000a00:	4413      	add	r3, r2
 8000a02:	781a      	ldrb	r2, [r3, #0]
 8000a04:	7b7b      	ldrb	r3, [r7, #13]
 8000a06:	4053      	eors	r3, r2
 8000a08:	737b      	strb	r3, [r7, #13]
		for (i=0; i<4; i++)
 8000a0a:	7bbb      	ldrb	r3, [r7, #14]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	73bb      	strb	r3, [r7, #14]
 8000a10:	7bbb      	ldrb	r3, [r7, #14]
 8000a12:	2b03      	cmp	r3, #3
 8000a14:	d9f2      	bls.n	80009fc <MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i])
 8000a16:	7bbb      	ldrb	r3, [r7, #14]
 8000a18:	687a      	ldr	r2, [r7, #4]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	7b7a      	ldrb	r2, [r7, #13]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	d001      	beq.n	8000a28 <MFRC522_Anticoll+0x70>
		{   
			status = MI_ERR;    
 8000a24:	2302      	movs	r3, #2
 8000a26:	73fb      	strb	r3, [r7, #15]
		}
    }

    return status;
 8000a28:	7bfb      	ldrb	r3, [r7, #15]
} 
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3710      	adds	r7, #16
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <unlock_gate_temporary>:
#include "gate_control.h"
#include "main.h"
#include "config.h"
#include "stm32g4xx_hal.h"

void unlock_gate_temporary(void) {
 8000a32:	b580      	push	{r7, lr}
 8000a34:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(MAGNET_CTRL_GPIO_Port, MAGNET_CTRL_Pin, GPIO_PIN_SET);
 8000a36:	2201      	movs	r2, #1
 8000a38:	2110      	movs	r1, #16
 8000a3a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a3e:	f002 f9dd 	bl	8002dfc <HAL_GPIO_WritePin>
    HAL_Delay(GATE_UNLOCK_MS);
 8000a42:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000a46:	f001 ff0d 	bl	8002864 <HAL_Delay>
    lock_gate();
 8000a4a:	f000 f802 	bl	8000a52 <lock_gate>
}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}

08000a52 <lock_gate>:

void lock_gate(void) {
 8000a52:	b580      	push	{r7, lr}
 8000a54:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(MAGNET_CTRL_GPIO_Port, MAGNET_CTRL_Pin, GPIO_PIN_RESET);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2110      	movs	r1, #16
 8000a5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a5e:	f002 f9cd 	bl	8002dfc <HAL_GPIO_WritePin>
}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}

08000a66 <is_pir_triggered>:

bool is_pir_triggered(void) {
 8000a66:	b580      	push	{r7, lr}
 8000a68:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(PIR_INPUT_GPIO_Port, PIR_INPUT_Pin) == GPIO_PIN_SET;
 8000a6a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a72:	f002 f9ab 	bl	8002dcc <HAL_GPIO_ReadPin>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	bf0c      	ite	eq
 8000a7c:	2301      	moveq	r3, #1
 8000a7e:	2300      	movne	r3, #0
 8000a80:	b2db      	uxtb	r3, r3
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	bd80      	pop	{r7, pc}
	...

08000a88 <log_passage>:

static PassageLog log_buffer[MAX_LOG_ENTRIES];
static uint16_t log_count = 0;
static uint16_t log_index = 0;

void log_passage(uint8_t hour, uint8_t minute, Direction dir) {
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	71fb      	strb	r3, [r7, #7]
 8000a92:	460b      	mov	r3, r1
 8000a94:	71bb      	strb	r3, [r7, #6]
 8000a96:	4613      	mov	r3, r2
 8000a98:	717b      	strb	r3, [r7, #5]
    log_buffer[log_index].hour = hour;
 8000a9a:	4b1e      	ldr	r3, [pc, #120]	@ (8000b14 <log_passage+0x8c>)
 8000a9c:	881b      	ldrh	r3, [r3, #0]
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4a1d      	ldr	r2, [pc, #116]	@ (8000b18 <log_passage+0x90>)
 8000aa2:	460b      	mov	r3, r1
 8000aa4:	005b      	lsls	r3, r3, #1
 8000aa6:	440b      	add	r3, r1
 8000aa8:	4413      	add	r3, r2
 8000aaa:	79fa      	ldrb	r2, [r7, #7]
 8000aac:	701a      	strb	r2, [r3, #0]
    log_buffer[log_index].minute = minute;
 8000aae:	4b19      	ldr	r3, [pc, #100]	@ (8000b14 <log_passage+0x8c>)
 8000ab0:	881b      	ldrh	r3, [r3, #0]
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4a18      	ldr	r2, [pc, #96]	@ (8000b18 <log_passage+0x90>)
 8000ab6:	460b      	mov	r3, r1
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	440b      	add	r3, r1
 8000abc:	4413      	add	r3, r2
 8000abe:	3301      	adds	r3, #1
 8000ac0:	79ba      	ldrb	r2, [r7, #6]
 8000ac2:	701a      	strb	r2, [r3, #0]
    log_buffer[log_index].direction = dir;
 8000ac4:	4b13      	ldr	r3, [pc, #76]	@ (8000b14 <log_passage+0x8c>)
 8000ac6:	881b      	ldrh	r3, [r3, #0]
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4a13      	ldr	r2, [pc, #76]	@ (8000b18 <log_passage+0x90>)
 8000acc:	460b      	mov	r3, r1
 8000ace:	005b      	lsls	r3, r3, #1
 8000ad0:	440b      	add	r3, r1
 8000ad2:	4413      	add	r3, r2
 8000ad4:	3302      	adds	r3, #2
 8000ad6:	797a      	ldrb	r2, [r7, #5]
 8000ad8:	701a      	strb	r2, [r3, #0]

    log_index = (log_index + 1) % MAX_LOG_ENTRIES;
 8000ada:	4b0e      	ldr	r3, [pc, #56]	@ (8000b14 <log_passage+0x8c>)
 8000adc:	881b      	ldrh	r3, [r3, #0]
 8000ade:	3301      	adds	r3, #1
 8000ae0:	425a      	negs	r2, r3
 8000ae2:	f003 031f 	and.w	r3, r3, #31
 8000ae6:	f002 021f 	and.w	r2, r2, #31
 8000aea:	bf58      	it	pl
 8000aec:	4253      	negpl	r3, r2
 8000aee:	b29a      	uxth	r2, r3
 8000af0:	4b08      	ldr	r3, [pc, #32]	@ (8000b14 <log_passage+0x8c>)
 8000af2:	801a      	strh	r2, [r3, #0]
    if (log_count < MAX_LOG_ENTRIES)
 8000af4:	4b09      	ldr	r3, [pc, #36]	@ (8000b1c <log_passage+0x94>)
 8000af6:	881b      	ldrh	r3, [r3, #0]
 8000af8:	2b1f      	cmp	r3, #31
 8000afa:	d805      	bhi.n	8000b08 <log_passage+0x80>
        log_count++;
 8000afc:	4b07      	ldr	r3, [pc, #28]	@ (8000b1c <log_passage+0x94>)
 8000afe:	881b      	ldrh	r3, [r3, #0]
 8000b00:	3301      	adds	r3, #1
 8000b02:	b29a      	uxth	r2, r3
 8000b04:	4b05      	ldr	r3, [pc, #20]	@ (8000b1c <log_passage+0x94>)
 8000b06:	801a      	strh	r2, [r3, #0]
}
 8000b08:	bf00      	nop
 8000b0a:	370c      	adds	r7, #12
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	200000ee 	.word	0x200000ee
 8000b18:	2000008c 	.word	0x2000008c
 8000b1c:	200000ec 	.word	0x200000ec

08000b20 <last_log_dir>:

Direction last_log_dir(void) {
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
	if (log_count == 0) {
 8000b26:	4b11      	ldr	r3, [pc, #68]	@ (8000b6c <last_log_dir+0x4c>)
 8000b28:	881b      	ldrh	r3, [r3, #0]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d101      	bne.n	8000b32 <last_log_dir+0x12>
		return DIR_BOTH;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	e016      	b.n	8000b60 <last_log_dir+0x40>
	}
	uint16_t last_idx = (log_index + log_count - 1) % MAX_LOG_ENTRIES;
 8000b32:	4b0f      	ldr	r3, [pc, #60]	@ (8000b70 <last_log_dir+0x50>)
 8000b34:	881b      	ldrh	r3, [r3, #0]
 8000b36:	461a      	mov	r2, r3
 8000b38:	4b0c      	ldr	r3, [pc, #48]	@ (8000b6c <last_log_dir+0x4c>)
 8000b3a:	881b      	ldrh	r3, [r3, #0]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	3b01      	subs	r3, #1
 8000b40:	425a      	negs	r2, r3
 8000b42:	f003 031f 	and.w	r3, r3, #31
 8000b46:	f002 021f 	and.w	r2, r2, #31
 8000b4a:	bf58      	it	pl
 8000b4c:	4253      	negpl	r3, r2
 8000b4e:	80fb      	strh	r3, [r7, #6]
	return log_buffer[last_idx].direction;
 8000b50:	88fa      	ldrh	r2, [r7, #6]
 8000b52:	4908      	ldr	r1, [pc, #32]	@ (8000b74 <last_log_dir+0x54>)
 8000b54:	4613      	mov	r3, r2
 8000b56:	005b      	lsls	r3, r3, #1
 8000b58:	4413      	add	r3, r2
 8000b5a:	440b      	add	r3, r1
 8000b5c:	3302      	adds	r3, #2
 8000b5e:	781b      	ldrb	r3, [r3, #0]
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	200000ec 	.word	0x200000ec
 8000b70:	200000ee 	.word	0x200000ee
 8000b74:	2000008c 	.word	0x2000008c

08000b78 <print_log_history>:

void print_log_history(void) {
 8000b78:	b590      	push	{r4, r7, lr}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
    printf("Historique passages (%d):\n", log_count);
 8000b7e:	4b20      	ldr	r3, [pc, #128]	@ (8000c00 <print_log_history+0x88>)
 8000b80:	881b      	ldrh	r3, [r3, #0]
 8000b82:	4619      	mov	r1, r3
 8000b84:	481f      	ldr	r0, [pc, #124]	@ (8000c04 <print_log_history+0x8c>)
 8000b86:	f005 fb05 	bl	8006194 <iprintf>
    for (uint16_t i = 0; i < log_count; i++) {
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	80fb      	strh	r3, [r7, #6]
 8000b8e:	e02d      	b.n	8000bec <print_log_history+0x74>
        uint16_t idx = (log_index + i) % MAX_LOG_ENTRIES;
 8000b90:	4b1d      	ldr	r3, [pc, #116]	@ (8000c08 <print_log_history+0x90>)
 8000b92:	881a      	ldrh	r2, [r3, #0]
 8000b94:	88fb      	ldrh	r3, [r7, #6]
 8000b96:	4413      	add	r3, r2
 8000b98:	b29b      	uxth	r3, r3
 8000b9a:	f003 031f 	and.w	r3, r3, #31
 8000b9e:	80bb      	strh	r3, [r7, #4]
        printf("[%02d:%02d] %s\n",
               log_buffer[idx].hour,
 8000ba0:	88ba      	ldrh	r2, [r7, #4]
 8000ba2:	491a      	ldr	r1, [pc, #104]	@ (8000c0c <print_log_history+0x94>)
 8000ba4:	4613      	mov	r3, r2
 8000ba6:	005b      	lsls	r3, r3, #1
 8000ba8:	4413      	add	r3, r2
 8000baa:	440b      	add	r3, r1
 8000bac:	781b      	ldrb	r3, [r3, #0]
        printf("[%02d:%02d] %s\n",
 8000bae:	4618      	mov	r0, r3
               log_buffer[idx].minute,
 8000bb0:	88ba      	ldrh	r2, [r7, #4]
 8000bb2:	4916      	ldr	r1, [pc, #88]	@ (8000c0c <print_log_history+0x94>)
 8000bb4:	4613      	mov	r3, r2
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	4413      	add	r3, r2
 8000bba:	440b      	add	r3, r1
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	781b      	ldrb	r3, [r3, #0]
        printf("[%02d:%02d] %s\n",
 8000bc0:	461c      	mov	r4, r3
               log_buffer[idx].direction == DIR_IN ? "ENTREE" : "SORTIE");
 8000bc2:	88ba      	ldrh	r2, [r7, #4]
 8000bc4:	4911      	ldr	r1, [pc, #68]	@ (8000c0c <print_log_history+0x94>)
 8000bc6:	4613      	mov	r3, r2
 8000bc8:	005b      	lsls	r3, r3, #1
 8000bca:	4413      	add	r3, r2
 8000bcc:	440b      	add	r3, r1
 8000bce:	3302      	adds	r3, #2
 8000bd0:	781b      	ldrb	r3, [r3, #0]
        printf("[%02d:%02d] %s\n",
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d101      	bne.n	8000bda <print_log_history+0x62>
 8000bd6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c10 <print_log_history+0x98>)
 8000bd8:	e000      	b.n	8000bdc <print_log_history+0x64>
 8000bda:	4b0e      	ldr	r3, [pc, #56]	@ (8000c14 <print_log_history+0x9c>)
 8000bdc:	4622      	mov	r2, r4
 8000bde:	4601      	mov	r1, r0
 8000be0:	480d      	ldr	r0, [pc, #52]	@ (8000c18 <print_log_history+0xa0>)
 8000be2:	f005 fad7 	bl	8006194 <iprintf>
    for (uint16_t i = 0; i < log_count; i++) {
 8000be6:	88fb      	ldrh	r3, [r7, #6]
 8000be8:	3301      	adds	r3, #1
 8000bea:	80fb      	strh	r3, [r7, #6]
 8000bec:	4b04      	ldr	r3, [pc, #16]	@ (8000c00 <print_log_history+0x88>)
 8000bee:	881b      	ldrh	r3, [r3, #0]
 8000bf0:	88fa      	ldrh	r2, [r7, #6]
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	d3cc      	bcc.n	8000b90 <print_log_history+0x18>
    }
}
 8000bf6:	bf00      	nop
 8000bf8:	bf00      	nop
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd90      	pop	{r4, r7, pc}
 8000c00:	200000ec 	.word	0x200000ec
 8000c04:	08007264 	.word	0x08007264
 8000c08:	200000ee 	.word	0x200000ee
 8000c0c:	2000008c 	.word	0x2000008c
 8000c10:	08007280 	.word	0x08007280
 8000c14:	08007288 	.word	0x08007288
 8000c18:	08007290 	.word	0x08007290

08000c1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c20:	f001 fdb0 	bl	8002784 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c24:	f000 f836 	bl	8000c94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c28:	f000 f92c 	bl	8000e84 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000c2c:	f000 f8ec 	bl	8000e08 <MX_SPI1_Init>
  MX_I2C2_Init();
 8000c30:	f000 f87e 	bl	8000d30 <MX_I2C2_Init>
  MX_RTC_Init();
 8000c34:	f000 f8bc 	bl	8000db0 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  MFRC522_Init();
 8000c38:	f7ff fda2 	bl	8000780 <MFRC522_Init>
  rfid_logic_init();
 8000c3c:	f001 f8c8 	bl	8001dd0 <rfid_logic_init>
  scheduler_init();
 8000c40:	f001 f978 	bl	8001f34 <scheduler_init>
  lcd_menu_init();
 8000c44:	f000 fe78 	bl	8001938 <lcd_menu_init>
  /* USER CODE END 2 */

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000c48:	4b11      	ldr	r3, [pc, #68]	@ (8000c90 <main+0x74>)
 8000c4a:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c4e:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000c50:	4b0f      	ldr	r3, [pc, #60]	@ (8000c90 <main+0x74>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000c56:	4b0e      	ldr	r3, [pc, #56]	@ (8000c90 <main+0x74>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c90 <main+0x74>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000c62:	4b0b      	ldr	r3, [pc, #44]	@ (8000c90 <main+0x74>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000c68:	4909      	ldr	r1, [pc, #36]	@ (8000c90 <main+0x74>)
 8000c6a:	2000      	movs	r0, #0
 8000c6c:	f001 fcc0 	bl	80025f0 <BSP_COM_Init>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <main+0x5e>
  {
    Error_Handler();
 8000c76:	f000 f98f 	bl	8000f98 <Error_Handler>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	rfid_handler_poll();
 8000c7a:	f001 f80f 	bl	8001c9c <rfid_handler_poll>
	handle_menu_navigation();
 8000c7e:	f000 fe69 	bl	8001954 <handle_menu_navigation>
    lcd_menu_timeout_check();
 8000c82:	f000 fe73 	bl	800196c <lcd_menu_timeout_check>

	HAL_Delay(100);
 8000c86:	2064      	movs	r0, #100	@ 0x64
 8000c88:	f001 fdec 	bl	8002864 <HAL_Delay>
	rfid_handler_poll();
 8000c8c:	bf00      	nop
 8000c8e:	e7f4      	b.n	8000c7a <main+0x5e>
 8000c90:	200000f0 	.word	0x200000f0

08000c94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b094      	sub	sp, #80	@ 0x50
 8000c98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c9a:	f107 0318 	add.w	r3, r7, #24
 8000c9e:	2238      	movs	r2, #56	@ 0x38
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f005 fafd 	bl	80062a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ca8:	1d3b      	adds	r3, r7, #4
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	605a      	str	r2, [r3, #4]
 8000cb0:	609a      	str	r2, [r3, #8]
 8000cb2:	60da      	str	r2, [r3, #12]
 8000cb4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	f002 fd36 	bl	8003728 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000cbc:	230a      	movs	r3, #10
 8000cbe:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cc0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cc4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cc6:	2340      	movs	r3, #64	@ 0x40
 8000cc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000cd6:	2304      	movs	r3, #4
 8000cd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000cda:	2355      	movs	r3, #85	@ 0x55
 8000cdc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cea:	f107 0318 	add.w	r3, r7, #24
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f002 fdce 	bl	8003890 <HAL_RCC_OscConfig>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000cfa:	f000 f94d 	bl	8000f98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cfe:	230f      	movs	r3, #15
 8000d00:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d02:	2303      	movs	r3, #3
 8000d04:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d06:	2300      	movs	r3, #0
 8000d08:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d12:	1d3b      	adds	r3, r7, #4
 8000d14:	2104      	movs	r1, #4
 8000d16:	4618      	mov	r0, r3
 8000d18:	f003 f8cc 	bl	8003eb4 <HAL_RCC_ClockConfig>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000d22:	f000 f939 	bl	8000f98 <Error_Handler>
  }
}
 8000d26:	bf00      	nop
 8000d28:	3750      	adds	r7, #80	@ 0x50
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
	...

08000d30 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d34:	4b1b      	ldr	r3, [pc, #108]	@ (8000da4 <MX_I2C2_Init+0x74>)
 8000d36:	4a1c      	ldr	r2, [pc, #112]	@ (8000da8 <MX_I2C2_Init+0x78>)
 8000d38:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x40B285C2;
 8000d3a:	4b1a      	ldr	r3, [pc, #104]	@ (8000da4 <MX_I2C2_Init+0x74>)
 8000d3c:	4a1b      	ldr	r2, [pc, #108]	@ (8000dac <MX_I2C2_Init+0x7c>)
 8000d3e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000d40:	4b18      	ldr	r3, [pc, #96]	@ (8000da4 <MX_I2C2_Init+0x74>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d46:	4b17      	ldr	r3, [pc, #92]	@ (8000da4 <MX_I2C2_Init+0x74>)
 8000d48:	2201      	movs	r2, #1
 8000d4a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d4c:	4b15      	ldr	r3, [pc, #84]	@ (8000da4 <MX_I2C2_Init+0x74>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000d52:	4b14      	ldr	r3, [pc, #80]	@ (8000da4 <MX_I2C2_Init+0x74>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d58:	4b12      	ldr	r3, [pc, #72]	@ (8000da4 <MX_I2C2_Init+0x74>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d5e:	4b11      	ldr	r3, [pc, #68]	@ (8000da4 <MX_I2C2_Init+0x74>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d64:	4b0f      	ldr	r3, [pc, #60]	@ (8000da4 <MX_I2C2_Init+0x74>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d6a:	480e      	ldr	r0, [pc, #56]	@ (8000da4 <MX_I2C2_Init+0x74>)
 8000d6c:	f002 f876 	bl	8002e5c <HAL_I2C_Init>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000d76:	f000 f90f 	bl	8000f98 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4809      	ldr	r0, [pc, #36]	@ (8000da4 <MX_I2C2_Init+0x74>)
 8000d7e:	f002 fc3b 	bl	80035f8 <HAL_I2CEx_ConfigAnalogFilter>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000d88:	f000 f906 	bl	8000f98 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4805      	ldr	r0, [pc, #20]	@ (8000da4 <MX_I2C2_Init+0x74>)
 8000d90:	f002 fc7d 	bl	800368e <HAL_I2CEx_ConfigDigitalFilter>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000d9a:	f000 f8fd 	bl	8000f98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20000100 	.word	0x20000100
 8000da8:	40005800 	.word	0x40005800
 8000dac:	40b285c2 	.word	0x40b285c2

08000db0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000db4:	4b12      	ldr	r3, [pc, #72]	@ (8000e00 <MX_RTC_Init+0x50>)
 8000db6:	4a13      	ldr	r2, [pc, #76]	@ (8000e04 <MX_RTC_Init+0x54>)
 8000db8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000dba:	4b11      	ldr	r3, [pc, #68]	@ (8000e00 <MX_RTC_Init+0x50>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000dc0:	4b0f      	ldr	r3, [pc, #60]	@ (8000e00 <MX_RTC_Init+0x50>)
 8000dc2:	227f      	movs	r2, #127	@ 0x7f
 8000dc4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000dc6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e00 <MX_RTC_Init+0x50>)
 8000dc8:	22ff      	movs	r2, #255	@ 0xff
 8000dca:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8000e00 <MX_RTC_Init+0x50>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000dd2:	4b0b      	ldr	r3, [pc, #44]	@ (8000e00 <MX_RTC_Init+0x50>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000dd8:	4b09      	ldr	r3, [pc, #36]	@ (8000e00 <MX_RTC_Init+0x50>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000dde:	4b08      	ldr	r3, [pc, #32]	@ (8000e00 <MX_RTC_Init+0x50>)
 8000de0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000de4:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000de6:	4b06      	ldr	r3, [pc, #24]	@ (8000e00 <MX_RTC_Init+0x50>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000dec:	4804      	ldr	r0, [pc, #16]	@ (8000e00 <MX_RTC_Init+0x50>)
 8000dee:	f003 fc6d 	bl	80046cc <HAL_RTC_Init>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 8000df8:	f000 f8ce 	bl	8000f98 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000dfc:	bf00      	nop
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20000154 	.word	0x20000154
 8000e04:	40002800 	.word	0x40002800

08000e08 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000e7c <MX_SPI1_Init+0x74>)
 8000e0e:	4a1c      	ldr	r2, [pc, #112]	@ (8000e80 <MX_SPI1_Init+0x78>)
 8000e10:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e12:	4b1a      	ldr	r3, [pc, #104]	@ (8000e7c <MX_SPI1_Init+0x74>)
 8000e14:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000e18:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e1a:	4b18      	ldr	r3, [pc, #96]	@ (8000e7c <MX_SPI1_Init+0x74>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e20:	4b16      	ldr	r3, [pc, #88]	@ (8000e7c <MX_SPI1_Init+0x74>)
 8000e22:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000e26:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e28:	4b14      	ldr	r3, [pc, #80]	@ (8000e7c <MX_SPI1_Init+0x74>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e2e:	4b13      	ldr	r3, [pc, #76]	@ (8000e7c <MX_SPI1_Init+0x74>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e34:	4b11      	ldr	r3, [pc, #68]	@ (8000e7c <MX_SPI1_Init+0x74>)
 8000e36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e3a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000e3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000e7c <MX_SPI1_Init+0x74>)
 8000e3e:	2220      	movs	r2, #32
 8000e40:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e42:	4b0e      	ldr	r3, [pc, #56]	@ (8000e7c <MX_SPI1_Init+0x74>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e48:	4b0c      	ldr	r3, [pc, #48]	@ (8000e7c <MX_SPI1_Init+0x74>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000e7c <MX_SPI1_Init+0x74>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000e54:	4b09      	ldr	r3, [pc, #36]	@ (8000e7c <MX_SPI1_Init+0x74>)
 8000e56:	2207      	movs	r2, #7
 8000e58:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e5a:	4b08      	ldr	r3, [pc, #32]	@ (8000e7c <MX_SPI1_Init+0x74>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000e60:	4b06      	ldr	r3, [pc, #24]	@ (8000e7c <MX_SPI1_Init+0x74>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e66:	4805      	ldr	r0, [pc, #20]	@ (8000e7c <MX_SPI1_Init+0x74>)
 8000e68:	f003 fecf 	bl	8004c0a <HAL_SPI_Init>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000e72:	f000 f891 	bl	8000f98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	2000017c 	.word	0x2000017c
 8000e80:	40013000 	.word	0x40013000

08000e84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b088      	sub	sp, #32
 8000e88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8a:	f107 030c 	add.w	r3, r7, #12
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	605a      	str	r2, [r3, #4]
 8000e94:	609a      	str	r2, [r3, #8]
 8000e96:	60da      	str	r2, [r3, #12]
 8000e98:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e9a:	4b3d      	ldr	r3, [pc, #244]	@ (8000f90 <MX_GPIO_Init+0x10c>)
 8000e9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e9e:	4a3c      	ldr	r2, [pc, #240]	@ (8000f90 <MX_GPIO_Init+0x10c>)
 8000ea0:	f043 0320 	orr.w	r3, r3, #32
 8000ea4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ea6:	4b3a      	ldr	r3, [pc, #232]	@ (8000f90 <MX_GPIO_Init+0x10c>)
 8000ea8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eaa:	f003 0320 	and.w	r3, r3, #32
 8000eae:	60bb      	str	r3, [r7, #8]
 8000eb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb2:	4b37      	ldr	r3, [pc, #220]	@ (8000f90 <MX_GPIO_Init+0x10c>)
 8000eb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eb6:	4a36      	ldr	r2, [pc, #216]	@ (8000f90 <MX_GPIO_Init+0x10c>)
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ebe:	4b34      	ldr	r3, [pc, #208]	@ (8000f90 <MX_GPIO_Init+0x10c>)
 8000ec0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	607b      	str	r3, [r7, #4]
 8000ec8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eca:	4b31      	ldr	r3, [pc, #196]	@ (8000f90 <MX_GPIO_Init+0x10c>)
 8000ecc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ece:	4a30      	ldr	r2, [pc, #192]	@ (8000f90 <MX_GPIO_Init+0x10c>)
 8000ed0:	f043 0302 	orr.w	r3, r3, #2
 8000ed4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ed6:	4b2e      	ldr	r3, [pc, #184]	@ (8000f90 <MX_GPIO_Init+0x10c>)
 8000ed8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eda:	f003 0302 	and.w	r3, r3, #2
 8000ede:	603b      	str	r3, [r7, #0]
 8000ee0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|MAGNET_CTRL_Pin, GPIO_PIN_RESET);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2113      	movs	r1, #19
 8000ee6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eea:	f001 ff87 	bl	8002dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 MAGNET_CTRL_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|MAGNET_CTRL_Pin;
 8000eee:	2313      	movs	r3, #19
 8000ef0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efa:	2300      	movs	r3, #0
 8000efc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efe:	f107 030c 	add.w	r3, r7, #12
 8000f02:	4619      	mov	r1, r3
 8000f04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f08:	f001 fdde 	bl	8002ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_OK_Pin */
  GPIO_InitStruct.Pin = BTN_OK_Pin;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f10:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f16:	2301      	movs	r3, #1
 8000f18:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN_OK_GPIO_Port, &GPIO_InitStruct);
 8000f1a:	f107 030c 	add.w	r3, r7, #12
 8000f1e:	4619      	mov	r1, r3
 8000f20:	481c      	ldr	r0, [pc, #112]	@ (8000f94 <MX_GPIO_Init+0x110>)
 8000f22:	f001 fdd1 	bl	8002ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PIR_INPUT_Pin */
  GPIO_InitStruct.Pin = PIR_INPUT_Pin;
 8000f26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f30:	2302      	movs	r3, #2
 8000f32:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PIR_INPUT_GPIO_Port, &GPIO_InitStruct);
 8000f34:	f107 030c 	add.w	r3, r7, #12
 8000f38:	4619      	mov	r1, r3
 8000f3a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f3e:	f001 fdc3 	bl	8002ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_DOWN_Pin */
  GPIO_InitStruct.Pin = BTN_DOWN_Pin;
 8000f42:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN_DOWN_GPIO_Port, &GPIO_InitStruct);
 8000f50:	f107 030c 	add.w	r3, r7, #12
 8000f54:	4619      	mov	r1, r3
 8000f56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f5a:	f001 fdb5 	bl	8002ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_UP_Pin */
  GPIO_InitStruct.Pin = BTN_UP_Pin;
 8000f5e:	2340      	movs	r3, #64	@ 0x40
 8000f60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f62:	2300      	movs	r3, #0
 8000f64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f66:	2301      	movs	r3, #1
 8000f68:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN_UP_GPIO_Port, &GPIO_InitStruct);
 8000f6a:	f107 030c 	add.w	r3, r7, #12
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4808      	ldr	r0, [pc, #32]	@ (8000f94 <MX_GPIO_Init+0x110>)
 8000f72:	f001 fda9 	bl	8002ac8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2100      	movs	r1, #0
 8000f7a:	2006      	movs	r0, #6
 8000f7c:	f001 fd6f 	bl	8002a5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000f80:	2006      	movs	r0, #6
 8000f82:	f001 fd86 	bl	8002a92 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000f86:	bf00      	nop
 8000f88:	3720      	adds	r7, #32
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40021000 	.word	0x40021000
 8000f94:	48000400 	.word	0x48000400

08000f98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f9c:	b672      	cpsid	i
}
 8000f9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fa0:	bf00      	nop
 8000fa2:	e7fd      	b.n	8000fa0 <Error_Handler+0x8>

08000fa4 <reset_menu_timeout>:
static uint32_t last_interaction = 0;
static uint8_t menu_index = 0;
static bool menu_active = false;
static uint32_t last_btn_ok_press_time = 0;

static void reset_menu_timeout(void) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
    last_interaction = HAL_GetTick();
 8000fa8:	f001 fc50 	bl	800284c <HAL_GetTick>
 8000fac:	4603      	mov	r3, r0
 8000fae:	4a02      	ldr	r2, [pc, #8]	@ (8000fb8 <reset_menu_timeout+0x14>)
 8000fb0:	6013      	str	r3, [r2, #0]
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	200001e0 	.word	0x200001e0

08000fbc <get_ms>:

static uint32_t get_ms(void) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 8000fc0:	f001 fc44 	bl	800284c <HAL_GetTick>
 8000fc4:	4603      	mov	r3, r0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <display_main_menu>:

static void display_main_menu(void) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
    pcf8574_clr();
 8000fd0:	f000 fd78 	bl	8001ac4 <pcf8574_clr>
    switch (menu_index) {
 8000fd4:	4b19      	ldr	r3, [pc, #100]	@ (800103c <display_main_menu+0x70>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2b06      	cmp	r3, #6
 8000fda:	d82d      	bhi.n	8001038 <display_main_menu+0x6c>
 8000fdc:	a201      	add	r2, pc, #4	@ (adr r2, 8000fe4 <display_main_menu+0x18>)
 8000fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fe2:	bf00      	nop
 8000fe4:	08001001 	.word	0x08001001
 8000fe8:	08001009 	.word	0x08001009
 8000fec:	08001011 	.word	0x08001011
 8000ff0:	08001019 	.word	0x08001019
 8000ff4:	08001021 	.word	0x08001021
 8000ff8:	08001029 	.word	0x08001029
 8000ffc:	08001031 	.word	0x08001031
        case 0: pcf8574_send_string("1. Ajout badge"); break;
 8001000:	480f      	ldr	r0, [pc, #60]	@ (8001040 <display_main_menu+0x74>)
 8001002:	f000 fd98 	bl	8001b36 <pcf8574_send_string>
 8001006:	e017      	b.n	8001038 <display_main_menu+0x6c>
        case 1: pcf8574_send_string("2. Suppression\n   badge"); break;
 8001008:	480e      	ldr	r0, [pc, #56]	@ (8001044 <display_main_menu+0x78>)
 800100a:	f000 fd94 	bl	8001b36 <pcf8574_send_string>
 800100e:	e013      	b.n	8001038 <display_main_menu+0x6c>
        case 2: pcf8574_send_string("3. Reglage\n   heure"); break;
 8001010:	480d      	ldr	r0, [pc, #52]	@ (8001048 <display_main_menu+0x7c>)
 8001012:	f000 fd90 	bl	8001b36 <pcf8574_send_string>
 8001016:	e00f      	b.n	8001038 <display_main_menu+0x6c>
        case 3: pcf8574_send_string("4. Reglage\n   horaires"); break;
 8001018:	480c      	ldr	r0, [pc, #48]	@ (800104c <display_main_menu+0x80>)
 800101a:	f000 fd8c 	bl	8001b36 <pcf8574_send_string>
 800101e:	e00b      	b.n	8001038 <display_main_menu+0x6c>
        case 4: pcf8574_send_string("5. Voir position   chat"); break;
 8001020:	480b      	ldr	r0, [pc, #44]	@ (8001050 <display_main_menu+0x84>)
 8001022:	f000 fd88 	bl	8001b36 <pcf8574_send_string>
 8001026:	e007      	b.n	8001038 <display_main_menu+0x6c>
        case 5: pcf8574_send_string("6. Envoyer\n   historique PC"); break;
 8001028:	480a      	ldr	r0, [pc, #40]	@ (8001054 <display_main_menu+0x88>)
 800102a:	f000 fd84 	bl	8001b36 <pcf8574_send_string>
 800102e:	e003      	b.n	8001038 <display_main_menu+0x6c>
        case 6: pcf8574_send_string("7. Quitter"); break;
 8001030:	4809      	ldr	r0, [pc, #36]	@ (8001058 <display_main_menu+0x8c>)
 8001032:	f000 fd80 	bl	8001b36 <pcf8574_send_string>
 8001036:	bf00      	nop
    }
}
 8001038:	bf00      	nop
 800103a:	bd80      	pop	{r7, pc}
 800103c:	200001e4 	.word	0x200001e4
 8001040:	080072a0 	.word	0x080072a0
 8001044:	080072b0 	.word	0x080072b0
 8001048:	080072c8 	.word	0x080072c8
 800104c:	080072dc 	.word	0x080072dc
 8001050:	080072f4 	.word	0x080072f4
 8001054:	0800730c 	.word	0x0800730c
 8001058:	08007328 	.word	0x08007328

0800105c <display_add_badge_screen>:

static void display_add_badge_screen(void) {
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
    pcf8574_clr();
 8001060:	f000 fd30 	bl	8001ac4 <pcf8574_clr>
    pcf8574_send_string("Scan nouv. badge");
 8001064:	4805      	ldr	r0, [pc, #20]	@ (800107c <display_add_badge_screen+0x20>)
 8001066:	f000 fd66 	bl	8001b36 <pcf8574_send_string>
    pcf8574_cursor(1, 6);
 800106a:	2106      	movs	r1, #6
 800106c:	2001      	movs	r0, #1
 800106e:	f000 fd42 	bl	8001af6 <pcf8574_cursor>
    pcf8574_send_string("....");
 8001072:	4803      	ldr	r0, [pc, #12]	@ (8001080 <display_add_badge_screen+0x24>)
 8001074:	f000 fd5f 	bl	8001b36 <pcf8574_send_string>
}
 8001078:	bf00      	nop
 800107a:	bd80      	pop	{r7, pc}
 800107c:	08007334 	.word	0x08007334
 8001080:	08007348 	.word	0x08007348

08001084 <display_remove_badge_screen>:

static void display_remove_badge_screen(void) {
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
    pcf8574_clr();
 8001088:	f000 fd1c 	bl	8001ac4 <pcf8574_clr>
    pcf8574_send_string("Scan badge a\nsupprimer  ...");
 800108c:	4802      	ldr	r0, [pc, #8]	@ (8001098 <display_remove_badge_screen+0x14>)
 800108e:	f000 fd52 	bl	8001b36 <pcf8574_send_string>
}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	08007350 	.word	0x08007350

0800109c <update_displayed_data>:

static void update_displayed_data(char *buf, uint8_t cursor, uint8_t row) {
 800109c:	b580      	push	{r7, lr}
 800109e:	b088      	sub	sp, #32
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	460b      	mov	r3, r1
 80010a6:	70fb      	strb	r3, [r7, #3]
 80010a8:	4613      	mov	r3, r2
 80010aa:	70bb      	strb	r3, [r7, #2]
	static char last_buf[LCD_NUM_COLS + 1] = {0};

    if (strcmp(buf, last_buf) != 0) {
 80010ac:	491c      	ldr	r1, [pc, #112]	@ (8001120 <update_displayed_data+0x84>)
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f7ff f8b6 	bl	8000220 <strcmp>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d02d      	beq.n	8001116 <update_displayed_data+0x7a>
    	uint8_t middle = (LCD_NUM_COLS - strlen(buf)) / 2;
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f7ff f8ba 	bl	8000234 <strlen>
 80010c0:	4603      	mov	r3, r0
 80010c2:	f1c3 0310 	rsb	r3, r3, #16
 80010c6:	085b      	lsrs	r3, r3, #1
 80010c8:	77fb      	strb	r3, [r7, #31]

        pcf8574_cursor(row, 0);
 80010ca:	78bb      	ldrb	r3, [r7, #2]
 80010cc:	2100      	movs	r1, #0
 80010ce:	4618      	mov	r0, r3
 80010d0:	f000 fd11 	bl	8001af6 <pcf8574_cursor>
        char erase[LCD_NUM_COLS + 1];
        memset(erase, ' ', LCD_NUM_COLS);
 80010d4:	f107 030c 	add.w	r3, r7, #12
 80010d8:	2210      	movs	r2, #16
 80010da:	2120      	movs	r1, #32
 80010dc:	4618      	mov	r0, r3
 80010de:	f005 f8e0 	bl	80062a2 <memset>
        erase[LCD_NUM_COLS] = '\0';
 80010e2:	2300      	movs	r3, #0
 80010e4:	773b      	strb	r3, [r7, #28]
        pcf8574_send_string(erase);
 80010e6:	f107 030c 	add.w	r3, r7, #12
 80010ea:	4618      	mov	r0, r3
 80010ec:	f000 fd23 	bl	8001b36 <pcf8574_send_string>

        pcf8574_cursor(row, middle);
 80010f0:	7ffa      	ldrb	r2, [r7, #31]
 80010f2:	78bb      	ldrb	r3, [r7, #2]
 80010f4:	4611      	mov	r1, r2
 80010f6:	4618      	mov	r0, r3
 80010f8:	f000 fcfd 	bl	8001af6 <pcf8574_cursor>
        pcf8574_send_string(buf);
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f000 fd1a 	bl	8001b36 <pcf8574_send_string>
        strcpy(last_buf, buf);
 8001102:	6879      	ldr	r1, [r7, #4]
 8001104:	4806      	ldr	r0, [pc, #24]	@ (8001120 <update_displayed_data+0x84>)
 8001106:	f005 f948 	bl	800639a <strcpy>
        pcf8574_cursor(row, cursor);
 800110a:	78fa      	ldrb	r2, [r7, #3]
 800110c:	78bb      	ldrb	r3, [r7, #2]
 800110e:	4611      	mov	r1, r2
 8001110:	4618      	mov	r0, r3
 8001112:	f000 fcf0 	bl	8001af6 <pcf8574_cursor>
    }
}
 8001116:	bf00      	nop
 8001118:	3720      	adds	r7, #32
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	200001ec 	.word	0x200001ec

08001124 <select_slot_index>:

static int select_slot_index(void) {
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0
    uint8_t slot_idx = 0;
 800112a:	2300      	movs	r3, #0
 800112c:	75fb      	strb	r3, [r7, #23]

    update_displayed_data(" ", 0, 1);
 800112e:	2201      	movs	r2, #1
 8001130:	2100      	movs	r1, #0
 8001132:	482a      	ldr	r0, [pc, #168]	@ (80011dc <select_slot_index+0xb8>)
 8001134:	f7ff ffb2 	bl	800109c <update_displayed_data>
    while (1) {
        char line[20];
        sprintf(line, "Plage hor. [%d]", slot_idx);
 8001138:	7dfa      	ldrb	r2, [r7, #23]
 800113a:	463b      	mov	r3, r7
 800113c:	4928      	ldr	r1, [pc, #160]	@ (80011e0 <select_slot_index+0xbc>)
 800113e:	4618      	mov	r0, r3
 8001140:	f005 f83a 	bl	80061b8 <siprintf>
        update_displayed_data(line, 0, 0);
 8001144:	463b      	mov	r3, r7
 8001146:	2200      	movs	r2, #0
 8001148:	2100      	movs	r1, #0
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff ffa6 	bl	800109c <update_displayed_data>

        if (HAL_GPIO_ReadPin(BTN_UP_GPIO_Port, BTN_UP_Pin) == GPIO_PIN_RESET) {
 8001150:	2140      	movs	r1, #64	@ 0x40
 8001152:	4824      	ldr	r0, [pc, #144]	@ (80011e4 <select_slot_index+0xc0>)
 8001154:	f001 fe3a 	bl	8002dcc <HAL_GPIO_ReadPin>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d110      	bne.n	8001180 <select_slot_index+0x5c>
            slot_idx = (slot_idx + 1) % NB_SLOTS;
 800115e:	7dfb      	ldrb	r3, [r7, #23]
 8001160:	1c5a      	adds	r2, r3, #1
 8001162:	4b21      	ldr	r3, [pc, #132]	@ (80011e8 <select_slot_index+0xc4>)
 8001164:	fb83 1302 	smull	r1, r3, r3, r2
 8001168:	1059      	asrs	r1, r3, #1
 800116a:	17d3      	asrs	r3, r2, #31
 800116c:	1ac9      	subs	r1, r1, r3
 800116e:	460b      	mov	r3, r1
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	440b      	add	r3, r1
 8001174:	1ad1      	subs	r1, r2, r3
 8001176:	460b      	mov	r3, r1
 8001178:	75fb      	strb	r3, [r7, #23]
            HAL_Delay(200);
 800117a:	20c8      	movs	r0, #200	@ 0xc8
 800117c:	f001 fb72 	bl	8002864 <HAL_Delay>
        }
        if (HAL_GPIO_ReadPin(BTN_DOWN_GPIO_Port, BTN_DOWN_Pin) == GPIO_PIN_RESET) {
 8001180:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001184:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001188:	f001 fe20 	bl	8002dcc <HAL_GPIO_ReadPin>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d10b      	bne.n	80011aa <select_slot_index+0x86>
            slot_idx = (slot_idx == 0) ? NB_SLOTS - 1 : slot_idx - 1;
 8001192:	7dfb      	ldrb	r3, [r7, #23]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d003      	beq.n	80011a0 <select_slot_index+0x7c>
 8001198:	7dfb      	ldrb	r3, [r7, #23]
 800119a:	3b01      	subs	r3, #1
 800119c:	b2db      	uxtb	r3, r3
 800119e:	e000      	b.n	80011a2 <select_slot_index+0x7e>
 80011a0:	2304      	movs	r3, #4
 80011a2:	75fb      	strb	r3, [r7, #23]
            HAL_Delay(200);
 80011a4:	20c8      	movs	r0, #200	@ 0xc8
 80011a6:	f001 fb5d 	bl	8002864 <HAL_Delay>
        }
        if (get_ms() - last_btn_ok_press_time > BTN_DEBOUNCE_MS &&
 80011aa:	f7ff ff07 	bl	8000fbc <get_ms>
 80011ae:	4602      	mov	r2, r0
 80011b0:	4b0e      	ldr	r3, [pc, #56]	@ (80011ec <select_slot_index+0xc8>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	2b96      	cmp	r3, #150	@ 0x96
 80011b8:	d9be      	bls.n	8001138 <select_slot_index+0x14>
                HAL_GPIO_ReadPin(BTN_OK_GPIO_Port, BTN_OK_Pin) == GPIO_PIN_RESET) {
 80011ba:	2101      	movs	r1, #1
 80011bc:	4809      	ldr	r0, [pc, #36]	@ (80011e4 <select_slot_index+0xc0>)
 80011be:	f001 fe05 	bl	8002dcc <HAL_GPIO_ReadPin>
 80011c2:	4603      	mov	r3, r0
        if (get_ms() - last_btn_ok_press_time > BTN_DEBOUNCE_MS &&
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d1b7      	bne.n	8001138 <select_slot_index+0x14>
            last_btn_ok_press_time = get_ms();
 80011c8:	f7ff fef8 	bl	8000fbc <get_ms>
 80011cc:	4603      	mov	r3, r0
 80011ce:	4a07      	ldr	r2, [pc, #28]	@ (80011ec <select_slot_index+0xc8>)
 80011d0:	6013      	str	r3, [r2, #0]
            return slot_idx;
 80011d2:	7dfb      	ldrb	r3, [r7, #23]
        }
    }
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3718      	adds	r7, #24
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	0800736c 	.word	0x0800736c
 80011e0:	08007370 	.word	0x08007370
 80011e4:	48000400 	.word	0x48000400
 80011e8:	66666667 	.word	0x66666667
 80011ec:	200001e8 	.word	0x200001e8

080011f0 <handle_add_badge>:

static void handle_add_badge(void) {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b088      	sub	sp, #32
 80011f4:	af00      	add	r7, sp, #0
	display_add_badge_screen();
 80011f6:	f7ff ff31 	bl	800105c <display_add_badge_screen>

	char msg[32];
	rfid_handler_add_badge(RFID_ADD_TIMEOUT_MS, msg);
 80011fa:	463b      	mov	r3, r7
 80011fc:	4619      	mov	r1, r3
 80011fe:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001202:	f000 fd5d 	bl	8001cc0 <rfid_handler_add_badge>

	pcf8574_clr();
 8001206:	f000 fc5d 	bl	8001ac4 <pcf8574_clr>
	pcf8574_send_string(msg);
 800120a:	463b      	mov	r3, r7
 800120c:	4618      	mov	r0, r3
 800120e:	f000 fc92 	bl	8001b36 <pcf8574_send_string>
	HAL_Delay(1500);
 8001212:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8001216:	f001 fb25 	bl	8002864 <HAL_Delay>
}
 800121a:	bf00      	nop
 800121c:	3720      	adds	r7, #32
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <handle_remove_badge>:

static void handle_remove_badge(void) {
 8001222:	b580      	push	{r7, lr}
 8001224:	b088      	sub	sp, #32
 8001226:	af00      	add	r7, sp, #0
	display_remove_badge_screen();
 8001228:	f7ff ff2c 	bl	8001084 <display_remove_badge_screen>

	char msg[32];
	rfid_handler_remove_badge(RFID_ADD_TIMEOUT_MS, msg);
 800122c:	463b      	mov	r3, r7
 800122e:	4619      	mov	r1, r3
 8001230:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001234:	f000 fd90 	bl	8001d58 <rfid_handler_remove_badge>

	pcf8574_clr();
 8001238:	f000 fc44 	bl	8001ac4 <pcf8574_clr>
	pcf8574_send_string(msg);
 800123c:	463b      	mov	r3, r7
 800123e:	4618      	mov	r0, r3
 8001240:	f000 fc79 	bl	8001b36 <pcf8574_send_string>
	HAL_Delay(1500);
 8001244:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8001248:	f001 fb0c 	bl	8002864 <HAL_Delay>
}
 800124c:	bf00      	nop
 800124e:	3720      	adds	r7, #32
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <update_cursor_position>:

static void update_cursor_position(uint8_t cursor, uint8_t row) {
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	460a      	mov	r2, r1
 800125e:	71fb      	strb	r3, [r7, #7]
 8001260:	4613      	mov	r3, r2
 8001262:	71bb      	strb	r3, [r7, #6]
	static uint8_t last_cursor = 16;

    if (cursor != last_cursor) {
 8001264:	4b08      	ldr	r3, [pc, #32]	@ (8001288 <update_cursor_position+0x34>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	79fa      	ldrb	r2, [r7, #7]
 800126a:	429a      	cmp	r2, r3
 800126c:	d008      	beq.n	8001280 <update_cursor_position+0x2c>
        pcf8574_cursor(row, cursor);
 800126e:	79fa      	ldrb	r2, [r7, #7]
 8001270:	79bb      	ldrb	r3, [r7, #6]
 8001272:	4611      	mov	r1, r2
 8001274:	4618      	mov	r0, r3
 8001276:	f000 fc3e 	bl	8001af6 <pcf8574_cursor>
        last_cursor = cursor;
 800127a:	4a03      	ldr	r2, [pc, #12]	@ (8001288 <update_cursor_position+0x34>)
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	7013      	strb	r3, [r2, #0]
    }
}
 8001280:	bf00      	nop
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	20000000 	.word	0x20000000

0800128c <apply_time_digit_change>:

static void apply_time_digit_change(uint8_t *digits, uint8_t cursor, bool increment) {
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	460b      	mov	r3, r1
 8001296:	70fb      	strb	r3, [r7, #3]
 8001298:	4613      	mov	r3, r2
 800129a:	70bb      	strb	r3, [r7, #2]
    int8_t delta = increment ? 1 : -1;
 800129c:	78bb      	ldrb	r3, [r7, #2]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <apply_time_digit_change+0x1a>
 80012a2:	2301      	movs	r3, #1
 80012a4:	e001      	b.n	80012aa <apply_time_digit_change+0x1e>
 80012a6:	f04f 33ff 	mov.w	r3, #4294967295
 80012aa:	73fb      	strb	r3, [r7, #15]
    switch (cursor) {
 80012ac:	78fb      	ldrb	r3, [r7, #3]
 80012ae:	2b03      	cmp	r3, #3
 80012b0:	f200 808f 	bhi.w	80013d2 <apply_time_digit_change+0x146>
 80012b4:	a201      	add	r2, pc, #4	@ (adr r2, 80012bc <apply_time_digit_change+0x30>)
 80012b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ba:	bf00      	nop
 80012bc:	080012cd 	.word	0x080012cd
 80012c0:	0800130f 	.word	0x0800130f
 80012c4:	08001371 	.word	0x08001371
 80012c8:	0800139f 	.word	0x0800139f
        case 0:
        	digits[0] = (digits[0] + delta + 3) % 3;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	461a      	mov	r2, r3
 80012d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012d6:	4413      	add	r3, r2
 80012d8:	1cda      	adds	r2, r3, #3
 80012da:	4b40      	ldr	r3, [pc, #256]	@ (80013dc <apply_time_digit_change+0x150>)
 80012dc:	fb83 3102 	smull	r3, r1, r3, r2
 80012e0:	17d3      	asrs	r3, r2, #31
 80012e2:	1ac9      	subs	r1, r1, r3
 80012e4:	460b      	mov	r3, r1
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	440b      	add	r3, r1
 80012ea:	1ad1      	subs	r1, r2, r3
 80012ec:	b2ca      	uxtb	r2, r1
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	701a      	strb	r2, [r3, #0]
        	if (digits[0] == 2 && digits[1] >= 4)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	d16a      	bne.n	80013d0 <apply_time_digit_change+0x144>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	3301      	adds	r3, #1
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2b03      	cmp	r3, #3
 8001302:	d965      	bls.n	80013d0 <apply_time_digit_change+0x144>
        		digits[1] = 3;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3301      	adds	r3, #1
 8001308:	2203      	movs	r2, #3
 800130a:	701a      	strb	r2, [r3, #0]
        	return;
 800130c:	e060      	b.n	80013d0 <apply_time_digit_change+0x144>
        case 1:
            if (digits[0] == 2)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b02      	cmp	r3, #2
 8001314:	d113      	bne.n	800133e <apply_time_digit_change+0xb2>
                digits[1] = (digits[1] + delta + 4) % 4;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	3301      	adds	r3, #1
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	461a      	mov	r2, r3
 800131e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001322:	4413      	add	r3, r2
 8001324:	3304      	adds	r3, #4
 8001326:	425a      	negs	r2, r3
 8001328:	f003 0303 	and.w	r3, r3, #3
 800132c:	f002 0203 	and.w	r2, r2, #3
 8001330:	bf58      	it	pl
 8001332:	4253      	negpl	r3, r2
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	3201      	adds	r2, #1
 8001338:	b2db      	uxtb	r3, r3
 800133a:	7013      	strb	r3, [r2, #0]
            else
                digits[1] = (digits[1] + delta + 10) % 10;
            return;
 800133c:	e049      	b.n	80013d2 <apply_time_digit_change+0x146>
                digits[1] = (digits[1] + delta + 10) % 10;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	3301      	adds	r3, #1
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	461a      	mov	r2, r3
 8001346:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800134a:	4413      	add	r3, r2
 800134c:	f103 020a 	add.w	r2, r3, #10
 8001350:	4b23      	ldr	r3, [pc, #140]	@ (80013e0 <apply_time_digit_change+0x154>)
 8001352:	fb83 1302 	smull	r1, r3, r3, r2
 8001356:	1099      	asrs	r1, r3, #2
 8001358:	17d3      	asrs	r3, r2, #31
 800135a:	1ac9      	subs	r1, r1, r3
 800135c:	460b      	mov	r3, r1
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	440b      	add	r3, r1
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	1ad1      	subs	r1, r2, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	3301      	adds	r3, #1
 800136a:	b2ca      	uxtb	r2, r1
 800136c:	701a      	strb	r2, [r3, #0]
            return;
 800136e:	e030      	b.n	80013d2 <apply_time_digit_change+0x146>
        case 2: digits[2] = (digits[2] + delta + 6) % 6; return;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	3302      	adds	r3, #2
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	461a      	mov	r2, r3
 8001378:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800137c:	4413      	add	r3, r2
 800137e:	1d9a      	adds	r2, r3, #6
 8001380:	4b18      	ldr	r3, [pc, #96]	@ (80013e4 <apply_time_digit_change+0x158>)
 8001382:	fb83 3102 	smull	r3, r1, r3, r2
 8001386:	17d3      	asrs	r3, r2, #31
 8001388:	1ac9      	subs	r1, r1, r3
 800138a:	460b      	mov	r3, r1
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	440b      	add	r3, r1
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	1ad1      	subs	r1, r2, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	3302      	adds	r3, #2
 8001398:	b2ca      	uxtb	r2, r1
 800139a:	701a      	strb	r2, [r3, #0]
 800139c:	e019      	b.n	80013d2 <apply_time_digit_change+0x146>
        case 3: digits[3] = (digits[3] + delta + 10) % 10; return;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	3303      	adds	r3, #3
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	461a      	mov	r2, r3
 80013a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013aa:	4413      	add	r3, r2
 80013ac:	f103 020a 	add.w	r2, r3, #10
 80013b0:	4b0b      	ldr	r3, [pc, #44]	@ (80013e0 <apply_time_digit_change+0x154>)
 80013b2:	fb83 1302 	smull	r1, r3, r3, r2
 80013b6:	1099      	asrs	r1, r3, #2
 80013b8:	17d3      	asrs	r3, r2, #31
 80013ba:	1ac9      	subs	r1, r1, r3
 80013bc:	460b      	mov	r3, r1
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	440b      	add	r3, r1
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	1ad1      	subs	r1, r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	3303      	adds	r3, #3
 80013ca:	b2ca      	uxtb	r2, r1
 80013cc:	701a      	strb	r2, [r3, #0]
 80013ce:	e000      	b.n	80013d2 <apply_time_digit_change+0x146>
        	return;
 80013d0:	bf00      	nop
    }
}
 80013d2:	3714      	adds	r7, #20
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	55555556 	.word	0x55555556
 80013e0:	66666667 	.word	0x66666667
 80013e4:	2aaaaaab 	.word	0x2aaaaaab

080013e8 <edit_time>:

static bool edit_time(uint8_t *h, uint8_t *m, char *title) {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b088      	sub	sp, #32
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
    uint8_t digits[4] = {
        *h / 10,
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	781b      	ldrb	r3, [r3, #0]
    uint8_t digits[4] = {
 80013f8:	4a68      	ldr	r2, [pc, #416]	@ (800159c <edit_time+0x1b4>)
 80013fa:	fba2 2303 	umull	r2, r3, r2, r3
 80013fe:	08db      	lsrs	r3, r3, #3
 8001400:	b2db      	uxtb	r3, r3
 8001402:	763b      	strb	r3, [r7, #24]
        *h % 10,
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	781a      	ldrb	r2, [r3, #0]
    uint8_t digits[4] = {
 8001408:	4b64      	ldr	r3, [pc, #400]	@ (800159c <edit_time+0x1b4>)
 800140a:	fba3 1302 	umull	r1, r3, r3, r2
 800140e:	08d9      	lsrs	r1, r3, #3
 8001410:	460b      	mov	r3, r1
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	440b      	add	r3, r1
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	b2db      	uxtb	r3, r3
 800141c:	767b      	strb	r3, [r7, #25]
        *m / 10,
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	781b      	ldrb	r3, [r3, #0]
    uint8_t digits[4] = {
 8001422:	4a5e      	ldr	r2, [pc, #376]	@ (800159c <edit_time+0x1b4>)
 8001424:	fba2 2303 	umull	r2, r3, r2, r3
 8001428:	08db      	lsrs	r3, r3, #3
 800142a:	b2db      	uxtb	r3, r3
 800142c:	76bb      	strb	r3, [r7, #26]
        *m % 10
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	781a      	ldrb	r2, [r3, #0]
    uint8_t digits[4] = {
 8001432:	4b5a      	ldr	r3, [pc, #360]	@ (800159c <edit_time+0x1b4>)
 8001434:	fba3 1302 	umull	r1, r3, r3, r2
 8001438:	08d9      	lsrs	r1, r3, #3
 800143a:	460b      	mov	r3, r1
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	440b      	add	r3, r1
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	b2db      	uxtb	r3, r3
 8001446:	76fb      	strb	r3, [r7, #27]
    };

    uint8_t cursor = 0;
 8001448:	2300      	movs	r3, #0
 800144a:	77fb      	strb	r3, [r7, #31]

    pcf8574_send_cmd(0x0D); // disp=on , cur=off, blink=on
 800144c:	200d      	movs	r0, #13
 800144e:	f000 fad9 	bl	8001a04 <pcf8574_send_cmd>
    pcf8574_clr();
 8001452:	f000 fb37 	bl	8001ac4 <pcf8574_clr>
    pcf8574_send_string(title);
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f000 fb6d 	bl	8001b36 <pcf8574_send_string>

    update_displayed_data(" ", 0, 1);
 800145c:	2201      	movs	r2, #1
 800145e:	2100      	movs	r1, #0
 8001460:	484f      	ldr	r0, [pc, #316]	@ (80015a0 <edit_time+0x1b8>)
 8001462:	f7ff fe1b 	bl	800109c <update_displayed_data>
    HAL_Delay(100);
 8001466:	2064      	movs	r0, #100	@ 0x64
 8001468:	f001 f9fc 	bl	8002864 <HAL_Delay>
    while (1) {
        char buf[6] = {
            '0' + digits[0],
 800146c:	7e3b      	ldrb	r3, [r7, #24]
 800146e:	3330      	adds	r3, #48	@ 0x30
 8001470:	b2db      	uxtb	r3, r3
        char buf[6] = {
 8001472:	743b      	strb	r3, [r7, #16]
            '0' + digits[1],
 8001474:	7e7b      	ldrb	r3, [r7, #25]
 8001476:	3330      	adds	r3, #48	@ 0x30
 8001478:	b2db      	uxtb	r3, r3
        char buf[6] = {
 800147a:	747b      	strb	r3, [r7, #17]
 800147c:	233a      	movs	r3, #58	@ 0x3a
 800147e:	74bb      	strb	r3, [r7, #18]
            ':',
            '0' + digits[2],
 8001480:	7ebb      	ldrb	r3, [r7, #26]
 8001482:	3330      	adds	r3, #48	@ 0x30
 8001484:	b2db      	uxtb	r3, r3
        char buf[6] = {
 8001486:	74fb      	strb	r3, [r7, #19]
            '0' + digits[3],
 8001488:	7efb      	ldrb	r3, [r7, #27]
 800148a:	3330      	adds	r3, #48	@ 0x30
 800148c:	b2db      	uxtb	r3, r3
        char buf[6] = {
 800148e:	753b      	strb	r3, [r7, #20]
 8001490:	2300      	movs	r3, #0
 8001492:	757b      	strb	r3, [r7, #21]
            '\0'
        };
        update_displayed_data(buf, 5 + cursor + (cursor >= 2), 1);
 8001494:	7ffb      	ldrb	r3, [r7, #31]
 8001496:	2b01      	cmp	r3, #1
 8001498:	bf8c      	ite	hi
 800149a:	2301      	movhi	r3, #1
 800149c:	2300      	movls	r3, #0
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	461a      	mov	r2, r3
 80014a2:	7ffb      	ldrb	r3, [r7, #31]
 80014a4:	4413      	add	r3, r2
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	3305      	adds	r3, #5
 80014aa:	b2d9      	uxtb	r1, r3
 80014ac:	f107 0310 	add.w	r3, r7, #16
 80014b0:	2201      	movs	r2, #1
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff fdf2 	bl	800109c <update_displayed_data>
        update_cursor_position(5 + cursor + (cursor >= 2), 1);
 80014b8:	7ffb      	ldrb	r3, [r7, #31]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	bf8c      	ite	hi
 80014be:	2301      	movhi	r3, #1
 80014c0:	2300      	movls	r3, #0
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	461a      	mov	r2, r3
 80014c6:	7ffb      	ldrb	r3, [r7, #31]
 80014c8:	4413      	add	r3, r2
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	3305      	adds	r3, #5
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	2101      	movs	r1, #1
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff febe 	bl	8001254 <update_cursor_position>

        if (HAL_GPIO_ReadPin(BTN_UP_GPIO_Port, BTN_UP_Pin) == GPIO_PIN_RESET) {
 80014d8:	2140      	movs	r1, #64	@ 0x40
 80014da:	4832      	ldr	r0, [pc, #200]	@ (80015a4 <edit_time+0x1bc>)
 80014dc:	f001 fc76 	bl	8002dcc <HAL_GPIO_ReadPin>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d109      	bne.n	80014fa <edit_time+0x112>
            apply_time_digit_change(digits, cursor, true);
 80014e6:	7ff9      	ldrb	r1, [r7, #31]
 80014e8:	f107 0318 	add.w	r3, r7, #24
 80014ec:	2201      	movs	r2, #1
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff fecc 	bl	800128c <apply_time_digit_change>
            HAL_Delay(200);
 80014f4:	20c8      	movs	r0, #200	@ 0xc8
 80014f6:	f001 f9b5 	bl	8002864 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(BTN_DOWN_GPIO_Port, BTN_DOWN_Pin) == GPIO_PIN_RESET) {
 80014fa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001502:	f001 fc63 	bl	8002dcc <HAL_GPIO_ReadPin>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d109      	bne.n	8001520 <edit_time+0x138>
            apply_time_digit_change(digits, cursor, false);
 800150c:	7ff9      	ldrb	r1, [r7, #31]
 800150e:	f107 0318 	add.w	r3, r7, #24
 8001512:	2200      	movs	r2, #0
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff feb9 	bl	800128c <apply_time_digit_change>
            HAL_Delay(200);
 800151a:	20c8      	movs	r0, #200	@ 0xc8
 800151c:	f001 f9a2 	bl	8002864 <HAL_Delay>
        }

        if (get_ms() - last_btn_ok_press_time > BTN_DEBOUNCE_MS &&
 8001520:	f7ff fd4c 	bl	8000fbc <get_ms>
 8001524:	4602      	mov	r2, r0
 8001526:	4b20      	ldr	r3, [pc, #128]	@ (80015a8 <edit_time+0x1c0>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	2b96      	cmp	r3, #150	@ 0x96
 800152e:	d99d      	bls.n	800146c <edit_time+0x84>
            HAL_GPIO_ReadPin(BTN_OK_GPIO_Port, BTN_OK_Pin) == GPIO_PIN_RESET) {
 8001530:	2101      	movs	r1, #1
 8001532:	481c      	ldr	r0, [pc, #112]	@ (80015a4 <edit_time+0x1bc>)
 8001534:	f001 fc4a 	bl	8002dcc <HAL_GPIO_ReadPin>
 8001538:	4603      	mov	r3, r0
        if (get_ms() - last_btn_ok_press_time > BTN_DEBOUNCE_MS &&
 800153a:	2b00      	cmp	r3, #0
 800153c:	d196      	bne.n	800146c <edit_time+0x84>
            last_btn_ok_press_time = get_ms();
 800153e:	f7ff fd3d 	bl	8000fbc <get_ms>
 8001542:	4603      	mov	r3, r0
 8001544:	4a18      	ldr	r2, [pc, #96]	@ (80015a8 <edit_time+0x1c0>)
 8001546:	6013      	str	r3, [r2, #0]
            if (cursor == 3) {
 8001548:	7ffb      	ldrb	r3, [r7, #31]
 800154a:	2b03      	cmp	r3, #3
 800154c:	d11a      	bne.n	8001584 <edit_time+0x19c>
                *h = digits[0] * 10 + digits[1];
 800154e:	7e3b      	ldrb	r3, [r7, #24]
 8001550:	461a      	mov	r2, r3
 8001552:	0092      	lsls	r2, r2, #2
 8001554:	4413      	add	r3, r2
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	b2da      	uxtb	r2, r3
 800155a:	7e7b      	ldrb	r3, [r7, #25]
 800155c:	4413      	add	r3, r2
 800155e:	b2da      	uxtb	r2, r3
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	701a      	strb	r2, [r3, #0]
                *m = digits[2] * 10 + digits[3];
 8001564:	7ebb      	ldrb	r3, [r7, #26]
 8001566:	461a      	mov	r2, r3
 8001568:	0092      	lsls	r2, r2, #2
 800156a:	4413      	add	r3, r2
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	b2da      	uxtb	r2, r3
 8001570:	7efb      	ldrb	r3, [r7, #27]
 8001572:	4413      	add	r3, r2
 8001574:	b2da      	uxtb	r2, r3
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	701a      	strb	r2, [r3, #0]

                pcf8574_send_cmd(0x0C); // disp=on , cur=off, blink=off
 800157a:	200c      	movs	r0, #12
 800157c:	f000 fa42 	bl	8001a04 <pcf8574_send_cmd>
                return true;
 8001580:	2301      	movs	r3, #1
 8001582:	e006      	b.n	8001592 <edit_time+0x1aa>
            } else {
                cursor++;
 8001584:	7ffb      	ldrb	r3, [r7, #31]
 8001586:	3301      	adds	r3, #1
 8001588:	77fb      	strb	r3, [r7, #31]
                HAL_Delay(200);
 800158a:	20c8      	movs	r0, #200	@ 0xc8
 800158c:	f001 f96a 	bl	8002864 <HAL_Delay>
    while (1) {
 8001590:	e76c      	b.n	800146c <edit_time+0x84>
            }
        }
    }
    return false;
}
 8001592:	4618      	mov	r0, r3
 8001594:	3720      	adds	r7, #32
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	cccccccd 	.word	0xcccccccd
 80015a0:	0800736c 	.word	0x0800736c
 80015a4:	48000400 	.word	0x48000400
 80015a8:	200001e8 	.word	0x200001e8

080015ac <handle_slot_edit>:

void handle_slot_edit(void) {
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b08c      	sub	sp, #48	@ 0x30
 80015b0:	af00      	add	r7, sp, #0
    uint8_t slot = select_slot_index();
 80015b2:	f7ff fdb7 	bl	8001124 <select_slot_index>
 80015b6:	4603      	mov	r3, r0
 80015b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    TimeSlot cur_slot = get_time_slot(slot);
 80015bc:	f107 0320 	add.w	r3, r7, #32
 80015c0:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80015c4:	4611      	mov	r1, r2
 80015c6:	4618      	mov	r0, r3
 80015c8:	f000 fd7a 	bl	80020c0 <get_time_slot>

    if (!edit_time(&cur_slot.start_hour, &cur_slot.start_min, "Heure de debut :")) return;
 80015cc:	f107 0320 	add.w	r3, r7, #32
 80015d0:	1c59      	adds	r1, r3, #1
 80015d2:	f107 0320 	add.w	r3, r7, #32
 80015d6:	4a51      	ldr	r2, [pc, #324]	@ (800171c <handle_slot_edit+0x170>)
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff ff05 	bl	80013e8 <edit_time>
 80015de:	4603      	mov	r3, r0
 80015e0:	f083 0301 	eor.w	r3, r3, #1
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f040 8091 	bne.w	800170e <handle_slot_edit+0x162>
    if (!edit_time(&cur_slot.end_hour, &cur_slot.end_min, "Heure de fin :")) return;
 80015ec:	f107 0320 	add.w	r3, r7, #32
 80015f0:	1cd9      	adds	r1, r3, #3
 80015f2:	f107 0320 	add.w	r3, r7, #32
 80015f6:	3302      	adds	r3, #2
 80015f8:	4a49      	ldr	r2, [pc, #292]	@ (8001720 <handle_slot_edit+0x174>)
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff fef4 	bl	80013e8 <edit_time>
 8001600:	4603      	mov	r3, r0
 8001602:	f083 0301 	eor.w	r3, r3, #1
 8001606:	b2db      	uxtb	r3, r3
 8001608:	2b00      	cmp	r3, #0
 800160a:	f040 8082 	bne.w	8001712 <handle_slot_edit+0x166>

    char *dirs[] = {"IN ", "OUT", "BOTH"};
 800160e:	4a45      	ldr	r2, [pc, #276]	@ (8001724 <handle_slot_edit+0x178>)
 8001610:	f107 0314 	add.w	r3, r7, #20
 8001614:	ca07      	ldmia	r2, {r0, r1, r2}
 8001616:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    uint8_t *dir_val = &cur_slot.direction;
 800161a:	f107 0320 	add.w	r3, r7, #32
 800161e:	3304      	adds	r3, #4
 8001620:	62bb      	str	r3, [r7, #40]	@ 0x28

    pcf8574_clr();
 8001622:	f000 fa4f 	bl	8001ac4 <pcf8574_clr>
    pcf8574_send_string("Dir. interdite :");
 8001626:	4840      	ldr	r0, [pc, #256]	@ (8001728 <handle_slot_edit+0x17c>)
 8001628:	f000 fa85 	bl	8001b36 <pcf8574_send_string>

    update_displayed_data(" ", 0, 1);
 800162c:	2201      	movs	r2, #1
 800162e:	2100      	movs	r1, #0
 8001630:	483e      	ldr	r0, [pc, #248]	@ (800172c <handle_slot_edit+0x180>)
 8001632:	f7ff fd33 	bl	800109c <update_displayed_data>
    while (1) {
        char line[17];
        sprintf(line, "< %s >", dirs[*dir_val]);
 8001636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	3330      	adds	r3, #48	@ 0x30
 800163e:	443b      	add	r3, r7
 8001640:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8001644:	463b      	mov	r3, r7
 8001646:	493a      	ldr	r1, [pc, #232]	@ (8001730 <handle_slot_edit+0x184>)
 8001648:	4618      	mov	r0, r3
 800164a:	f004 fdb5 	bl	80061b8 <siprintf>
        update_displayed_data(line, 0, 1);
 800164e:	463b      	mov	r3, r7
 8001650:	2201      	movs	r2, #1
 8001652:	2100      	movs	r1, #0
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff fd21 	bl	800109c <update_displayed_data>

        if (HAL_GPIO_ReadPin(BTN_UP_GPIO_Port, BTN_UP_Pin) == GPIO_PIN_RESET) {
 800165a:	2140      	movs	r1, #64	@ 0x40
 800165c:	4835      	ldr	r0, [pc, #212]	@ (8001734 <handle_slot_edit+0x188>)
 800165e:	f001 fbb5 	bl	8002dcc <HAL_GPIO_ReadPin>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d111      	bne.n	800168c <handle_slot_edit+0xe0>
            *dir_val = (*dir_val + 1) % 3;
 8001668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	1c5a      	adds	r2, r3, #1
 800166e:	4b32      	ldr	r3, [pc, #200]	@ (8001738 <handle_slot_edit+0x18c>)
 8001670:	fb83 3102 	smull	r3, r1, r3, r2
 8001674:	17d3      	asrs	r3, r2, #31
 8001676:	1ac9      	subs	r1, r1, r3
 8001678:	460b      	mov	r3, r1
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	440b      	add	r3, r1
 800167e:	1ad1      	subs	r1, r2, r3
 8001680:	b2ca      	uxtb	r2, r1
 8001682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001684:	701a      	strb	r2, [r3, #0]
            HAL_Delay(200);
 8001686:	20c8      	movs	r0, #200	@ 0xc8
 8001688:	f001 f8ec 	bl	8002864 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(BTN_DOWN_GPIO_Port, BTN_DOWN_Pin) == GPIO_PIN_RESET) {
 800168c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001690:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001694:	f001 fb9a 	bl	8002dcc <HAL_GPIO_ReadPin>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d111      	bne.n	80016c2 <handle_slot_edit+0x116>
            *dir_val = (*dir_val + 2) % 3;
 800169e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	1c9a      	adds	r2, r3, #2
 80016a4:	4b24      	ldr	r3, [pc, #144]	@ (8001738 <handle_slot_edit+0x18c>)
 80016a6:	fb83 3102 	smull	r3, r1, r3, r2
 80016aa:	17d3      	asrs	r3, r2, #31
 80016ac:	1ac9      	subs	r1, r1, r3
 80016ae:	460b      	mov	r3, r1
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	440b      	add	r3, r1
 80016b4:	1ad1      	subs	r1, r2, r3
 80016b6:	b2ca      	uxtb	r2, r1
 80016b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016ba:	701a      	strb	r2, [r3, #0]
            HAL_Delay(200);
 80016bc:	20c8      	movs	r0, #200	@ 0xc8
 80016be:	f001 f8d1 	bl	8002864 <HAL_Delay>
        }

        if (get_ms() - last_btn_ok_press_time > BTN_DEBOUNCE_MS &&
 80016c2:	f7ff fc7b 	bl	8000fbc <get_ms>
 80016c6:	4602      	mov	r2, r0
 80016c8:	4b1c      	ldr	r3, [pc, #112]	@ (800173c <handle_slot_edit+0x190>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b96      	cmp	r3, #150	@ 0x96
 80016d0:	d9b1      	bls.n	8001636 <handle_slot_edit+0x8a>
            HAL_GPIO_ReadPin(BTN_OK_GPIO_Port, BTN_OK_Pin) == GPIO_PIN_RESET) {
 80016d2:	2101      	movs	r1, #1
 80016d4:	4817      	ldr	r0, [pc, #92]	@ (8001734 <handle_slot_edit+0x188>)
 80016d6:	f001 fb79 	bl	8002dcc <HAL_GPIO_ReadPin>
 80016da:	4603      	mov	r3, r0
        if (get_ms() - last_btn_ok_press_time > BTN_DEBOUNCE_MS &&
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d1aa      	bne.n	8001636 <handle_slot_edit+0x8a>
            last_btn_ok_press_time = get_ms();
 80016e0:	f7ff fc6c 	bl	8000fbc <get_ms>
 80016e4:	4603      	mov	r3, r0
 80016e6:	4a15      	ldr	r2, [pc, #84]	@ (800173c <handle_slot_edit+0x190>)
 80016e8:	6013      	str	r3, [r2, #0]

            set_time_slot(slot, cur_slot);
 80016ea:	f897 002f 	ldrb.w	r0, [r7, #47]	@ 0x2f
 80016ee:	f107 0320 	add.w	r3, r7, #32
 80016f2:	e893 0006 	ldmia.w	r3, {r1, r2}
 80016f6:	f000 fd05 	bl	8002104 <set_time_slot>
            pcf8574_clr();
 80016fa:	f000 f9e3 	bl	8001ac4 <pcf8574_clr>
            pcf8574_send_string("Plage\nenregistree");
 80016fe:	4810      	ldr	r0, [pc, #64]	@ (8001740 <handle_slot_edit+0x194>)
 8001700:	f000 fa19 	bl	8001b36 <pcf8574_send_string>
            HAL_Delay(1500);
 8001704:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8001708:	f001 f8ac 	bl	8002864 <HAL_Delay>
 800170c:	e002      	b.n	8001714 <handle_slot_edit+0x168>
    if (!edit_time(&cur_slot.start_hour, &cur_slot.start_min, "Heure de debut :")) return;
 800170e:	bf00      	nop
 8001710:	e000      	b.n	8001714 <handle_slot_edit+0x168>
    if (!edit_time(&cur_slot.end_hour, &cur_slot.end_min, "Heure de fin :")) return;
 8001712:	bf00      	nop
            return;
        }
    }
}
 8001714:	3730      	adds	r7, #48	@ 0x30
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	08007380 	.word	0x08007380
 8001720:	08007394 	.word	0x08007394
 8001724:	080073e4 	.word	0x080073e4
 8001728:	080073a4 	.word	0x080073a4
 800172c:	0800736c 	.word	0x0800736c
 8001730:	080073b8 	.word	0x080073b8
 8001734:	48000400 	.word	0x48000400
 8001738:	55555556 	.word	0x55555556
 800173c:	200001e8 	.word	0x200001e8
 8001740:	080073c0 	.word	0x080073c0

08001744 <menu_edit_rtc_time>:

void menu_edit_rtc_time(void) {
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0
    RTC_TimeTypeDef now;
    get_rtc_time(&now);
 800174a:	1d3b      	adds	r3, r7, #4
 800174c:	4618      	mov	r0, r3
 800174e:	f000 fcf9 	bl	8002144 <get_rtc_time>
    uint8_t h = now.Hours, m = now.Minutes;
 8001752:	793b      	ldrb	r3, [r7, #4]
 8001754:	70fb      	strb	r3, [r7, #3]
 8001756:	797b      	ldrb	r3, [r7, #5]
 8001758:	70bb      	strb	r3, [r7, #2]

    if (edit_time(&h, &m, "Regl. heure RTC")) {
 800175a:	1cb9      	adds	r1, r7, #2
 800175c:	1cfb      	adds	r3, r7, #3
 800175e:	4a11      	ldr	r2, [pc, #68]	@ (80017a4 <menu_edit_rtc_time+0x60>)
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff fe41 	bl	80013e8 <edit_time>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d017      	beq.n	800179c <menu_edit_rtc_time+0x58>
        if (set_rtc_time(h, m)) {
 800176c:	78fb      	ldrb	r3, [r7, #3]
 800176e:	78ba      	ldrb	r2, [r7, #2]
 8001770:	4611      	mov	r1, r2
 8001772:	4618      	mov	r0, r3
 8001774:	f000 fcfc 	bl	8002170 <set_rtc_time>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d005      	beq.n	800178a <menu_edit_rtc_time+0x46>
            pcf8574_clr();
 800177e:	f000 f9a1 	bl	8001ac4 <pcf8574_clr>
            pcf8574_send_string("Heure mise\na jour");
 8001782:	4809      	ldr	r0, [pc, #36]	@ (80017a8 <menu_edit_rtc_time+0x64>)
 8001784:	f000 f9d7 	bl	8001b36 <pcf8574_send_string>
 8001788:	e004      	b.n	8001794 <menu_edit_rtc_time+0x50>
        } else {
            pcf8574_clr();
 800178a:	f000 f99b 	bl	8001ac4 <pcf8574_clr>
            pcf8574_send_string("Erreur reglage heure");
 800178e:	4807      	ldr	r0, [pc, #28]	@ (80017ac <menu_edit_rtc_time+0x68>)
 8001790:	f000 f9d1 	bl	8001b36 <pcf8574_send_string>
        }
        HAL_Delay(1500);
 8001794:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8001798:	f001 f864 	bl	8002864 <HAL_Delay>
    }
}
 800179c:	bf00      	nop
 800179e:	3718      	adds	r7, #24
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	080073f0 	.word	0x080073f0
 80017a8:	08007400 	.word	0x08007400
 80017ac:	08007414 	.word	0x08007414

080017b0 <display_position>:

static void display_position(void) {
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
    pcf8574_clr();
 80017b6:	f000 f985 	bl	8001ac4 <pcf8574_clr>
    Direction dir = last_log_dir();
 80017ba:	f7ff f9b1 	bl	8000b20 <last_log_dir>
 80017be:	4603      	mov	r3, r0
 80017c0:	71fb      	strb	r3, [r7, #7]
	if (dir == DIR_IN) {
 80017c2:	79fb      	ldrb	r3, [r7, #7]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d103      	bne.n	80017d0 <display_position+0x20>
        pcf8574_send_string("Le chat est a\nl'interieur");
 80017c8:	480a      	ldr	r0, [pc, #40]	@ (80017f4 <display_position+0x44>)
 80017ca:	f000 f9b4 	bl	8001b36 <pcf8574_send_string>
 80017ce:	e009      	b.n	80017e4 <display_position+0x34>
	} else if (dir == DIR_OUT) {
 80017d0:	79fb      	ldrb	r3, [r7, #7]
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d103      	bne.n	80017de <display_position+0x2e>
        pcf8574_send_string("Le chat est a\nl'exterieur");
 80017d6:	4808      	ldr	r0, [pc, #32]	@ (80017f8 <display_position+0x48>)
 80017d8:	f000 f9ad 	bl	8001b36 <pcf8574_send_string>
 80017dc:	e002      	b.n	80017e4 <display_position+0x34>
	} else {
		pcf8574_send_string("Le chat n'est\npas encore passe");
 80017de:	4807      	ldr	r0, [pc, #28]	@ (80017fc <display_position+0x4c>)
 80017e0:	f000 f9a9 	bl	8001b36 <pcf8574_send_string>
	}
	HAL_Delay(1500);
 80017e4:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80017e8:	f001 f83c 	bl	8002864 <HAL_Delay>
}
 80017ec:	bf00      	nop
 80017ee:	3708      	adds	r7, #8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	0800742c 	.word	0x0800742c
 80017f8:	08007448 	.word	0x08007448
 80017fc:	08007464 	.word	0x08007464

08001800 <navigate_menu>:

static void navigate_menu(void) {
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
    if (!menu_active) return;
 8001804:	4b48      	ldr	r3, [pc, #288]	@ (8001928 <navigate_menu+0x128>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	f083 0301 	eor.w	r3, r3, #1
 800180c:	b2db      	uxtb	r3, r3
 800180e:	2b00      	cmp	r3, #0
 8001810:	f040 8088 	bne.w	8001924 <navigate_menu+0x124>

    if (HAL_GPIO_ReadPin(BTN_DOWN_GPIO_Port, BTN_DOWN_Pin) == GPIO_PIN_RESET) {
 8001814:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001818:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800181c:	f001 fad6 	bl	8002dcc <HAL_GPIO_ReadPin>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d112      	bne.n	800184c <navigate_menu+0x4c>
        menu_index = (menu_index == 0) ? (MENU_ITEM_COUNT - 1) : (menu_index - 1);
 8001826:	4b41      	ldr	r3, [pc, #260]	@ (800192c <navigate_menu+0x12c>)
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d004      	beq.n	8001838 <navigate_menu+0x38>
 800182e:	4b3f      	ldr	r3, [pc, #252]	@ (800192c <navigate_menu+0x12c>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	3b01      	subs	r3, #1
 8001834:	b2db      	uxtb	r3, r3
 8001836:	e000      	b.n	800183a <navigate_menu+0x3a>
 8001838:	2306      	movs	r3, #6
 800183a:	4a3c      	ldr	r2, [pc, #240]	@ (800192c <navigate_menu+0x12c>)
 800183c:	7013      	strb	r3, [r2, #0]
        display_main_menu();
 800183e:	f7ff fbc5 	bl	8000fcc <display_main_menu>
        reset_menu_timeout();
 8001842:	f7ff fbaf 	bl	8000fa4 <reset_menu_timeout>
        HAL_Delay(200);
 8001846:	20c8      	movs	r0, #200	@ 0xc8
 8001848:	f001 f80c 	bl	8002864 <HAL_Delay>
    }

    if (HAL_GPIO_ReadPin(BTN_UP_GPIO_Port, BTN_UP_Pin) == GPIO_PIN_RESET) {
 800184c:	2140      	movs	r1, #64	@ 0x40
 800184e:	4838      	ldr	r0, [pc, #224]	@ (8001930 <navigate_menu+0x130>)
 8001850:	f001 fabc 	bl	8002dcc <HAL_GPIO_ReadPin>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d112      	bne.n	8001880 <navigate_menu+0x80>
        menu_index = (menu_index == (MENU_ITEM_COUNT - 1)) ? 0 : (menu_index + 1);
 800185a:	4b34      	ldr	r3, [pc, #208]	@ (800192c <navigate_menu+0x12c>)
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	2b06      	cmp	r3, #6
 8001860:	d004      	beq.n	800186c <navigate_menu+0x6c>
 8001862:	4b32      	ldr	r3, [pc, #200]	@ (800192c <navigate_menu+0x12c>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	3301      	adds	r3, #1
 8001868:	b2db      	uxtb	r3, r3
 800186a:	e000      	b.n	800186e <navigate_menu+0x6e>
 800186c:	2300      	movs	r3, #0
 800186e:	4a2f      	ldr	r2, [pc, #188]	@ (800192c <navigate_menu+0x12c>)
 8001870:	7013      	strb	r3, [r2, #0]
        display_main_menu();
 8001872:	f7ff fbab 	bl	8000fcc <display_main_menu>
        reset_menu_timeout();
 8001876:	f7ff fb95 	bl	8000fa4 <reset_menu_timeout>
        HAL_Delay(200);
 800187a:	20c8      	movs	r0, #200	@ 0xc8
 800187c:	f000 fff2 	bl	8002864 <HAL_Delay>
    }

    if (get_ms() - last_btn_ok_press_time > BTN_DEBOUNCE_MS &&
 8001880:	f7ff fb9c 	bl	8000fbc <get_ms>
 8001884:	4602      	mov	r2, r0
 8001886:	4b2b      	ldr	r3, [pc, #172]	@ (8001934 <navigate_menu+0x134>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	2b96      	cmp	r3, #150	@ 0x96
 800188e:	d94a      	bls.n	8001926 <navigate_menu+0x126>
    		HAL_GPIO_ReadPin(BTN_OK_GPIO_Port, BTN_OK_Pin) == GPIO_PIN_RESET) {
 8001890:	2101      	movs	r1, #1
 8001892:	4827      	ldr	r0, [pc, #156]	@ (8001930 <navigate_menu+0x130>)
 8001894:	f001 fa9a 	bl	8002dcc <HAL_GPIO_ReadPin>
 8001898:	4603      	mov	r3, r0
    if (get_ms() - last_btn_ok_press_time > BTN_DEBOUNCE_MS &&
 800189a:	2b00      	cmp	r3, #0
 800189c:	d143      	bne.n	8001926 <navigate_menu+0x126>
        switch (menu_index) {
 800189e:	4b23      	ldr	r3, [pc, #140]	@ (800192c <navigate_menu+0x12c>)
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	2b06      	cmp	r3, #6
 80018a4:	d835      	bhi.n	8001912 <navigate_menu+0x112>
 80018a6:	a201      	add	r2, pc, #4	@ (adr r2, 80018ac <navigate_menu+0xac>)
 80018a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ac:	080018c9 	.word	0x080018c9
 80018b0:	080018cf 	.word	0x080018cf
 80018b4:	080018d5 	.word	0x080018d5
 80018b8:	080018db 	.word	0x080018db
 80018bc:	080018e1 	.word	0x080018e1
 80018c0:	080018e7 	.word	0x080018e7
 80018c4:	080018f5 	.word	0x080018f5
            case 0: handle_add_badge(); break;
 80018c8:	f7ff fc92 	bl	80011f0 <handle_add_badge>
 80018cc:	e021      	b.n	8001912 <navigate_menu+0x112>
            case 1: handle_remove_badge(); break;
 80018ce:	f7ff fca8 	bl	8001222 <handle_remove_badge>
 80018d2:	e01e      	b.n	8001912 <navigate_menu+0x112>
            case 2: menu_edit_rtc_time(); break;
 80018d4:	f7ff ff36 	bl	8001744 <menu_edit_rtc_time>
 80018d8:	e01b      	b.n	8001912 <navigate_menu+0x112>
            case 3: handle_slot_edit(); break;
 80018da:	f7ff fe67 	bl	80015ac <handle_slot_edit>
 80018de:	e018      	b.n	8001912 <navigate_menu+0x112>
            case 4: display_position(); break;
 80018e0:	f7ff ff66 	bl	80017b0 <display_position>
 80018e4:	e015      	b.n	8001912 <navigate_menu+0x112>
            case 5: print_log_history(); HAL_Delay(1000); break;
 80018e6:	f7ff f947 	bl	8000b78 <print_log_history>
 80018ea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018ee:	f000 ffb9 	bl	8002864 <HAL_Delay>
 80018f2:	e00e      	b.n	8001912 <navigate_menu+0x112>
            case 6:
            	last_btn_ok_press_time = HAL_GetTick();
 80018f4:	f000 ffaa 	bl	800284c <HAL_GetTick>
 80018f8:	4603      	mov	r3, r0
 80018fa:	4a0e      	ldr	r2, [pc, #56]	@ (8001934 <navigate_menu+0x134>)
 80018fc:	6013      	str	r3, [r2, #0]
            	menu_active = false;
 80018fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001928 <navigate_menu+0x128>)
 8001900:	2200      	movs	r2, #0
 8001902:	701a      	strb	r2, [r3, #0]
            	pcf8574_clr();
 8001904:	f000 f8de 	bl	8001ac4 <pcf8574_clr>
                HAL_Delay(300);
 8001908:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800190c:	f000 ffaa 	bl	8002864 <HAL_Delay>
            	return;
 8001910:	e009      	b.n	8001926 <navigate_menu+0x126>
        }
        display_main_menu();
 8001912:	f7ff fb5b 	bl	8000fcc <display_main_menu>
        reset_menu_timeout();
 8001916:	f7ff fb45 	bl	8000fa4 <reset_menu_timeout>
        HAL_Delay(300);
 800191a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800191e:	f000 ffa1 	bl	8002864 <HAL_Delay>
 8001922:	e000      	b.n	8001926 <navigate_menu+0x126>
    if (!menu_active) return;
 8001924:	bf00      	nop
    }
}
 8001926:	bd80      	pop	{r7, pc}
 8001928:	200001e5 	.word	0x200001e5
 800192c:	200001e4 	.word	0x200001e4
 8001930:	48000400 	.word	0x48000400
 8001934:	200001e8 	.word	0x200001e8

08001938 <lcd_menu_init>:

void lcd_menu_init(void) {
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
    pcf8574_init();
 800193c:	f000 f927 	bl	8001b8e <pcf8574_init>
    pcf8574_clr();
 8001940:	f000 f8c0 	bl	8001ac4 <pcf8574_clr>
    menu_active = false;
 8001944:	4b02      	ldr	r3, [pc, #8]	@ (8001950 <lcd_menu_init+0x18>)
 8001946:	2200      	movs	r2, #0
 8001948:	701a      	strb	r2, [r3, #0]
}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	200001e5 	.word	0x200001e5

08001954 <handle_menu_navigation>:

void handle_menu_navigation(void) {
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
    if (menu_active) navigate_menu();
 8001958:	4b03      	ldr	r3, [pc, #12]	@ (8001968 <handle_menu_navigation+0x14>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <handle_menu_navigation+0x10>
 8001960:	f7ff ff4e 	bl	8001800 <navigate_menu>
}
 8001964:	bf00      	nop
 8001966:	bd80      	pop	{r7, pc}
 8001968:	200001e5 	.word	0x200001e5

0800196c <lcd_menu_timeout_check>:

void lcd_menu_timeout_check(void) {
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
    if (menu_active && (get_ms() - last_interaction > LCD_TIMEOUT_S * 1000)) {
 8001970:	4b0a      	ldr	r3, [pc, #40]	@ (800199c <lcd_menu_timeout_check+0x30>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d00e      	beq.n	8001996 <lcd_menu_timeout_check+0x2a>
 8001978:	f7ff fb20 	bl	8000fbc <get_ms>
 800197c:	4602      	mov	r2, r0
 800197e:	4b08      	ldr	r3, [pc, #32]	@ (80019a0 <lcd_menu_timeout_check+0x34>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001988:	4293      	cmp	r3, r2
 800198a:	d904      	bls.n	8001996 <lcd_menu_timeout_check+0x2a>
        pcf8574_clr();
 800198c:	f000 f89a 	bl	8001ac4 <pcf8574_clr>
        menu_active = false;
 8001990:	4b02      	ldr	r3, [pc, #8]	@ (800199c <lcd_menu_timeout_check+0x30>)
 8001992:	2200      	movs	r2, #0
 8001994:	701a      	strb	r2, [r3, #0]
    }
}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	200001e5 	.word	0x200001e5
 80019a0:	200001e0 	.word	0x200001e0

080019a4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	4603      	mov	r3, r0
 80019ac:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == BTN_OK_Pin) {
 80019ae:	88fb      	ldrh	r3, [r7, #6]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d11e      	bne.n	80019f2 <HAL_GPIO_EXTI_Callback+0x4e>
		uint32_t now = HAL_GetTick();
 80019b4:	f000 ff4a 	bl	800284c <HAL_GetTick>
 80019b8:	60f8      	str	r0, [r7, #12]

	    if (!menu_active) {
 80019ba:	4b0f      	ldr	r3, [pc, #60]	@ (80019f8 <HAL_GPIO_EXTI_Callback+0x54>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	f083 0301 	eor.w	r3, r3, #1
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d014      	beq.n	80019f2 <HAL_GPIO_EXTI_Callback+0x4e>
	    	if (now - last_btn_ok_press_time < BTN_DEBOUNCE_MS) return;
 80019c8:	4b0c      	ldr	r3, [pc, #48]	@ (80019fc <HAL_GPIO_EXTI_Callback+0x58>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	68fa      	ldr	r2, [r7, #12]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	2b95      	cmp	r3, #149	@ 0x95
 80019d2:	d90d      	bls.n	80019f0 <HAL_GPIO_EXTI_Callback+0x4c>
	    	last_btn_ok_press_time = now;
 80019d4:	4a09      	ldr	r2, [pc, #36]	@ (80019fc <HAL_GPIO_EXTI_Callback+0x58>)
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	6013      	str	r3, [r2, #0]

	    	menu_active = true;
 80019da:	4b07      	ldr	r3, [pc, #28]	@ (80019f8 <HAL_GPIO_EXTI_Callback+0x54>)
 80019dc:	2201      	movs	r2, #1
 80019de:	701a      	strb	r2, [r3, #0]
	        menu_index = 0;
 80019e0:	4b07      	ldr	r3, [pc, #28]	@ (8001a00 <HAL_GPIO_EXTI_Callback+0x5c>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	701a      	strb	r2, [r3, #0]
	        display_main_menu();
 80019e6:	f7ff faf1 	bl	8000fcc <display_main_menu>
	        reset_menu_timeout();
 80019ea:	f7ff fadb 	bl	8000fa4 <reset_menu_timeout>
 80019ee:	e000      	b.n	80019f2 <HAL_GPIO_EXTI_Callback+0x4e>
	    	if (now - last_btn_ok_press_time < BTN_DEBOUNCE_MS) return;
 80019f0:	bf00      	nop
	    }
	}
}
 80019f2:	3710      	adds	r7, #16
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	200001e5 	.word	0x200001e5
 80019fc:	200001e8 	.word	0x200001e8
 8001a00:	200001e4 	.word	0x200001e4

08001a04 <pcf8574_send_cmd>:
#include "pcf8574.h"
#include "config.h"

void pcf8574_send_cmd(uint8_t cmd)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af02      	add	r7, sp, #8
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	71fb      	strb	r3, [r7, #7]
    // d[2]= 1010 1100 = 0xAC
    // d[3]= 1010 1000 = 0xA8

    uint8_t du, dl;
    uint8_t data[4];
    du = cmd & 0xf0; // & 0b1111 0000
 8001a0e:	79fb      	ldrb	r3, [r7, #7]
 8001a10:	f023 030f 	bic.w	r3, r3, #15
 8001a14:	73fb      	strb	r3, [r7, #15]
    dl = (cmd << 4) & 0xf0;
 8001a16:	79fb      	ldrb	r3, [r7, #7]
 8001a18:	011b      	lsls	r3, r3, #4
 8001a1a:	73bb      	strb	r3, [r7, #14]
    data[0] = du | 0x0C; // | 0b0000 1100
 8001a1c:	7bfb      	ldrb	r3, [r7, #15]
 8001a1e:	f043 030c 	orr.w	r3, r3, #12
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	723b      	strb	r3, [r7, #8]
    data[1] = du | 0x08; // | 0b0000 1000
 8001a26:	7bfb      	ldrb	r3, [r7, #15]
 8001a28:	f043 0308 	orr.w	r3, r3, #8
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	727b      	strb	r3, [r7, #9]
    data[2] = dl | 0x0C; // | 0b0000 1100
 8001a30:	7bbb      	ldrb	r3, [r7, #14]
 8001a32:	f043 030c 	orr.w	r3, r3, #12
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	72bb      	strb	r3, [r7, #10]
    data[3] = dl | 0x08; // | 0b0000 1000
 8001a3a:	7bbb      	ldrb	r3, [r7, #14]
 8001a3c:	f043 0308 	orr.w	r3, r3, #8
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Master_Transmit(&PCF8574_I2C_HANDLER, PCF8574_I2C_ADDRESS, data, sizeof(data), 0xf);
 8001a44:	f107 0208 	add.w	r2, r7, #8
 8001a48:	230f      	movs	r3, #15
 8001a4a:	9300      	str	r3, [sp, #0]
 8001a4c:	2304      	movs	r3, #4
 8001a4e:	214e      	movs	r1, #78	@ 0x4e
 8001a50:	4803      	ldr	r0, [pc, #12]	@ (8001a60 <pcf8574_send_cmd+0x5c>)
 8001a52:	f001 fa9f 	bl	8002f94 <HAL_I2C_Master_Transmit>
}
 8001a56:	bf00      	nop
 8001a58:	3710      	adds	r7, #16
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	20000100 	.word	0x20000100

08001a64 <pcf8574_send_data>:

void pcf8574_send_data(uint8_t cmd)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af02      	add	r7, sp, #8
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	71fb      	strb	r3, [r7, #7]
    uint8_t du, dl;
    uint8_t data[4];
    du = cmd & 0xf0;
 8001a6e:	79fb      	ldrb	r3, [r7, #7]
 8001a70:	f023 030f 	bic.w	r3, r3, #15
 8001a74:	73fb      	strb	r3, [r7, #15]
    dl = (cmd << 4) & 0xf0;
 8001a76:	79fb      	ldrb	r3, [r7, #7]
 8001a78:	011b      	lsls	r3, r3, #4
 8001a7a:	73bb      	strb	r3, [r7, #14]
    data[0] = du | 0x0D; // | 0b0000 1101
 8001a7c:	7bfb      	ldrb	r3, [r7, #15]
 8001a7e:	f043 030d 	orr.w	r3, r3, #13
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	723b      	strb	r3, [r7, #8]
    data[1] = du | 0x09; // | 0b0000 1001
 8001a86:	7bfb      	ldrb	r3, [r7, #15]
 8001a88:	f043 0309 	orr.w	r3, r3, #9
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	727b      	strb	r3, [r7, #9]
    data[2] = dl | 0x0D; // | 0b0000 1101
 8001a90:	7bbb      	ldrb	r3, [r7, #14]
 8001a92:	f043 030d 	orr.w	r3, r3, #13
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	72bb      	strb	r3, [r7, #10]
    data[3] = dl | 0x09; // | 0b0000 1001
 8001a9a:	7bbb      	ldrb	r3, [r7, #14]
 8001a9c:	f043 0309 	orr.w	r3, r3, #9
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Master_Transmit(&PCF8574_I2C_HANDLER, PCF8574_I2C_ADDRESS, data, sizeof(data), 0xf);
 8001aa4:	f107 0208 	add.w	r2, r7, #8
 8001aa8:	230f      	movs	r3, #15
 8001aaa:	9300      	str	r3, [sp, #0]
 8001aac:	2304      	movs	r3, #4
 8001aae:	214e      	movs	r1, #78	@ 0x4e
 8001ab0:	4803      	ldr	r0, [pc, #12]	@ (8001ac0 <pcf8574_send_data+0x5c>)
 8001ab2:	f001 fa6f 	bl	8002f94 <HAL_I2C_Master_Transmit>
}
 8001ab6:	bf00      	nop
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	20000100 	.word	0x20000100

08001ac4 <pcf8574_clr>:

void pcf8574_clr()
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
    pcf8574_send_cmd(0x80);
 8001aca:	2080      	movs	r0, #128	@ 0x80
 8001acc:	f7ff ff9a 	bl	8001a04 <pcf8574_send_cmd>
    for (int i = 0; i < 70; i++)
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	607b      	str	r3, [r7, #4]
 8001ad4:	e005      	b.n	8001ae2 <pcf8574_clr+0x1e>
    {
        pcf8574_send_data(0x20);
 8001ad6:	2020      	movs	r0, #32
 8001ad8:	f7ff ffc4 	bl	8001a64 <pcf8574_send_data>
    for (int i = 0; i < 70; i++)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	607b      	str	r3, [r7, #4]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2b45      	cmp	r3, #69	@ 0x45
 8001ae6:	ddf6      	ble.n	8001ad6 <pcf8574_clr+0x12>
    }
    pcf8574_send_cmd(0x80);
 8001ae8:	2080      	movs	r0, #128	@ 0x80
 8001aea:	f7ff ff8b 	bl	8001a04 <pcf8574_send_cmd>
}
 8001aee:	bf00      	nop
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <pcf8574_cursor>:

void pcf8574_cursor(uint8_t row, uint8_t col)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b082      	sub	sp, #8
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	4603      	mov	r3, r0
 8001afe:	460a      	mov	r2, r1
 8001b00:	71fb      	strb	r3, [r7, #7]
 8001b02:	4613      	mov	r3, r2
 8001b04:	71bb      	strb	r3, [r7, #6]
    switch (row)
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d002      	beq.n	8001b12 <pcf8574_cursor+0x1c>
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d005      	beq.n	8001b1c <pcf8574_cursor+0x26>
 8001b10:	e009      	b.n	8001b26 <pcf8574_cursor+0x30>
    {
    case 0:
        col |= 0x80;
 8001b12:	79bb      	ldrb	r3, [r7, #6]
 8001b14:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001b18:	71bb      	strb	r3, [r7, #6]
        break;
 8001b1a:	e004      	b.n	8001b26 <pcf8574_cursor+0x30>
    case 1:
        col |= 0xC0;
 8001b1c:	79bb      	ldrb	r3, [r7, #6]
 8001b1e:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8001b22:	71bb      	strb	r3, [r7, #6]
        break;
 8001b24:	bf00      	nop
    }
    pcf8574_send_cmd(col);
 8001b26:	79bb      	ldrb	r3, [r7, #6]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff ff6b 	bl	8001a04 <pcf8574_send_cmd>
}
 8001b2e:	bf00      	nop
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <pcf8574_send_string>:

void pcf8574_send_string(char *str)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b084      	sub	sp, #16
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
	#if DEBUG_UART
    printf("%s\n", str);
	#endif

    for (uint8_t i = 0; i < LCD_NUM_COLS * LCD_NUM_ROWS && *str; i++) {
 8001b3e:	2300      	movs	r3, #0
 8001b40:	73fb      	strb	r3, [r7, #15]
 8001b42:	e019      	b.n	8001b78 <pcf8574_send_string+0x42>
    	if (*str == '\n') {
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	2b0a      	cmp	r3, #10
 8001b4a:	d105      	bne.n	8001b58 <pcf8574_send_string+0x22>
    		i = LCD_NUM_COLS - 1;
 8001b4c:	230f      	movs	r3, #15
 8001b4e:	73fb      	strb	r3, [r7, #15]
    		str++;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	3301      	adds	r3, #1
 8001b54:	607b      	str	r3, [r7, #4]
    		continue;
 8001b56:	e00c      	b.n	8001b72 <pcf8574_send_string+0x3c>
    	}
    	if (i == LCD_NUM_COLS)
 8001b58:	7bfb      	ldrb	r3, [r7, #15]
 8001b5a:	2b10      	cmp	r3, #16
 8001b5c:	d102      	bne.n	8001b64 <pcf8574_send_string+0x2e>
    		pcf8574_send_cmd(0xC0);
 8001b5e:	20c0      	movs	r0, #192	@ 0xc0
 8001b60:	f7ff ff50 	bl	8001a04 <pcf8574_send_cmd>

        pcf8574_send_data(*str++);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	1c5a      	adds	r2, r3, #1
 8001b68:	607a      	str	r2, [r7, #4]
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff ff79 	bl	8001a64 <pcf8574_send_data>
    for (uint8_t i = 0; i < LCD_NUM_COLS * LCD_NUM_ROWS && *str; i++) {
 8001b72:	7bfb      	ldrb	r3, [r7, #15]
 8001b74:	3301      	adds	r3, #1
 8001b76:	73fb      	strb	r3, [r7, #15]
 8001b78:	7bfb      	ldrb	r3, [r7, #15]
 8001b7a:	2b1f      	cmp	r3, #31
 8001b7c:	d803      	bhi.n	8001b86 <pcf8574_send_string+0x50>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d1de      	bne.n	8001b44 <pcf8574_send_string+0xe>
    }
}
 8001b86:	bf00      	nop
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <pcf8574_init>:
        HAL_Delay(50);
    }
}

void pcf8574_init()
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b082      	sub	sp, #8
 8001b92:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < 3; i++)
 8001b94:	2300      	movs	r3, #0
 8001b96:	71fb      	strb	r3, [r7, #7]
 8001b98:	e008      	b.n	8001bac <pcf8574_init+0x1e>
    {
        pcf8574_send_cmd(0x03); // init sequence
 8001b9a:	2003      	movs	r0, #3
 8001b9c:	f7ff ff32 	bl	8001a04 <pcf8574_send_cmd>
        HAL_Delay(5);
 8001ba0:	2005      	movs	r0, #5
 8001ba2:	f000 fe5f 	bl	8002864 <HAL_Delay>
    for (uint8_t i = 0; i < 3; i++)
 8001ba6:	79fb      	ldrb	r3, [r7, #7]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	71fb      	strb	r3, [r7, #7]
 8001bac:	79fb      	ldrb	r3, [r7, #7]
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d9f3      	bls.n	8001b9a <pcf8574_init+0xc>
    }
    pcf8574_send_cmd(0x02); // 4-bit mode
 8001bb2:	2002      	movs	r0, #2
 8001bb4:	f7ff ff26 	bl	8001a04 <pcf8574_send_cmd>
    HAL_Delay(100);
 8001bb8:	2064      	movs	r0, #100	@ 0x64
 8001bba:	f000 fe53 	bl	8002864 <HAL_Delay>
    pcf8574_send_cmd(0x28); // 2 rows, 5x7 points
 8001bbe:	2028      	movs	r0, #40	@ 0x28
 8001bc0:	f7ff ff20 	bl	8001a04 <pcf8574_send_cmd>
    HAL_Delay(1);
 8001bc4:	2001      	movs	r0, #1
 8001bc6:	f000 fe4d 	bl	8002864 <HAL_Delay>
    pcf8574_send_cmd(0x01); // clear
 8001bca:	2001      	movs	r0, #1
 8001bcc:	f7ff ff1a 	bl	8001a04 <pcf8574_send_cmd>
    HAL_Delay(2);
 8001bd0:	2002      	movs	r0, #2
 8001bd2:	f000 fe47 	bl	8002864 <HAL_Delay>
    pcf8574_send_cmd(0x06); // entry mode
 8001bd6:	2006      	movs	r0, #6
 8001bd8:	f7ff ff14 	bl	8001a04 <pcf8574_send_cmd>
    HAL_Delay(1);
 8001bdc:	2001      	movs	r0, #1
 8001bde:	f000 fe41 	bl	8002864 <HAL_Delay>
    pcf8574_send_cmd(0x0C); // disp=on , cur=off, blink=off
 8001be2:	200c      	movs	r0, #12
 8001be4:	f7ff ff0e 	bl	8001a04 <pcf8574_send_cmd>
}
 8001be8:	bf00      	nop
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <rfid_read_uid>:
#include "config.h"
#include "log_history.h"
#include <string.h>
#include <stdio.h>

static bool rfid_read_uid(uint8_t *uid) {
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
    uint8_t status, cardType[2];
    status = MFRC522_Request(PICC_REQIDL, cardType);
 8001bf8:	f107 030c 	add.w	r3, r7, #12
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	2026      	movs	r0, #38	@ 0x26
 8001c00:	f7fe feb3 	bl	800096a <MFRC522_Request>
 8001c04:	4603      	mov	r3, r0
 8001c06:	73fb      	strb	r3, [r7, #15]
    if (status != MI_OK) return false;
 8001c08:	7bfb      	ldrb	r3, [r7, #15]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <rfid_read_uid+0x22>
 8001c0e:	2300      	movs	r3, #0
 8001c10:	e00a      	b.n	8001c28 <rfid_read_uid+0x38>
    status = MFRC522_Anticoll(uid);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f7fe fed0 	bl	80009b8 <MFRC522_Anticoll>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	73fb      	strb	r3, [r7, #15]
    if (status == MI_OK) {
 8001c1c:	7bfb      	ldrb	r3, [r7, #15]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d101      	bne.n	8001c26 <rfid_read_uid+0x36>
		#if DEBUG_UART
    	printf("Lecture du RFID, UID : %02X:%02X:%02X:%02X\n", uid[0], uid[1], uid[2], uid[3]);
		#endif
    	return true;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e000      	b.n	8001c28 <rfid_read_uid+0x38>
    }
    return false;
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3710      	adds	r7, #16
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <detect_direction>:

static Direction detect_direction(void) {
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
	Direction dir = is_pir_triggered() ? DIR_OUT : DIR_IN;
 8001c36:	f7fe ff16 	bl	8000a66 <is_pir_triggered>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	71fb      	strb	r3, [r7, #7]
	if (dir == DIR_IN)
		printf("Le chat est à l'exterieur et va vers l'interieur\n");
	else
		printf("Le chat est à l'interieur et va vers l'exterieur\n");
	#endif
    return dir;
 8001c3e:	79fb      	ldrb	r3, [r7, #7]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <process_uid>:

static void process_uid(uint8_t *uid) {
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b088      	sub	sp, #32
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
    if (!is_authorized(uid)) return;
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f000 f8c9 	bl	8001de8 <is_authorized>
 8001c56:	4603      	mov	r3, r0
 8001c58:	f083 0301 	eor.w	r3, r3, #1
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d118      	bne.n	8001c94 <process_uid+0x4c>
    Direction dir = detect_direction();
 8001c62:	f7ff ffe5 	bl	8001c30 <detect_direction>
 8001c66:	4603      	mov	r3, r0
 8001c68:	77fb      	strb	r3, [r7, #31]
    if (is_time_allowed(dir)) {
 8001c6a:	7ffb      	ldrb	r3, [r7, #31]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f000 f9a3 	bl	8001fb8 <is_time_allowed>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d00e      	beq.n	8001c96 <process_uid+0x4e>
        unlock_gate_temporary();
 8001c78:	f7fe fedb 	bl	8000a32 <unlock_gate_temporary>
        RTC_TimeTypeDef now;
        get_rtc_time(&now);
 8001c7c:	f107 0308 	add.w	r3, r7, #8
 8001c80:	4618      	mov	r0, r3
 8001c82:	f000 fa5f 	bl	8002144 <get_rtc_time>
        log_passage(now.Hours, now.Minutes, dir);
 8001c86:	7a3b      	ldrb	r3, [r7, #8]
 8001c88:	7a79      	ldrb	r1, [r7, #9]
 8001c8a:	7ffa      	ldrb	r2, [r7, #31]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7fe fefb 	bl	8000a88 <log_passage>
 8001c92:	e000      	b.n	8001c96 <process_uid+0x4e>
    if (!is_authorized(uid)) return;
 8001c94:	bf00      	nop
    }
}
 8001c96:	3720      	adds	r7, #32
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <rfid_handler_poll>:

void rfid_handler_poll(void) {
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
    uint8_t uid[UID_LENGTH];
    if (rfid_read_uid(uid)) {
 8001ca2:	463b      	mov	r3, r7
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff ffa3 	bl	8001bf0 <rfid_read_uid>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d003      	beq.n	8001cb8 <rfid_handler_poll+0x1c>
        process_uid(uid);
 8001cb0:	463b      	mov	r3, r7
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7ff ffc8 	bl	8001c48 <process_uid>
    }
}
 8001cb8:	bf00      	nop
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <rfid_handler_add_badge>:

bool rfid_handler_add_badge(uint32_t timeout, char *message_out) {
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
    uint8_t uid[UID_LENGTH];
    uint32_t start = HAL_GetTick();
 8001cca:	f000 fdbf 	bl	800284c <HAL_GetTick>
 8001cce:	6178      	str	r0, [r7, #20]

    while (HAL_GetTick() - start < timeout) {
 8001cd0:	e029      	b.n	8001d26 <rfid_handler_add_badge+0x66>
        if (rfid_read_uid(uid)) {
 8001cd2:	f107 030c 	add.w	r3, r7, #12
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff ff8a 	bl	8001bf0 <rfid_read_uid>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d021      	beq.n	8001d26 <rfid_handler_add_badge+0x66>

            if (is_authorized(uid)) {
 8001ce2:	f107 030c 	add.w	r3, r7, #12
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f000 f87e 	bl	8001de8 <is_authorized>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d005      	beq.n	8001cfe <rfid_handler_add_badge+0x3e>
                sprintf(message_out, "Deja autorise");
 8001cf2:	4915      	ldr	r1, [pc, #84]	@ (8001d48 <rfid_handler_add_badge+0x88>)
 8001cf4:	6838      	ldr	r0, [r7, #0]
 8001cf6:	f004 fa5f 	bl	80061b8 <siprintf>
                return false;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	e020      	b.n	8001d40 <rfid_handler_add_badge+0x80>
            } else if (add_badge(uid)) {
 8001cfe:	f107 030c 	add.w	r3, r7, #12
 8001d02:	4618      	mov	r0, r3
 8001d04:	f000 f898 	bl	8001e38 <add_badge>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d005      	beq.n	8001d1a <rfid_handler_add_badge+0x5a>
                sprintf(message_out, "Badge ajoute !");
 8001d0e:	490f      	ldr	r1, [pc, #60]	@ (8001d4c <rfid_handler_add_badge+0x8c>)
 8001d10:	6838      	ldr	r0, [r7, #0]
 8001d12:	f004 fa51 	bl	80061b8 <siprintf>
                return true;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e012      	b.n	8001d40 <rfid_handler_add_badge+0x80>
            } else {
                sprintf(message_out, "Liste pleine !");
 8001d1a:	490d      	ldr	r1, [pc, #52]	@ (8001d50 <rfid_handler_add_badge+0x90>)
 8001d1c:	6838      	ldr	r0, [r7, #0]
 8001d1e:	f004 fa4b 	bl	80061b8 <siprintf>
                return false;
 8001d22:	2300      	movs	r3, #0
 8001d24:	e00c      	b.n	8001d40 <rfid_handler_add_badge+0x80>
    while (HAL_GetTick() - start < timeout) {
 8001d26:	f000 fd91 	bl	800284c <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d8cd      	bhi.n	8001cd2 <rfid_handler_add_badge+0x12>
            }
        }
    }

    sprintf(message_out, "Ajout annule");
 8001d36:	4907      	ldr	r1, [pc, #28]	@ (8001d54 <rfid_handler_add_badge+0x94>)
 8001d38:	6838      	ldr	r0, [r7, #0]
 8001d3a:	f004 fa3d 	bl	80061b8 <siprintf>
    return false;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3718      	adds	r7, #24
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	08007484 	.word	0x08007484
 8001d4c:	08007494 	.word	0x08007494
 8001d50:	080074a4 	.word	0x080074a4
 8001d54:	080074b4 	.word	0x080074b4

08001d58 <rfid_handler_remove_badge>:

bool rfid_handler_remove_badge(uint32_t timeout, char *message_out) {
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
    uint8_t uid[UID_LENGTH];
    uint32_t start = HAL_GetTick();
 8001d62:	f000 fd73 	bl	800284c <HAL_GetTick>
 8001d66:	6178      	str	r0, [r7, #20]

    while (HAL_GetTick() - start < timeout) {
 8001d68:	e01b      	b.n	8001da2 <rfid_handler_remove_badge+0x4a>
        if (rfid_read_uid(uid)) {
 8001d6a:	f107 030c 	add.w	r3, r7, #12
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff ff3e 	bl	8001bf0 <rfid_read_uid>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d013      	beq.n	8001da2 <rfid_handler_remove_badge+0x4a>

            if (remove_badge(uid)) {
 8001d7a:	f107 030c 	add.w	r3, r7, #12
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f000 f880 	bl	8001e84 <remove_badge>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d005      	beq.n	8001d96 <rfid_handler_remove_badge+0x3e>
                sprintf(message_out, "Badge supprime !");
 8001d8a:	490e      	ldr	r1, [pc, #56]	@ (8001dc4 <rfid_handler_remove_badge+0x6c>)
 8001d8c:	6838      	ldr	r0, [r7, #0]
 8001d8e:	f004 fa13 	bl	80061b8 <siprintf>
                return true;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e012      	b.n	8001dbc <rfid_handler_remove_badge+0x64>
            } else {
                sprintf(message_out, "Badge non trouve");
 8001d96:	490c      	ldr	r1, [pc, #48]	@ (8001dc8 <rfid_handler_remove_badge+0x70>)
 8001d98:	6838      	ldr	r0, [r7, #0]
 8001d9a:	f004 fa0d 	bl	80061b8 <siprintf>
                return false;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	e00c      	b.n	8001dbc <rfid_handler_remove_badge+0x64>
    while (HAL_GetTick() - start < timeout) {
 8001da2:	f000 fd53 	bl	800284c <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d8db      	bhi.n	8001d6a <rfid_handler_remove_badge+0x12>
            }
        }
    }

    sprintf(message_out, "Suppression\nannule");
 8001db2:	4906      	ldr	r1, [pc, #24]	@ (8001dcc <rfid_handler_remove_badge+0x74>)
 8001db4:	6838      	ldr	r0, [r7, #0]
 8001db6:	f004 f9ff 	bl	80061b8 <siprintf>
    return false;
 8001dba:	2300      	movs	r3, #0
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3718      	adds	r7, #24
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	080074c4 	.word	0x080074c4
 8001dc8:	080074d8 	.word	0x080074d8
 8001dcc:	080074ec 	.word	0x080074ec

08001dd0 <rfid_logic_init>:
#include <stdio.h>

static uint8_t badge_list[MAX_BADGES][UID_LENGTH];
static uint8_t badge_count = 0;

void rfid_logic_init(void) {
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
    badge_count = 0;
 8001dd4:	4b03      	ldr	r3, [pc, #12]	@ (8001de4 <rfid_logic_init+0x14>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	701a      	strb	r2, [r3, #0]
}
 8001dda:	bf00      	nop
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr
 8001de4:	20000232 	.word	0x20000232

08001de8 <is_authorized>:

bool is_authorized(const uint8_t *uid) {
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < badge_count; ++i) {
 8001df0:	2300      	movs	r3, #0
 8001df2:	73fb      	strb	r3, [r7, #15]
 8001df4:	e012      	b.n	8001e1c <is_authorized+0x34>
        if (memcmp(uid, badge_list[i], UID_LENGTH) == 0) {
 8001df6:	7bfa      	ldrb	r2, [r7, #15]
 8001df8:	4613      	mov	r3, r2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	4413      	add	r3, r2
 8001dfe:	4a0c      	ldr	r2, [pc, #48]	@ (8001e30 <is_authorized+0x48>)
 8001e00:	4413      	add	r3, r2
 8001e02:	2205      	movs	r2, #5
 8001e04:	4619      	mov	r1, r3
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f004 fa3b 	bl	8006282 <memcmp>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d101      	bne.n	8001e16 <is_authorized+0x2e>
            return true;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e008      	b.n	8001e28 <is_authorized+0x40>
    for (uint8_t i = 0; i < badge_count; ++i) {
 8001e16:	7bfb      	ldrb	r3, [r7, #15]
 8001e18:	3301      	adds	r3, #1
 8001e1a:	73fb      	strb	r3, [r7, #15]
 8001e1c:	4b05      	ldr	r3, [pc, #20]	@ (8001e34 <is_authorized+0x4c>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	7bfa      	ldrb	r2, [r7, #15]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d3e7      	bcc.n	8001df6 <is_authorized+0xe>
        }
    }
    return false;
 8001e26:	2300      	movs	r3, #0
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3710      	adds	r7, #16
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	20000200 	.word	0x20000200
 8001e34:	20000232 	.word	0x20000232

08001e38 <add_badge>:

bool add_badge(const uint8_t *uid) {
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
    if (badge_count >= MAX_BADGES)
 8001e40:	4b0e      	ldr	r3, [pc, #56]	@ (8001e7c <add_badge+0x44>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	2b09      	cmp	r3, #9
 8001e46:	d901      	bls.n	8001e4c <add_badge+0x14>
        return false;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	e013      	b.n	8001e74 <add_badge+0x3c>

    memcpy(badge_list[badge_count], uid, UID_LENGTH);
 8001e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e7c <add_badge+0x44>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	461a      	mov	r2, r3
 8001e52:	4613      	mov	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	4413      	add	r3, r2
 8001e58:	4a09      	ldr	r2, [pc, #36]	@ (8001e80 <add_badge+0x48>)
 8001e5a:	4413      	add	r3, r2
 8001e5c:	2205      	movs	r2, #5
 8001e5e:	6879      	ldr	r1, [r7, #4]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f004 faa2 	bl	80063aa <memcpy>
    badge_count++;
 8001e66:	4b05      	ldr	r3, [pc, #20]	@ (8001e7c <add_badge+0x44>)
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	b2da      	uxtb	r2, r3
 8001e6e:	4b03      	ldr	r3, [pc, #12]	@ (8001e7c <add_badge+0x44>)
 8001e70:	701a      	strb	r2, [r3, #0]
    return true;
 8001e72:	2301      	movs	r3, #1
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	20000232 	.word	0x20000232
 8001e80:	20000200 	.word	0x20000200

08001e84 <remove_badge>:

bool remove_badge(const uint8_t *uid) {
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < badge_count; ++i) {
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	73fb      	strb	r3, [r7, #15]
 8001e90:	e042      	b.n	8001f18 <remove_badge+0x94>
        if (memcmp(uid, badge_list[i], UID_LENGTH) == 0) {
 8001e92:	7bfa      	ldrb	r2, [r7, #15]
 8001e94:	4613      	mov	r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	4413      	add	r3, r2
 8001e9a:	4a24      	ldr	r2, [pc, #144]	@ (8001f2c <remove_badge+0xa8>)
 8001e9c:	4413      	add	r3, r2
 8001e9e:	2205      	movs	r2, #5
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f004 f9ed 	bl	8006282 <memcmp>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d131      	bne.n	8001f12 <remove_badge+0x8e>
            for (uint8_t j = i; j < badge_count - 1; ++j) {
 8001eae:	7bfb      	ldrb	r3, [r7, #15]
 8001eb0:	73bb      	strb	r3, [r7, #14]
 8001eb2:	e013      	b.n	8001edc <remove_badge+0x58>
                memcpy(badge_list[j], badge_list[j + 1], UID_LENGTH);
 8001eb4:	7bba      	ldrb	r2, [r7, #14]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	4413      	add	r3, r2
 8001ebc:	4a1b      	ldr	r2, [pc, #108]	@ (8001f2c <remove_badge+0xa8>)
 8001ebe:	1898      	adds	r0, r3, r2
 8001ec0:	7bbb      	ldrb	r3, [r7, #14]
 8001ec2:	1c5a      	adds	r2, r3, #1
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	4413      	add	r3, r2
 8001eca:	4a18      	ldr	r2, [pc, #96]	@ (8001f2c <remove_badge+0xa8>)
 8001ecc:	4413      	add	r3, r2
 8001ece:	2205      	movs	r2, #5
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	f004 fa6a 	bl	80063aa <memcpy>
            for (uint8_t j = i; j < badge_count - 1; ++j) {
 8001ed6:	7bbb      	ldrb	r3, [r7, #14]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	73bb      	strb	r3, [r7, #14]
 8001edc:	7bba      	ldrb	r2, [r7, #14]
 8001ede:	4b14      	ldr	r3, [pc, #80]	@ (8001f30 <remove_badge+0xac>)
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	dbe5      	blt.n	8001eb4 <remove_badge+0x30>
            }
            badge_count--;
 8001ee8:	4b11      	ldr	r3, [pc, #68]	@ (8001f30 <remove_badge+0xac>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	3b01      	subs	r3, #1
 8001eee:	b2da      	uxtb	r2, r3
 8001ef0:	4b0f      	ldr	r3, [pc, #60]	@ (8001f30 <remove_badge+0xac>)
 8001ef2:	701a      	strb	r2, [r3, #0]
            memset(badge_list[badge_count], 0, UID_LENGTH);
 8001ef4:	4b0e      	ldr	r3, [pc, #56]	@ (8001f30 <remove_badge+0xac>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	461a      	mov	r2, r3
 8001efa:	4613      	mov	r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	4413      	add	r3, r2
 8001f00:	4a0a      	ldr	r2, [pc, #40]	@ (8001f2c <remove_badge+0xa8>)
 8001f02:	4413      	add	r3, r2
 8001f04:	2205      	movs	r2, #5
 8001f06:	2100      	movs	r1, #0
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f004 f9ca 	bl	80062a2 <memset>
            return true;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e008      	b.n	8001f24 <remove_badge+0xa0>
    for (uint8_t i = 0; i < badge_count; ++i) {
 8001f12:	7bfb      	ldrb	r3, [r7, #15]
 8001f14:	3301      	adds	r3, #1
 8001f16:	73fb      	strb	r3, [r7, #15]
 8001f18:	4b05      	ldr	r3, [pc, #20]	@ (8001f30 <remove_badge+0xac>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	7bfa      	ldrb	r2, [r7, #15]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d3b7      	bcc.n	8001e92 <remove_badge+0xe>
        }
    }
    return false;
 8001f22:	2300      	movs	r3, #0
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3710      	adds	r7, #16
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	20000200 	.word	0x20000200
 8001f30:	20000232 	.word	0x20000232

08001f34 <scheduler_init>:
#include "main.h"
#include <stdio.h>

static TimeSlot horaires_autorises[NB_SLOTS];

void scheduler_init(void) {
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
    for (int i = 0; i < NB_SLOTS; ++i) {
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60fb      	str	r3, [r7, #12]
 8001f3e:	e02e      	b.n	8001f9e <scheduler_init+0x6a>
        horaires_autorises[i] = (TimeSlot){0, 0, 0, 0, DIR_BOTH};
 8001f40:	491c      	ldr	r1, [pc, #112]	@ (8001fb4 <scheduler_init+0x80>)
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	4613      	mov	r3, r2
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	4413      	add	r3, r2
 8001f4a:	440b      	add	r3, r1
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	701a      	strb	r2, [r3, #0]
 8001f50:	4918      	ldr	r1, [pc, #96]	@ (8001fb4 <scheduler_init+0x80>)
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	4613      	mov	r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	4413      	add	r3, r2
 8001f5a:	440b      	add	r3, r1
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	2200      	movs	r2, #0
 8001f60:	701a      	strb	r2, [r3, #0]
 8001f62:	4914      	ldr	r1, [pc, #80]	@ (8001fb4 <scheduler_init+0x80>)
 8001f64:	68fa      	ldr	r2, [r7, #12]
 8001f66:	4613      	mov	r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	4413      	add	r3, r2
 8001f6c:	440b      	add	r3, r1
 8001f6e:	3302      	adds	r3, #2
 8001f70:	2200      	movs	r2, #0
 8001f72:	701a      	strb	r2, [r3, #0]
 8001f74:	490f      	ldr	r1, [pc, #60]	@ (8001fb4 <scheduler_init+0x80>)
 8001f76:	68fa      	ldr	r2, [r7, #12]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	4413      	add	r3, r2
 8001f7e:	440b      	add	r3, r1
 8001f80:	3303      	adds	r3, #3
 8001f82:	2200      	movs	r2, #0
 8001f84:	701a      	strb	r2, [r3, #0]
 8001f86:	490b      	ldr	r1, [pc, #44]	@ (8001fb4 <scheduler_init+0x80>)
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	4413      	add	r3, r2
 8001f90:	440b      	add	r3, r1
 8001f92:	3304      	adds	r3, #4
 8001f94:	2202      	movs	r2, #2
 8001f96:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < NB_SLOTS; ++i) {
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	60fb      	str	r3, [r7, #12]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2b04      	cmp	r3, #4
 8001fa2:	ddcd      	ble.n	8001f40 <scheduler_init+0xc>
    }
    set_rtc_time(0, 0);
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	2000      	movs	r0, #0
 8001fa8:	f000 f8e2 	bl	8002170 <set_rtc_time>
}
 8001fac:	bf00      	nop
 8001fae:	3710      	adds	r7, #16
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	20000234 	.word	0x20000234

08001fb8 <is_time_allowed>:

bool is_time_allowed(Direction dir) {
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	71fb      	strb	r3, [r7, #7]
    return !is_time_forbidden(dir);
 8001fc2:	79fb      	ldrb	r3, [r7, #7]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f000 f811 	bl	8001fec <is_time_forbidden>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	bf14      	ite	ne
 8001fd0:	2301      	movne	r3, #1
 8001fd2:	2300      	moveq	r3, #0
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	f083 0301 	eor.w	r3, r3, #1
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	f003 0301 	and.w	r3, r3, #1
 8001fe0:	b2db      	uxtb	r3, r3
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
	...

08001fec <is_time_forbidden>:

bool is_time_forbidden(Direction dir) {
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b08c      	sub	sp, #48	@ 0x30
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	71fb      	strb	r3, [r7, #7]
    RTC_TimeTypeDef time;
    get_rtc_time(&time);
 8001ff6:	f107 030c 	add.w	r3, r7, #12
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f000 f8a2 	bl	8002144 <get_rtc_time>
    uint16_t now = time.Hours * 60 + time.Minutes;
 8002000:	7b3b      	ldrb	r3, [r7, #12]
 8002002:	461a      	mov	r2, r3
 8002004:	0112      	lsls	r2, r2, #4
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	b29b      	uxth	r3, r3
 800200c:	7b7a      	ldrb	r2, [r7, #13]
 800200e:	4413      	add	r3, r2
 8002010:	857b      	strh	r3, [r7, #42]	@ 0x2a

    for (int i = 0; i < NB_SLOTS; ++i) {
 8002012:	2300      	movs	r3, #0
 8002014:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002016:	e049      	b.n	80020ac <is_time_forbidden+0xc0>
        TimeSlot *s = &horaires_autorises[i];
 8002018:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800201a:	4613      	mov	r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	4413      	add	r3, r2
 8002020:	4a26      	ldr	r2, [pc, #152]	@ (80020bc <is_time_forbidden+0xd0>)
 8002022:	4413      	add	r3, r2
 8002024:	627b      	str	r3, [r7, #36]	@ 0x24

        if (s->direction != dir && s->direction != DIR_BOTH)
 8002026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002028:	791b      	ldrb	r3, [r3, #4]
 800202a:	79fa      	ldrb	r2, [r7, #7]
 800202c:	429a      	cmp	r2, r3
 800202e:	d003      	beq.n	8002038 <is_time_forbidden+0x4c>
 8002030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002032:	791b      	ldrb	r3, [r3, #4]
 8002034:	2b02      	cmp	r3, #2
 8002036:	d135      	bne.n	80020a4 <is_time_forbidden+0xb8>
            continue;

        uint16_t start = s->start_hour * 60 + s->start_min;
 8002038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	461a      	mov	r2, r3
 800203e:	0112      	lsls	r2, r2, #4
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	b29b      	uxth	r3, r3
 8002046:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002048:	7852      	ldrb	r2, [r2, #1]
 800204a:	4413      	add	r3, r2
 800204c:	847b      	strh	r3, [r7, #34]	@ 0x22
        uint16_t end   = s->end_hour   * 60 + s->end_min;
 800204e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002050:	789b      	ldrb	r3, [r3, #2]
 8002052:	461a      	mov	r2, r3
 8002054:	0112      	lsls	r2, r2, #4
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	b29b      	uxth	r3, r3
 800205c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800205e:	78d2      	ldrb	r2, [r2, #3]
 8002060:	4413      	add	r3, r2
 8002062:	843b      	strh	r3, [r7, #32]

        if (start < end && now >= start && now <= end)
 8002064:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8002066:	8c3b      	ldrh	r3, [r7, #32]
 8002068:	429a      	cmp	r2, r3
 800206a:	d209      	bcs.n	8002080 <is_time_forbidden+0x94>
 800206c:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800206e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002070:	429a      	cmp	r2, r3
 8002072:	d305      	bcc.n	8002080 <is_time_forbidden+0x94>
 8002074:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8002076:	8c3b      	ldrh	r3, [r7, #32]
 8002078:	429a      	cmp	r2, r3
 800207a:	d801      	bhi.n	8002080 <is_time_forbidden+0x94>
			return true;
 800207c:	2301      	movs	r3, #1
 800207e:	e019      	b.n	80020b4 <is_time_forbidden+0xc8>
		else if(start > end &&
 8002080:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8002082:	8c3b      	ldrh	r3, [r7, #32]
 8002084:	429a      	cmp	r2, r3
 8002086:	d90e      	bls.n	80020a6 <is_time_forbidden+0xba>
 8002088:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800208a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800208c:	429a      	cmp	r2, r3
 800208e:	d303      	bcc.n	8002098 <is_time_forbidden+0xac>
				((now >= start && now < 24*60) || (now >= 0 && now < end)))
 8002090:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002092:	f5b3 6fb4 	cmp.w	r3, #1440	@ 0x5a0
 8002096:	d303      	bcc.n	80020a0 <is_time_forbidden+0xb4>
 8002098:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800209a:	8c3b      	ldrh	r3, [r7, #32]
 800209c:	429a      	cmp	r2, r3
 800209e:	d202      	bcs.n	80020a6 <is_time_forbidden+0xba>
			return true;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e007      	b.n	80020b4 <is_time_forbidden+0xc8>
            continue;
 80020a4:	bf00      	nop
    for (int i = 0; i < NB_SLOTS; ++i) {
 80020a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020a8:	3301      	adds	r3, #1
 80020aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80020ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020ae:	2b04      	cmp	r3, #4
 80020b0:	ddb2      	ble.n	8002018 <is_time_forbidden+0x2c>
    }
    return false;
 80020b2:	2300      	movs	r3, #0
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3730      	adds	r7, #48	@ 0x30
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	20000234 	.word	0x20000234

080020c0 <get_time_slot>:

TimeSlot get_time_slot(uint8_t slot_idx) {
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	460b      	mov	r3, r1
 80020ca:	70fb      	strb	r3, [r7, #3]
	if (slot_idx < NB_SLOTS)
 80020cc:	78fb      	ldrb	r3, [r7, #3]
 80020ce:	2b04      	cmp	r3, #4
 80020d0:	d80c      	bhi.n	80020ec <get_time_slot+0x2c>
		return horaires_autorises[slot_idx];
 80020d2:	78fa      	ldrb	r2, [r7, #3]
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	490a      	ldr	r1, [pc, #40]	@ (8002100 <get_time_slot+0x40>)
 80020d8:	4613      	mov	r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	4413      	add	r3, r2
 80020de:	18ca      	adds	r2, r1, r3
 80020e0:	4603      	mov	r3, r0
 80020e2:	6811      	ldr	r1, [r2, #0]
 80020e4:	6019      	str	r1, [r3, #0]
 80020e6:	7912      	ldrb	r2, [r2, #4]
 80020e8:	711a      	strb	r2, [r3, #4]
 80020ea:	e003      	b.n	80020f4 <get_time_slot+0x34>
	else
		return (TimeSlot) {0, 0, 0, 0, 0};
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	601a      	str	r2, [r3, #0]
 80020f2:	711a      	strb	r2, [r3, #4]
}
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	3714      	adds	r7, #20
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr
 8002100:	20000234 	.word	0x20000234

08002104 <set_time_slot>:

void set_time_slot(uint8_t slot_idx, TimeSlot slot) {
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	1d3b      	adds	r3, r7, #4
 800210c:	e883 0006 	stmia.w	r3, {r1, r2}
 8002110:	4603      	mov	r3, r0
 8002112:	73fb      	strb	r3, [r7, #15]
    if (slot_idx < NB_SLOTS)
 8002114:	7bfb      	ldrb	r3, [r7, #15]
 8002116:	2b04      	cmp	r3, #4
 8002118:	d80b      	bhi.n	8002132 <set_time_slot+0x2e>
        horaires_autorises[slot_idx] = slot;
 800211a:	7bfa      	ldrb	r2, [r7, #15]
 800211c:	4908      	ldr	r1, [pc, #32]	@ (8002140 <set_time_slot+0x3c>)
 800211e:	4613      	mov	r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	4413      	add	r3, r2
 8002124:	440b      	add	r3, r1
 8002126:	461a      	mov	r2, r3
 8002128:	1d3b      	adds	r3, r7, #4
 800212a:	6818      	ldr	r0, [r3, #0]
 800212c:	6010      	str	r0, [r2, #0]
 800212e:	791b      	ldrb	r3, [r3, #4]
 8002130:	7113      	strb	r3, [r2, #4]
}
 8002132:	bf00      	nop
 8002134:	3714      	adds	r7, #20
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	20000234 	.word	0x20000234

08002144 <get_rtc_time>:

void get_rtc_time(RTC_TimeTypeDef *time) {
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
    RTC_DateTypeDef dummy;
    HAL_RTC_GetTime(&hrtc, time, RTC_FORMAT_BIN);
 800214c:	2200      	movs	r2, #0
 800214e:	6879      	ldr	r1, [r7, #4]
 8002150:	4806      	ldr	r0, [pc, #24]	@ (800216c <get_rtc_time+0x28>)
 8002152:	f002 fbd7 	bl	8004904 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &dummy, RTC_FORMAT_BIN);
 8002156:	f107 030c 	add.w	r3, r7, #12
 800215a:	2200      	movs	r2, #0
 800215c:	4619      	mov	r1, r3
 800215e:	4803      	ldr	r0, [pc, #12]	@ (800216c <get_rtc_time+0x28>)
 8002160:	f002 fc2c 	bl	80049bc <HAL_RTC_GetDate>
}
 8002164:	bf00      	nop
 8002166:	3710      	adds	r7, #16
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	20000154 	.word	0x20000154

08002170 <set_rtc_time>:

bool set_rtc_time(uint8_t hour, uint8_t minute) {
 8002170:	b580      	push	{r7, lr}
 8002172:	b088      	sub	sp, #32
 8002174:	af00      	add	r7, sp, #0
 8002176:	4603      	mov	r3, r0
 8002178:	460a      	mov	r2, r1
 800217a:	71fb      	strb	r3, [r7, #7]
 800217c:	4613      	mov	r3, r2
 800217e:	71bb      	strb	r3, [r7, #6]
    RTC_TimeTypeDef time = {0};
 8002180:	f107 030c 	add.w	r3, r7, #12
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	605a      	str	r2, [r3, #4]
 800218a:	609a      	str	r2, [r3, #8]
 800218c:	60da      	str	r2, [r3, #12]
 800218e:	611a      	str	r2, [r3, #16]
    time.Hours   = hour;
 8002190:	79fb      	ldrb	r3, [r7, #7]
 8002192:	733b      	strb	r3, [r7, #12]
    time.Minutes = minute;
 8002194:	79bb      	ldrb	r3, [r7, #6]
 8002196:	737b      	strb	r3, [r7, #13]
    time.Seconds = 0;
 8002198:	2300      	movs	r3, #0
 800219a:	73bb      	strb	r3, [r7, #14]
    if (HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN) != HAL_OK) {
 800219c:	f107 030c 	add.w	r3, r7, #12
 80021a0:	2200      	movs	r2, #0
 80021a2:	4619      	mov	r1, r3
 80021a4:	4809      	ldr	r0, [pc, #36]	@ (80021cc <set_rtc_time+0x5c>)
 80021a6:	f002 fb10 	bl	80047ca <HAL_RTC_SetTime>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <set_rtc_time+0x44>
        return false;
 80021b0:	2300      	movs	r3, #0
 80021b2:	e007      	b.n	80021c4 <set_rtc_time+0x54>
    }

    RTC_DateTypeDef dummy;
    HAL_RTC_GetDate(&hrtc, &dummy, RTC_FORMAT_BIN);
 80021b4:	f107 0308 	add.w	r3, r7, #8
 80021b8:	2200      	movs	r2, #0
 80021ba:	4619      	mov	r1, r3
 80021bc:	4803      	ldr	r0, [pc, #12]	@ (80021cc <set_rtc_time+0x5c>)
 80021be:	f002 fbfd 	bl	80049bc <HAL_RTC_GetDate>
    return true;
 80021c2:	2301      	movs	r3, #1
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3720      	adds	r7, #32
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	20000154 	.word	0x20000154

080021d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021d6:	4b0f      	ldr	r3, [pc, #60]	@ (8002214 <HAL_MspInit+0x44>)
 80021d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021da:	4a0e      	ldr	r2, [pc, #56]	@ (8002214 <HAL_MspInit+0x44>)
 80021dc:	f043 0301 	orr.w	r3, r3, #1
 80021e0:	6613      	str	r3, [r2, #96]	@ 0x60
 80021e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002214 <HAL_MspInit+0x44>)
 80021e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	607b      	str	r3, [r7, #4]
 80021ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021ee:	4b09      	ldr	r3, [pc, #36]	@ (8002214 <HAL_MspInit+0x44>)
 80021f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021f2:	4a08      	ldr	r2, [pc, #32]	@ (8002214 <HAL_MspInit+0x44>)
 80021f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80021fa:	4b06      	ldr	r3, [pc, #24]	@ (8002214 <HAL_MspInit+0x44>)
 80021fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002202:	603b      	str	r3, [r7, #0]
 8002204:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002206:	f001 fb33 	bl	8003870 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800220a:	bf00      	nop
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	40021000 	.word	0x40021000

08002218 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b09a      	sub	sp, #104	@ 0x68
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002220:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002224:	2200      	movs	r2, #0
 8002226:	601a      	str	r2, [r3, #0]
 8002228:	605a      	str	r2, [r3, #4]
 800222a:	609a      	str	r2, [r3, #8]
 800222c:	60da      	str	r2, [r3, #12]
 800222e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002230:	f107 0310 	add.w	r3, r7, #16
 8002234:	2244      	movs	r2, #68	@ 0x44
 8002236:	2100      	movs	r1, #0
 8002238:	4618      	mov	r0, r3
 800223a:	f004 f832 	bl	80062a2 <memset>
  if(hi2c->Instance==I2C2)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a1f      	ldr	r2, [pc, #124]	@ (80022c0 <HAL_I2C_MspInit+0xa8>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d137      	bne.n	80022b8 <HAL_I2C_MspInit+0xa0>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002248:	2380      	movs	r3, #128	@ 0x80
 800224a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800224c:	2300      	movs	r3, #0
 800224e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002250:	f107 0310 	add.w	r3, r7, #16
 8002254:	4618      	mov	r0, r3
 8002256:	f002 f849 	bl	80042ec <HAL_RCCEx_PeriphCLKConfig>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002260:	f7fe fe9a 	bl	8000f98 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002264:	4b17      	ldr	r3, [pc, #92]	@ (80022c4 <HAL_I2C_MspInit+0xac>)
 8002266:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002268:	4a16      	ldr	r2, [pc, #88]	@ (80022c4 <HAL_I2C_MspInit+0xac>)
 800226a:	f043 0301 	orr.w	r3, r3, #1
 800226e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002270:	4b14      	ldr	r3, [pc, #80]	@ (80022c4 <HAL_I2C_MspInit+0xac>)
 8002272:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002274:	f003 0301 	and.w	r3, r3, #1
 8002278:	60fb      	str	r3, [r7, #12]
 800227a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800227c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002280:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002282:	2312      	movs	r3, #18
 8002284:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002286:	2300      	movs	r3, #0
 8002288:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800228a:	2300      	movs	r3, #0
 800228c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800228e:	2304      	movs	r3, #4
 8002290:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002292:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002296:	4619      	mov	r1, r3
 8002298:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800229c:	f000 fc14 	bl	8002ac8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80022a0:	4b08      	ldr	r3, [pc, #32]	@ (80022c4 <HAL_I2C_MspInit+0xac>)
 80022a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022a4:	4a07      	ldr	r2, [pc, #28]	@ (80022c4 <HAL_I2C_MspInit+0xac>)
 80022a6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80022aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80022ac:	4b05      	ldr	r3, [pc, #20]	@ (80022c4 <HAL_I2C_MspInit+0xac>)
 80022ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022b4:	60bb      	str	r3, [r7, #8]
 80022b6:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 80022b8:	bf00      	nop
 80022ba:	3768      	adds	r7, #104	@ 0x68
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	40005800 	.word	0x40005800
 80022c4:	40021000 	.word	0x40021000

080022c8 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b094      	sub	sp, #80	@ 0x50
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022d0:	f107 030c 	add.w	r3, r7, #12
 80022d4:	2244      	movs	r2, #68	@ 0x44
 80022d6:	2100      	movs	r1, #0
 80022d8:	4618      	mov	r0, r3
 80022da:	f003 ffe2 	bl	80062a2 <memset>
  if(hrtc->Instance==RTC)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a15      	ldr	r2, [pc, #84]	@ (8002338 <HAL_RTC_MspInit+0x70>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d123      	bne.n	8002330 <HAL_RTC_MspInit+0x68>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80022e8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80022ec:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80022ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80022f2:	64fb      	str	r3, [r7, #76]	@ 0x4c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022f4:	f107 030c 	add.w	r3, r7, #12
 80022f8:	4618      	mov	r0, r3
 80022fa:	f001 fff7 	bl	80042ec <HAL_RCCEx_PeriphCLKConfig>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002304:	f7fe fe48 	bl	8000f98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002308:	4b0c      	ldr	r3, [pc, #48]	@ (800233c <HAL_RTC_MspInit+0x74>)
 800230a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800230e:	4a0b      	ldr	r2, [pc, #44]	@ (800233c <HAL_RTC_MspInit+0x74>)
 8002310:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002314:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002318:	4b08      	ldr	r3, [pc, #32]	@ (800233c <HAL_RTC_MspInit+0x74>)
 800231a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800231c:	4a07      	ldr	r2, [pc, #28]	@ (800233c <HAL_RTC_MspInit+0x74>)
 800231e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002322:	6593      	str	r3, [r2, #88]	@ 0x58
 8002324:	4b05      	ldr	r3, [pc, #20]	@ (800233c <HAL_RTC_MspInit+0x74>)
 8002326:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002328:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800232c:	60bb      	str	r3, [r7, #8]
 800232e:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8002330:	bf00      	nop
 8002332:	3750      	adds	r7, #80	@ 0x50
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40002800 	.word	0x40002800
 800233c:	40021000 	.word	0x40021000

08002340 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b08a      	sub	sp, #40	@ 0x28
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002348:	f107 0314 	add.w	r3, r7, #20
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	605a      	str	r2, [r3, #4]
 8002352:	609a      	str	r2, [r3, #8]
 8002354:	60da      	str	r2, [r3, #12]
 8002356:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a17      	ldr	r2, [pc, #92]	@ (80023bc <HAL_SPI_MspInit+0x7c>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d128      	bne.n	80023b4 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002362:	4b17      	ldr	r3, [pc, #92]	@ (80023c0 <HAL_SPI_MspInit+0x80>)
 8002364:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002366:	4a16      	ldr	r2, [pc, #88]	@ (80023c0 <HAL_SPI_MspInit+0x80>)
 8002368:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800236c:	6613      	str	r3, [r2, #96]	@ 0x60
 800236e:	4b14      	ldr	r3, [pc, #80]	@ (80023c0 <HAL_SPI_MspInit+0x80>)
 8002370:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002372:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002376:	613b      	str	r3, [r7, #16]
 8002378:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800237a:	4b11      	ldr	r3, [pc, #68]	@ (80023c0 <HAL_SPI_MspInit+0x80>)
 800237c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800237e:	4a10      	ldr	r2, [pc, #64]	@ (80023c0 <HAL_SPI_MspInit+0x80>)
 8002380:	f043 0301 	orr.w	r3, r3, #1
 8002384:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002386:	4b0e      	ldr	r3, [pc, #56]	@ (80023c0 <HAL_SPI_MspInit+0x80>)
 8002388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	60fb      	str	r3, [r7, #12]
 8002390:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002392:	23e0      	movs	r3, #224	@ 0xe0
 8002394:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002396:	2302      	movs	r3, #2
 8002398:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239a:	2300      	movs	r3, #0
 800239c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800239e:	2300      	movs	r3, #0
 80023a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80023a2:	2305      	movs	r3, #5
 80023a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023a6:	f107 0314 	add.w	r3, r7, #20
 80023aa:	4619      	mov	r1, r3
 80023ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023b0:	f000 fb8a 	bl	8002ac8 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80023b4:	bf00      	nop
 80023b6:	3728      	adds	r7, #40	@ 0x28
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40013000 	.word	0x40013000
 80023c0:	40021000 	.word	0x40021000

080023c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023c8:	bf00      	nop
 80023ca:	e7fd      	b.n	80023c8 <NMI_Handler+0x4>

080023cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023d0:	bf00      	nop
 80023d2:	e7fd      	b.n	80023d0 <HardFault_Handler+0x4>

080023d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023d8:	bf00      	nop
 80023da:	e7fd      	b.n	80023d8 <MemManage_Handler+0x4>

080023dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023e0:	bf00      	nop
 80023e2:	e7fd      	b.n	80023e0 <BusFault_Handler+0x4>

080023e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023e8:	bf00      	nop
 80023ea:	e7fd      	b.n	80023e8 <UsageFault_Handler+0x4>

080023ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023f0:	bf00      	nop
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr

080023fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023fa:	b480      	push	{r7}
 80023fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023fe:	bf00      	nop
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800240c:	bf00      	nop
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr

08002416 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800241a:	f000 fa05 	bl	8002828 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800241e:	bf00      	nop
 8002420:	bd80      	pop	{r7, pc}

08002422 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002422:	b580      	push	{r7, lr}
 8002424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_OK_Pin);
 8002426:	2001      	movs	r0, #1
 8002428:	f000 fd00 	bl	8002e2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800242c:	bf00      	nop
 800242e:	bd80      	pop	{r7, pc}

08002430 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800243c:	2300      	movs	r3, #0
 800243e:	617b      	str	r3, [r7, #20]
 8002440:	e00a      	b.n	8002458 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002442:	f3af 8000 	nop.w
 8002446:	4601      	mov	r1, r0
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	1c5a      	adds	r2, r3, #1
 800244c:	60ba      	str	r2, [r7, #8]
 800244e:	b2ca      	uxtb	r2, r1
 8002450:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	3301      	adds	r3, #1
 8002456:	617b      	str	r3, [r7, #20]
 8002458:	697a      	ldr	r2, [r7, #20]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	429a      	cmp	r2, r3
 800245e:	dbf0      	blt.n	8002442 <_read+0x12>
  }

  return len;
 8002460:	687b      	ldr	r3, [r7, #4]
}
 8002462:	4618      	mov	r0, r3
 8002464:	3718      	adds	r7, #24
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	b086      	sub	sp, #24
 800246e:	af00      	add	r7, sp, #0
 8002470:	60f8      	str	r0, [r7, #12]
 8002472:	60b9      	str	r1, [r7, #8]
 8002474:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002476:	2300      	movs	r3, #0
 8002478:	617b      	str	r3, [r7, #20]
 800247a:	e009      	b.n	8002490 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	1c5a      	adds	r2, r3, #1
 8002480:	60ba      	str	r2, [r7, #8]
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	4618      	mov	r0, r3
 8002486:	f000 f915 	bl	80026b4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	3301      	adds	r3, #1
 800248e:	617b      	str	r3, [r7, #20]
 8002490:	697a      	ldr	r2, [r7, #20]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	429a      	cmp	r2, r3
 8002496:	dbf1      	blt.n	800247c <_write+0x12>
  }
  return len;
 8002498:	687b      	ldr	r3, [r7, #4]
}
 800249a:	4618      	mov	r0, r3
 800249c:	3718      	adds	r7, #24
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <_close>:

int _close(int file)
{
 80024a2:	b480      	push	{r7}
 80024a4:	b083      	sub	sp, #12
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80024aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr

080024ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024ba:	b480      	push	{r7}
 80024bc:	b083      	sub	sp, #12
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
 80024c2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80024ca:	605a      	str	r2, [r3, #4]
  return 0;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr

080024da <_isatty>:

int _isatty(int file)
{
 80024da:	b480      	push	{r7}
 80024dc:	b083      	sub	sp, #12
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80024e2:	2301      	movs	r3, #1
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3714      	adds	r7, #20
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
	...

0800250c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b086      	sub	sp, #24
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002514:	4a14      	ldr	r2, [pc, #80]	@ (8002568 <_sbrk+0x5c>)
 8002516:	4b15      	ldr	r3, [pc, #84]	@ (800256c <_sbrk+0x60>)
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002520:	4b13      	ldr	r3, [pc, #76]	@ (8002570 <_sbrk+0x64>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d102      	bne.n	800252e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002528:	4b11      	ldr	r3, [pc, #68]	@ (8002570 <_sbrk+0x64>)
 800252a:	4a12      	ldr	r2, [pc, #72]	@ (8002574 <_sbrk+0x68>)
 800252c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800252e:	4b10      	ldr	r3, [pc, #64]	@ (8002570 <_sbrk+0x64>)
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4413      	add	r3, r2
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	429a      	cmp	r2, r3
 800253a:	d207      	bcs.n	800254c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800253c:	f003 ff00 	bl	8006340 <__errno>
 8002540:	4603      	mov	r3, r0
 8002542:	220c      	movs	r2, #12
 8002544:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002546:	f04f 33ff 	mov.w	r3, #4294967295
 800254a:	e009      	b.n	8002560 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800254c:	4b08      	ldr	r3, [pc, #32]	@ (8002570 <_sbrk+0x64>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002552:	4b07      	ldr	r3, [pc, #28]	@ (8002570 <_sbrk+0x64>)
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4413      	add	r3, r2
 800255a:	4a05      	ldr	r2, [pc, #20]	@ (8002570 <_sbrk+0x64>)
 800255c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800255e:	68fb      	ldr	r3, [r7, #12]
}
 8002560:	4618      	mov	r0, r3
 8002562:	3718      	adds	r7, #24
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	20008000 	.word	0x20008000
 800256c:	00000400 	.word	0x00000400
 8002570:	20000250 	.word	0x20000250
 8002574:	20000440 	.word	0x20000440

08002578 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800257c:	4b06      	ldr	r3, [pc, #24]	@ (8002598 <SystemInit+0x20>)
 800257e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002582:	4a05      	ldr	r2, [pc, #20]	@ (8002598 <SystemInit+0x20>)
 8002584:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002588:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800258c:	bf00      	nop
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	e000ed00 	.word	0xe000ed00

0800259c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800259c:	480d      	ldr	r0, [pc, #52]	@ (80025d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800259e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80025a0:	f7ff ffea 	bl	8002578 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025a4:	480c      	ldr	r0, [pc, #48]	@ (80025d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80025a6:	490d      	ldr	r1, [pc, #52]	@ (80025dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80025a8:	4a0d      	ldr	r2, [pc, #52]	@ (80025e0 <LoopForever+0xe>)
  movs r3, #0
 80025aa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80025ac:	e002      	b.n	80025b4 <LoopCopyDataInit>

080025ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025b2:	3304      	adds	r3, #4

080025b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025b8:	d3f9      	bcc.n	80025ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025ba:	4a0a      	ldr	r2, [pc, #40]	@ (80025e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80025bc:	4c0a      	ldr	r4, [pc, #40]	@ (80025e8 <LoopForever+0x16>)
  movs r3, #0
 80025be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025c0:	e001      	b.n	80025c6 <LoopFillZerobss>

080025c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025c4:	3204      	adds	r2, #4

080025c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025c8:	d3fb      	bcc.n	80025c2 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80025ca:	f003 febf 	bl	800634c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80025ce:	f7fe fb25 	bl	8000c1c <main>

080025d2 <LoopForever>:

LoopForever:
    b LoopForever
 80025d2:	e7fe      	b.n	80025d2 <LoopForever>
  ldr   r0, =_estack
 80025d4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80025d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025dc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80025e0:	08007574 	.word	0x08007574
  ldr r2, =_sbss
 80025e4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80025e8:	2000043c 	.word	0x2000043c

080025ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80025ec:	e7fe      	b.n	80025ec <ADC1_2_IRQHandler>
	...

080025f0 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	4603      	mov	r3, r0
 80025f8:	6039      	str	r1, [r7, #0]
 80025fa:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80025fc:	2300      	movs	r3, #0
 80025fe:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8002600:	79fb      	ldrb	r3, [r7, #7]
 8002602:	2b01      	cmp	r3, #1
 8002604:	d903      	bls.n	800260e <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002606:	f06f 0301 	mvn.w	r3, #1
 800260a:	60fb      	str	r3, [r7, #12]
 800260c:	e018      	b.n	8002640 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 800260e:	79fb      	ldrb	r3, [r7, #7]
 8002610:	2294      	movs	r2, #148	@ 0x94
 8002612:	fb02 f303 	mul.w	r3, r2, r3
 8002616:	4a0d      	ldr	r2, [pc, #52]	@ (800264c <BSP_COM_Init+0x5c>)
 8002618:	4413      	add	r3, r2
 800261a:	4618      	mov	r0, r3
 800261c:	f000 f866 	bl	80026ec <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8002620:	79fb      	ldrb	r3, [r7, #7]
 8002622:	2294      	movs	r2, #148	@ 0x94
 8002624:	fb02 f303 	mul.w	r3, r2, r3
 8002628:	4a08      	ldr	r2, [pc, #32]	@ (800264c <BSP_COM_Init+0x5c>)
 800262a:	4413      	add	r3, r2
 800262c:	6839      	ldr	r1, [r7, #0]
 800262e:	4618      	mov	r0, r3
 8002630:	f000 f80e 	bl	8002650 <MX_LPUART1_Init>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d002      	beq.n	8002640 <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 800263a:	f06f 0303 	mvn.w	r3, #3
 800263e:	e000      	b.n	8002642 <BSP_COM_Init+0x52>
    }
  }

  return ret;
 8002640:	68fb      	ldr	r3, [r7, #12]
}
 8002642:	4618      	mov	r0, r3
 8002644:	3710      	adds	r7, #16
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	20000254 	.word	0x20000254

08002650 <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 800265a:	4b15      	ldr	r3, [pc, #84]	@ (80026b0 <MX_LPUART1_Init+0x60>)
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	220c      	movs	r2, #12
 800266e:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	895b      	ldrh	r3, [r3, #10]
 8002674:	461a      	mov	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	685a      	ldr	r2, [r3, #4]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	891b      	ldrh	r3, [r3, #8]
 8002686:	461a      	mov	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	899b      	ldrh	r3, [r3, #12]
 8002690:	461a      	mov	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800269c:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f002 fee2 	bl	8005468 <HAL_UART_Init>
 80026a4:	4603      	mov	r3, r0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	20000008 	.word	0x20000008

080026b4 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  (void) HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 80026bc:	4b09      	ldr	r3, [pc, #36]	@ (80026e4 <__io_putchar+0x30>)
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	461a      	mov	r2, r3
 80026c2:	2394      	movs	r3, #148	@ 0x94
 80026c4:	fb02 f303 	mul.w	r3, r2, r3
 80026c8:	4a07      	ldr	r2, [pc, #28]	@ (80026e8 <__io_putchar+0x34>)
 80026ca:	1898      	adds	r0, r3, r2
 80026cc:	1d39      	adds	r1, r7, #4
 80026ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026d2:	2201      	movs	r2, #1
 80026d4:	f002 ff22 	bl	800551c <HAL_UART_Transmit>
  return ch;
 80026d8:	687b      	ldr	r3, [r7, #4]
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	200002e8 	.word	0x200002e8
 80026e8:	20000254 	.word	0x20000254

080026ec <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b08a      	sub	sp, #40	@ 0x28
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 80026f4:	4b22      	ldr	r3, [pc, #136]	@ (8002780 <COM1_MspInit+0x94>)
 80026f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026f8:	4a21      	ldr	r2, [pc, #132]	@ (8002780 <COM1_MspInit+0x94>)
 80026fa:	f043 0301 	orr.w	r3, r3, #1
 80026fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002700:	4b1f      	ldr	r3, [pc, #124]	@ (8002780 <COM1_MspInit+0x94>)
 8002702:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002704:	f003 0301 	and.w	r3, r3, #1
 8002708:	613b      	str	r3, [r7, #16]
 800270a:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 800270c:	4b1c      	ldr	r3, [pc, #112]	@ (8002780 <COM1_MspInit+0x94>)
 800270e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002710:	4a1b      	ldr	r2, [pc, #108]	@ (8002780 <COM1_MspInit+0x94>)
 8002712:	f043 0301 	orr.w	r3, r3, #1
 8002716:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002718:	4b19      	ldr	r3, [pc, #100]	@ (8002780 <COM1_MspInit+0x94>)
 800271a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800271c:	f003 0301 	and.w	r3, r3, #1
 8002720:	60fb      	str	r3, [r7, #12]
 8002722:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8002724:	4b16      	ldr	r3, [pc, #88]	@ (8002780 <COM1_MspInit+0x94>)
 8002726:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002728:	4a15      	ldr	r2, [pc, #84]	@ (8002780 <COM1_MspInit+0x94>)
 800272a:	f043 0301 	orr.w	r3, r3, #1
 800272e:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8002730:	4b13      	ldr	r3, [pc, #76]	@ (8002780 <COM1_MspInit+0x94>)
 8002732:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002734:	f003 0301 	and.w	r3, r3, #1
 8002738:	60bb      	str	r3, [r7, #8]
 800273a:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 800273c:	2304      	movs	r3, #4
 800273e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002740:	2302      	movs	r3, #2
 8002742:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002744:	2302      	movs	r3, #2
 8002746:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002748:	2301      	movs	r3, #1
 800274a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 800274c:	230c      	movs	r3, #12
 800274e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8002750:	f107 0314 	add.w	r3, r7, #20
 8002754:	4619      	mov	r1, r3
 8002756:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800275a:	f000 f9b5 	bl	8002ac8 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 800275e:	2308      	movs	r3, #8
 8002760:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002762:	2302      	movs	r3, #2
 8002764:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8002766:	230c      	movs	r3, #12
 8002768:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 800276a:	f107 0314 	add.w	r3, r7, #20
 800276e:	4619      	mov	r1, r3
 8002770:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002774:	f000 f9a8 	bl	8002ac8 <HAL_GPIO_Init>
}
 8002778:	bf00      	nop
 800277a:	3728      	adds	r7, #40	@ 0x28
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	40021000 	.word	0x40021000

08002784 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800278a:	2300      	movs	r3, #0
 800278c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800278e:	2003      	movs	r0, #3
 8002790:	f000 f95a 	bl	8002a48 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002794:	2000      	movs	r0, #0
 8002796:	f000 f80d 	bl	80027b4 <HAL_InitTick>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d002      	beq.n	80027a6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	71fb      	strb	r3, [r7, #7]
 80027a4:	e001      	b.n	80027aa <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80027a6:	f7ff fd13 	bl	80021d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80027aa:	79fb      	ldrb	r3, [r7, #7]

}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3708      	adds	r7, #8
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80027bc:	2300      	movs	r3, #0
 80027be:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80027c0:	4b16      	ldr	r3, [pc, #88]	@ (800281c <HAL_InitTick+0x68>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d022      	beq.n	800280e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80027c8:	4b15      	ldr	r3, [pc, #84]	@ (8002820 <HAL_InitTick+0x6c>)
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	4b13      	ldr	r3, [pc, #76]	@ (800281c <HAL_InitTick+0x68>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80027d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80027d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027dc:	4618      	mov	r0, r3
 80027de:	f000 f966 	bl	8002aae <HAL_SYSTICK_Config>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d10f      	bne.n	8002808 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2b0f      	cmp	r3, #15
 80027ec:	d809      	bhi.n	8002802 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027ee:	2200      	movs	r2, #0
 80027f0:	6879      	ldr	r1, [r7, #4]
 80027f2:	f04f 30ff 	mov.w	r0, #4294967295
 80027f6:	f000 f932 	bl	8002a5e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80027fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002824 <HAL_InitTick+0x70>)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6013      	str	r3, [r2, #0]
 8002800:	e007      	b.n	8002812 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	73fb      	strb	r3, [r7, #15]
 8002806:	e004      	b.n	8002812 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	73fb      	strb	r3, [r7, #15]
 800280c:	e001      	b.n	8002812 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002812:	7bfb      	ldrb	r3, [r7, #15]
}
 8002814:	4618      	mov	r0, r3
 8002816:	3710      	adds	r7, #16
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	20000010 	.word	0x20000010
 8002820:	20000004 	.word	0x20000004
 8002824:	2000000c 	.word	0x2000000c

08002828 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800282c:	4b05      	ldr	r3, [pc, #20]	@ (8002844 <HAL_IncTick+0x1c>)
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	4b05      	ldr	r3, [pc, #20]	@ (8002848 <HAL_IncTick+0x20>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4413      	add	r3, r2
 8002836:	4a03      	ldr	r2, [pc, #12]	@ (8002844 <HAL_IncTick+0x1c>)
 8002838:	6013      	str	r3, [r2, #0]
}
 800283a:	bf00      	nop
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr
 8002844:	200002ec 	.word	0x200002ec
 8002848:	20000010 	.word	0x20000010

0800284c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  return uwTick;
 8002850:	4b03      	ldr	r3, [pc, #12]	@ (8002860 <HAL_GetTick+0x14>)
 8002852:	681b      	ldr	r3, [r3, #0]
}
 8002854:	4618      	mov	r0, r3
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	200002ec 	.word	0x200002ec

08002864 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800286c:	f7ff ffee 	bl	800284c <HAL_GetTick>
 8002870:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800287c:	d004      	beq.n	8002888 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800287e:	4b09      	ldr	r3, [pc, #36]	@ (80028a4 <HAL_Delay+0x40>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	4413      	add	r3, r2
 8002886:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002888:	bf00      	nop
 800288a:	f7ff ffdf 	bl	800284c <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	68fa      	ldr	r2, [r7, #12]
 8002896:	429a      	cmp	r2, r3
 8002898:	d8f7      	bhi.n	800288a <HAL_Delay+0x26>
  {
  }
}
 800289a:	bf00      	nop
 800289c:	bf00      	nop
 800289e:	3710      	adds	r7, #16
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	20000010 	.word	0x20000010

080028a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f003 0307 	and.w	r3, r3, #7
 80028b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028b8:	4b0c      	ldr	r3, [pc, #48]	@ (80028ec <__NVIC_SetPriorityGrouping+0x44>)
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028be:	68ba      	ldr	r2, [r7, #8]
 80028c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80028c4:	4013      	ands	r3, r2
 80028c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80028d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028da:	4a04      	ldr	r2, [pc, #16]	@ (80028ec <__NVIC_SetPriorityGrouping+0x44>)
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	60d3      	str	r3, [r2, #12]
}
 80028e0:	bf00      	nop
 80028e2:	3714      	adds	r7, #20
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr
 80028ec:	e000ed00 	.word	0xe000ed00

080028f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028f4:	4b04      	ldr	r3, [pc, #16]	@ (8002908 <__NVIC_GetPriorityGrouping+0x18>)
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	0a1b      	lsrs	r3, r3, #8
 80028fa:	f003 0307 	and.w	r3, r3, #7
}
 80028fe:	4618      	mov	r0, r3
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr
 8002908:	e000ed00 	.word	0xe000ed00

0800290c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	4603      	mov	r3, r0
 8002914:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291a:	2b00      	cmp	r3, #0
 800291c:	db0b      	blt.n	8002936 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800291e:	79fb      	ldrb	r3, [r7, #7]
 8002920:	f003 021f 	and.w	r2, r3, #31
 8002924:	4907      	ldr	r1, [pc, #28]	@ (8002944 <__NVIC_EnableIRQ+0x38>)
 8002926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292a:	095b      	lsrs	r3, r3, #5
 800292c:	2001      	movs	r0, #1
 800292e:	fa00 f202 	lsl.w	r2, r0, r2
 8002932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002936:	bf00      	nop
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	e000e100 	.word	0xe000e100

08002948 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	4603      	mov	r3, r0
 8002950:	6039      	str	r1, [r7, #0]
 8002952:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002958:	2b00      	cmp	r3, #0
 800295a:	db0a      	blt.n	8002972 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	b2da      	uxtb	r2, r3
 8002960:	490c      	ldr	r1, [pc, #48]	@ (8002994 <__NVIC_SetPriority+0x4c>)
 8002962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002966:	0112      	lsls	r2, r2, #4
 8002968:	b2d2      	uxtb	r2, r2
 800296a:	440b      	add	r3, r1
 800296c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002970:	e00a      	b.n	8002988 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	b2da      	uxtb	r2, r3
 8002976:	4908      	ldr	r1, [pc, #32]	@ (8002998 <__NVIC_SetPriority+0x50>)
 8002978:	79fb      	ldrb	r3, [r7, #7]
 800297a:	f003 030f 	and.w	r3, r3, #15
 800297e:	3b04      	subs	r3, #4
 8002980:	0112      	lsls	r2, r2, #4
 8002982:	b2d2      	uxtb	r2, r2
 8002984:	440b      	add	r3, r1
 8002986:	761a      	strb	r2, [r3, #24]
}
 8002988:	bf00      	nop
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr
 8002994:	e000e100 	.word	0xe000e100
 8002998:	e000ed00 	.word	0xe000ed00

0800299c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800299c:	b480      	push	{r7}
 800299e:	b089      	sub	sp, #36	@ 0x24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f003 0307 	and.w	r3, r3, #7
 80029ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	f1c3 0307 	rsb	r3, r3, #7
 80029b6:	2b04      	cmp	r3, #4
 80029b8:	bf28      	it	cs
 80029ba:	2304      	movcs	r3, #4
 80029bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	3304      	adds	r3, #4
 80029c2:	2b06      	cmp	r3, #6
 80029c4:	d902      	bls.n	80029cc <NVIC_EncodePriority+0x30>
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	3b03      	subs	r3, #3
 80029ca:	e000      	b.n	80029ce <NVIC_EncodePriority+0x32>
 80029cc:	2300      	movs	r3, #0
 80029ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029d0:	f04f 32ff 	mov.w	r2, #4294967295
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	fa02 f303 	lsl.w	r3, r2, r3
 80029da:	43da      	mvns	r2, r3
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	401a      	ands	r2, r3
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029e4:	f04f 31ff 	mov.w	r1, #4294967295
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	fa01 f303 	lsl.w	r3, r1, r3
 80029ee:	43d9      	mvns	r1, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029f4:	4313      	orrs	r3, r2
         );
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3724      	adds	r7, #36	@ 0x24
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
	...

08002a04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a14:	d301      	bcc.n	8002a1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a16:	2301      	movs	r3, #1
 8002a18:	e00f      	b.n	8002a3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a1a:	4a0a      	ldr	r2, [pc, #40]	@ (8002a44 <SysTick_Config+0x40>)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a22:	210f      	movs	r1, #15
 8002a24:	f04f 30ff 	mov.w	r0, #4294967295
 8002a28:	f7ff ff8e 	bl	8002948 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a2c:	4b05      	ldr	r3, [pc, #20]	@ (8002a44 <SysTick_Config+0x40>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a32:	4b04      	ldr	r3, [pc, #16]	@ (8002a44 <SysTick_Config+0x40>)
 8002a34:	2207      	movs	r2, #7
 8002a36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	e000e010 	.word	0xe000e010

08002a48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f7ff ff29 	bl	80028a8 <__NVIC_SetPriorityGrouping>
}
 8002a56:	bf00      	nop
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b086      	sub	sp, #24
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	4603      	mov	r3, r0
 8002a66:	60b9      	str	r1, [r7, #8]
 8002a68:	607a      	str	r2, [r7, #4]
 8002a6a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a6c:	f7ff ff40 	bl	80028f0 <__NVIC_GetPriorityGrouping>
 8002a70:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	68b9      	ldr	r1, [r7, #8]
 8002a76:	6978      	ldr	r0, [r7, #20]
 8002a78:	f7ff ff90 	bl	800299c <NVIC_EncodePriority>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a82:	4611      	mov	r1, r2
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7ff ff5f 	bl	8002948 <__NVIC_SetPriority>
}
 8002a8a:	bf00      	nop
 8002a8c:	3718      	adds	r7, #24
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b082      	sub	sp, #8
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	4603      	mov	r3, r0
 8002a9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff ff33 	bl	800290c <__NVIC_EnableIRQ>
}
 8002aa6:	bf00      	nop
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b082      	sub	sp, #8
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f7ff ffa4 	bl	8002a04 <SysTick_Config>
 8002abc:	4603      	mov	r3, r0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
	...

08002ac8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b087      	sub	sp, #28
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002ad6:	e15a      	b.n	8002d8e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	2101      	movs	r1, #1
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f000 814c 	beq.w	8002d88 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f003 0303 	and.w	r3, r3, #3
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d005      	beq.n	8002b08 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d130      	bne.n	8002b6a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	2203      	movs	r2, #3
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	43db      	mvns	r3, r3
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	68da      	ldr	r2, [r3, #12]
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2c:	693a      	ldr	r2, [r7, #16]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	693a      	ldr	r2, [r7, #16]
 8002b36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b3e:	2201      	movs	r2, #1
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	fa02 f303 	lsl.w	r3, r2, r3
 8002b46:	43db      	mvns	r3, r3
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	091b      	lsrs	r3, r3, #4
 8002b54:	f003 0201 	and.w	r2, r3, #1
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5e:	693a      	ldr	r2, [r7, #16]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	693a      	ldr	r2, [r7, #16]
 8002b68:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f003 0303 	and.w	r3, r3, #3
 8002b72:	2b03      	cmp	r3, #3
 8002b74:	d017      	beq.n	8002ba6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	2203      	movs	r2, #3
 8002b82:	fa02 f303 	lsl.w	r3, r2, r3
 8002b86:	43db      	mvns	r3, r3
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	689a      	ldr	r2, [r3, #8]
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9a:	693a      	ldr	r2, [r7, #16]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	693a      	ldr	r2, [r7, #16]
 8002ba4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f003 0303 	and.w	r3, r3, #3
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d123      	bne.n	8002bfa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	08da      	lsrs	r2, r3, #3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	3208      	adds	r2, #8
 8002bba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bbe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	f003 0307 	and.w	r3, r3, #7
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	220f      	movs	r2, #15
 8002bca:	fa02 f303 	lsl.w	r3, r2, r3
 8002bce:	43db      	mvns	r3, r3
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	691a      	ldr	r2, [r3, #16]
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	f003 0307 	and.w	r3, r3, #7
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	fa02 f303 	lsl.w	r3, r2, r3
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	08da      	lsrs	r2, r3, #3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	3208      	adds	r2, #8
 8002bf4:	6939      	ldr	r1, [r7, #16]
 8002bf6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	2203      	movs	r2, #3
 8002c06:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0a:	43db      	mvns	r3, r3
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	4013      	ands	r3, r2
 8002c10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f003 0203 	and.w	r2, r3, #3
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	005b      	lsls	r3, r3, #1
 8002c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c22:	693a      	ldr	r2, [r7, #16]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	f000 80a6 	beq.w	8002d88 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c3c:	4b5b      	ldr	r3, [pc, #364]	@ (8002dac <HAL_GPIO_Init+0x2e4>)
 8002c3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c40:	4a5a      	ldr	r2, [pc, #360]	@ (8002dac <HAL_GPIO_Init+0x2e4>)
 8002c42:	f043 0301 	orr.w	r3, r3, #1
 8002c46:	6613      	str	r3, [r2, #96]	@ 0x60
 8002c48:	4b58      	ldr	r3, [pc, #352]	@ (8002dac <HAL_GPIO_Init+0x2e4>)
 8002c4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c4c:	f003 0301 	and.w	r3, r3, #1
 8002c50:	60bb      	str	r3, [r7, #8]
 8002c52:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c54:	4a56      	ldr	r2, [pc, #344]	@ (8002db0 <HAL_GPIO_Init+0x2e8>)
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	089b      	lsrs	r3, r3, #2
 8002c5a:	3302      	adds	r3, #2
 8002c5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c60:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	f003 0303 	and.w	r3, r3, #3
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	220f      	movs	r2, #15
 8002c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c70:	43db      	mvns	r3, r3
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	4013      	ands	r3, r2
 8002c76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002c7e:	d01f      	beq.n	8002cc0 <HAL_GPIO_Init+0x1f8>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a4c      	ldr	r2, [pc, #304]	@ (8002db4 <HAL_GPIO_Init+0x2ec>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d019      	beq.n	8002cbc <HAL_GPIO_Init+0x1f4>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4a4b      	ldr	r2, [pc, #300]	@ (8002db8 <HAL_GPIO_Init+0x2f0>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d013      	beq.n	8002cb8 <HAL_GPIO_Init+0x1f0>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a4a      	ldr	r2, [pc, #296]	@ (8002dbc <HAL_GPIO_Init+0x2f4>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d00d      	beq.n	8002cb4 <HAL_GPIO_Init+0x1ec>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4a49      	ldr	r2, [pc, #292]	@ (8002dc0 <HAL_GPIO_Init+0x2f8>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d007      	beq.n	8002cb0 <HAL_GPIO_Init+0x1e8>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a48      	ldr	r2, [pc, #288]	@ (8002dc4 <HAL_GPIO_Init+0x2fc>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d101      	bne.n	8002cac <HAL_GPIO_Init+0x1e4>
 8002ca8:	2305      	movs	r3, #5
 8002caa:	e00a      	b.n	8002cc2 <HAL_GPIO_Init+0x1fa>
 8002cac:	2306      	movs	r3, #6
 8002cae:	e008      	b.n	8002cc2 <HAL_GPIO_Init+0x1fa>
 8002cb0:	2304      	movs	r3, #4
 8002cb2:	e006      	b.n	8002cc2 <HAL_GPIO_Init+0x1fa>
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e004      	b.n	8002cc2 <HAL_GPIO_Init+0x1fa>
 8002cb8:	2302      	movs	r3, #2
 8002cba:	e002      	b.n	8002cc2 <HAL_GPIO_Init+0x1fa>
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e000      	b.n	8002cc2 <HAL_GPIO_Init+0x1fa>
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	697a      	ldr	r2, [r7, #20]
 8002cc4:	f002 0203 	and.w	r2, r2, #3
 8002cc8:	0092      	lsls	r2, r2, #2
 8002cca:	4093      	lsls	r3, r2
 8002ccc:	693a      	ldr	r2, [r7, #16]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cd2:	4937      	ldr	r1, [pc, #220]	@ (8002db0 <HAL_GPIO_Init+0x2e8>)
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	089b      	lsrs	r3, r3, #2
 8002cd8:	3302      	adds	r3, #2
 8002cda:	693a      	ldr	r2, [r7, #16]
 8002cdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ce0:	4b39      	ldr	r3, [pc, #228]	@ (8002dc8 <HAL_GPIO_Init+0x300>)
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	43db      	mvns	r3, r3
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	4013      	ands	r3, r2
 8002cee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d003      	beq.n	8002d04 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002cfc:	693a      	ldr	r2, [r7, #16]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d04:	4a30      	ldr	r2, [pc, #192]	@ (8002dc8 <HAL_GPIO_Init+0x300>)
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002d0a:	4b2f      	ldr	r3, [pc, #188]	@ (8002dc8 <HAL_GPIO_Init+0x300>)
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	43db      	mvns	r3, r3
 8002d14:	693a      	ldr	r2, [r7, #16]
 8002d16:	4013      	ands	r3, r2
 8002d18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d003      	beq.n	8002d2e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d2e:	4a26      	ldr	r2, [pc, #152]	@ (8002dc8 <HAL_GPIO_Init+0x300>)
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002d34:	4b24      	ldr	r3, [pc, #144]	@ (8002dc8 <HAL_GPIO_Init+0x300>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	43db      	mvns	r3, r3
 8002d3e:	693a      	ldr	r2, [r7, #16]
 8002d40:	4013      	ands	r3, r2
 8002d42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d003      	beq.n	8002d58 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002d50:	693a      	ldr	r2, [r7, #16]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002d58:	4a1b      	ldr	r2, [pc, #108]	@ (8002dc8 <HAL_GPIO_Init+0x300>)
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002d5e:	4b1a      	ldr	r3, [pc, #104]	@ (8002dc8 <HAL_GPIO_Init+0x300>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	43db      	mvns	r3, r3
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d003      	beq.n	8002d82 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d82:	4a11      	ldr	r2, [pc, #68]	@ (8002dc8 <HAL_GPIO_Init+0x300>)
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	fa22 f303 	lsr.w	r3, r2, r3
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	f47f ae9d 	bne.w	8002ad8 <HAL_GPIO_Init+0x10>
  }
}
 8002d9e:	bf00      	nop
 8002da0:	bf00      	nop
 8002da2:	371c      	adds	r7, #28
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr
 8002dac:	40021000 	.word	0x40021000
 8002db0:	40010000 	.word	0x40010000
 8002db4:	48000400 	.word	0x48000400
 8002db8:	48000800 	.word	0x48000800
 8002dbc:	48000c00 	.word	0x48000c00
 8002dc0:	48001000 	.word	0x48001000
 8002dc4:	48001400 	.word	0x48001400
 8002dc8:	40010400 	.word	0x40010400

08002dcc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	691a      	ldr	r2, [r3, #16]
 8002ddc:	887b      	ldrh	r3, [r7, #2]
 8002dde:	4013      	ands	r3, r2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d002      	beq.n	8002dea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002de4:	2301      	movs	r3, #1
 8002de6:	73fb      	strb	r3, [r7, #15]
 8002de8:	e001      	b.n	8002dee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002dea:	2300      	movs	r3, #0
 8002dec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3714      	adds	r7, #20
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	460b      	mov	r3, r1
 8002e06:	807b      	strh	r3, [r7, #2]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e0c:	787b      	ldrb	r3, [r7, #1]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d003      	beq.n	8002e1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e12:	887a      	ldrh	r2, [r7, #2]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e18:	e002      	b.n	8002e20 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e1a:	887a      	ldrh	r2, [r7, #2]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	4603      	mov	r3, r0
 8002e34:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002e36:	4b08      	ldr	r3, [pc, #32]	@ (8002e58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e38:	695a      	ldr	r2, [r3, #20]
 8002e3a:	88fb      	ldrh	r3, [r7, #6]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d006      	beq.n	8002e50 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e42:	4a05      	ldr	r2, [pc, #20]	@ (8002e58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e44:	88fb      	ldrh	r3, [r7, #6]
 8002e46:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e48:	88fb      	ldrh	r3, [r7, #6]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7fe fdaa 	bl	80019a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e50:	bf00      	nop
 8002e52:	3708      	adds	r7, #8
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	40010400 	.word	0x40010400

08002e5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d101      	bne.n	8002e6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e08d      	b.n	8002f8a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d106      	bne.n	8002e88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f7ff f9c8 	bl	8002218 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2224      	movs	r2, #36	@ 0x24
 8002e8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f022 0201 	bic.w	r2, r2, #1
 8002e9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685a      	ldr	r2, [r3, #4]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002eac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	689a      	ldr	r2, [r3, #8]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ebc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d107      	bne.n	8002ed6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	689a      	ldr	r2, [r3, #8]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002ed2:	609a      	str	r2, [r3, #8]
 8002ed4:	e006      	b.n	8002ee4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	689a      	ldr	r2, [r3, #8]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002ee2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d108      	bne.n	8002efe <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	685a      	ldr	r2, [r3, #4]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002efa:	605a      	str	r2, [r3, #4]
 8002efc:	e007      	b.n	8002f0e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	685a      	ldr	r2, [r3, #4]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f0c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	6812      	ldr	r2, [r2, #0]
 8002f18:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002f1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f20:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68da      	ldr	r2, [r3, #12]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f30:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	691a      	ldr	r2, [r3, #16]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	69d9      	ldr	r1, [r3, #28]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a1a      	ldr	r2, [r3, #32]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f042 0201 	orr.w	r2, r2, #1
 8002f6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2220      	movs	r2, #32
 8002f76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3708      	adds	r7, #8
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
	...

08002f94 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b088      	sub	sp, #32
 8002f98:	af02      	add	r7, sp, #8
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	607a      	str	r2, [r7, #4]
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	817b      	strh	r3, [r7, #10]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	2b20      	cmp	r3, #32
 8002fb2:	f040 80fd 	bne.w	80031b0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d101      	bne.n	8002fc4 <HAL_I2C_Master_Transmit+0x30>
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	e0f6      	b.n	80031b2 <HAL_I2C_Master_Transmit+0x21e>
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002fcc:	f7ff fc3e 	bl	800284c <HAL_GetTick>
 8002fd0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	9300      	str	r3, [sp, #0]
 8002fd6:	2319      	movs	r3, #25
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002fde:	68f8      	ldr	r0, [r7, #12]
 8002fe0:	f000 f914 	bl	800320c <I2C_WaitOnFlagUntilTimeout>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e0e1      	b.n	80031b2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2221      	movs	r2, #33	@ 0x21
 8002ff2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2210      	movs	r2, #16
 8002ffa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	893a      	ldrh	r2, [r7, #8]
 800300e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800301a:	b29b      	uxth	r3, r3
 800301c:	2bff      	cmp	r3, #255	@ 0xff
 800301e:	d906      	bls.n	800302e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	22ff      	movs	r2, #255	@ 0xff
 8003024:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003026:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800302a:	617b      	str	r3, [r7, #20]
 800302c:	e007      	b.n	800303e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003032:	b29a      	uxth	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003038:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800303c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003042:	2b00      	cmp	r3, #0
 8003044:	d024      	beq.n	8003090 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800304a:	781a      	ldrb	r2, [r3, #0]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003056:	1c5a      	adds	r2, r3, #1
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003060:	b29b      	uxth	r3, r3
 8003062:	3b01      	subs	r3, #1
 8003064:	b29a      	uxth	r2, r3
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800306e:	3b01      	subs	r3, #1
 8003070:	b29a      	uxth	r2, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800307a:	b2db      	uxtb	r3, r3
 800307c:	3301      	adds	r3, #1
 800307e:	b2da      	uxtb	r2, r3
 8003080:	8979      	ldrh	r1, [r7, #10]
 8003082:	4b4e      	ldr	r3, [pc, #312]	@ (80031bc <HAL_I2C_Master_Transmit+0x228>)
 8003084:	9300      	str	r3, [sp, #0]
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	68f8      	ldr	r0, [r7, #12]
 800308a:	f000 fa83 	bl	8003594 <I2C_TransferConfig>
 800308e:	e066      	b.n	800315e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003094:	b2da      	uxtb	r2, r3
 8003096:	8979      	ldrh	r1, [r7, #10]
 8003098:	4b48      	ldr	r3, [pc, #288]	@ (80031bc <HAL_I2C_Master_Transmit+0x228>)
 800309a:	9300      	str	r3, [sp, #0]
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	68f8      	ldr	r0, [r7, #12]
 80030a0:	f000 fa78 	bl	8003594 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80030a4:	e05b      	b.n	800315e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030a6:	693a      	ldr	r2, [r7, #16]
 80030a8:	6a39      	ldr	r1, [r7, #32]
 80030aa:	68f8      	ldr	r0, [r7, #12]
 80030ac:	f000 f907 	bl	80032be <I2C_WaitOnTXISFlagUntilTimeout>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e07b      	b.n	80031b2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030be:	781a      	ldrb	r2, [r3, #0]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ca:	1c5a      	adds	r2, r3, #1
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	3b01      	subs	r3, #1
 80030d8:	b29a      	uxth	r2, r3
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030e2:	3b01      	subs	r3, #1
 80030e4:	b29a      	uxth	r2, r3
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d034      	beq.n	800315e <HAL_I2C_Master_Transmit+0x1ca>
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d130      	bne.n	800315e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	9300      	str	r3, [sp, #0]
 8003100:	6a3b      	ldr	r3, [r7, #32]
 8003102:	2200      	movs	r2, #0
 8003104:	2180      	movs	r1, #128	@ 0x80
 8003106:	68f8      	ldr	r0, [r7, #12]
 8003108:	f000 f880 	bl	800320c <I2C_WaitOnFlagUntilTimeout>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e04d      	b.n	80031b2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800311a:	b29b      	uxth	r3, r3
 800311c:	2bff      	cmp	r3, #255	@ 0xff
 800311e:	d90e      	bls.n	800313e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	22ff      	movs	r2, #255	@ 0xff
 8003124:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800312a:	b2da      	uxtb	r2, r3
 800312c:	8979      	ldrh	r1, [r7, #10]
 800312e:	2300      	movs	r3, #0
 8003130:	9300      	str	r3, [sp, #0]
 8003132:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003136:	68f8      	ldr	r0, [r7, #12]
 8003138:	f000 fa2c 	bl	8003594 <I2C_TransferConfig>
 800313c:	e00f      	b.n	800315e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003142:	b29a      	uxth	r2, r3
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800314c:	b2da      	uxtb	r2, r3
 800314e:	8979      	ldrh	r1, [r7, #10]
 8003150:	2300      	movs	r3, #0
 8003152:	9300      	str	r3, [sp, #0]
 8003154:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003158:	68f8      	ldr	r0, [r7, #12]
 800315a:	f000 fa1b 	bl	8003594 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003162:	b29b      	uxth	r3, r3
 8003164:	2b00      	cmp	r3, #0
 8003166:	d19e      	bne.n	80030a6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003168:	693a      	ldr	r2, [r7, #16]
 800316a:	6a39      	ldr	r1, [r7, #32]
 800316c:	68f8      	ldr	r0, [r7, #12]
 800316e:	f000 f8ed 	bl	800334c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d001      	beq.n	800317c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e01a      	b.n	80031b2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2220      	movs	r2, #32
 8003182:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	6859      	ldr	r1, [r3, #4]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	4b0c      	ldr	r3, [pc, #48]	@ (80031c0 <HAL_I2C_Master_Transmit+0x22c>)
 8003190:	400b      	ands	r3, r1
 8003192:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2220      	movs	r2, #32
 8003198:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80031ac:	2300      	movs	r3, #0
 80031ae:	e000      	b.n	80031b2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80031b0:	2302      	movs	r3, #2
  }
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3718      	adds	r7, #24
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	80002000 	.word	0x80002000
 80031c0:	fe00e800 	.word	0xfe00e800

080031c4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d103      	bne.n	80031e2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2200      	movs	r2, #0
 80031e0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	f003 0301 	and.w	r3, r3, #1
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d007      	beq.n	8003200 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	699a      	ldr	r2, [r3, #24]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f042 0201 	orr.w	r2, r2, #1
 80031fe:	619a      	str	r2, [r3, #24]
  }
}
 8003200:	bf00      	nop
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	603b      	str	r3, [r7, #0]
 8003218:	4613      	mov	r3, r2
 800321a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800321c:	e03b      	b.n	8003296 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800321e:	69ba      	ldr	r2, [r7, #24]
 8003220:	6839      	ldr	r1, [r7, #0]
 8003222:	68f8      	ldr	r0, [r7, #12]
 8003224:	f000 f8d6 	bl	80033d4 <I2C_IsErrorOccurred>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e041      	b.n	80032b6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003238:	d02d      	beq.n	8003296 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800323a:	f7ff fb07 	bl	800284c <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	429a      	cmp	r2, r3
 8003248:	d302      	bcc.n	8003250 <I2C_WaitOnFlagUntilTimeout+0x44>
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d122      	bne.n	8003296 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	699a      	ldr	r2, [r3, #24]
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	4013      	ands	r3, r2
 800325a:	68ba      	ldr	r2, [r7, #8]
 800325c:	429a      	cmp	r2, r3
 800325e:	bf0c      	ite	eq
 8003260:	2301      	moveq	r3, #1
 8003262:	2300      	movne	r3, #0
 8003264:	b2db      	uxtb	r3, r3
 8003266:	461a      	mov	r2, r3
 8003268:	79fb      	ldrb	r3, [r7, #7]
 800326a:	429a      	cmp	r2, r3
 800326c:	d113      	bne.n	8003296 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003272:	f043 0220 	orr.w	r2, r3, #32
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2220      	movs	r2, #32
 800327e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e00f      	b.n	80032b6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	699a      	ldr	r2, [r3, #24]
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	4013      	ands	r3, r2
 80032a0:	68ba      	ldr	r2, [r7, #8]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	bf0c      	ite	eq
 80032a6:	2301      	moveq	r3, #1
 80032a8:	2300      	movne	r3, #0
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	461a      	mov	r2, r3
 80032ae:	79fb      	ldrb	r3, [r7, #7]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d0b4      	beq.n	800321e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80032be:	b580      	push	{r7, lr}
 80032c0:	b084      	sub	sp, #16
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	60f8      	str	r0, [r7, #12]
 80032c6:	60b9      	str	r1, [r7, #8]
 80032c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80032ca:	e033      	b.n	8003334 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	68b9      	ldr	r1, [r7, #8]
 80032d0:	68f8      	ldr	r0, [r7, #12]
 80032d2:	f000 f87f 	bl	80033d4 <I2C_IsErrorOccurred>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d001      	beq.n	80032e0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e031      	b.n	8003344 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e6:	d025      	beq.n	8003334 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032e8:	f7ff fab0 	bl	800284c <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	68ba      	ldr	r2, [r7, #8]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d302      	bcc.n	80032fe <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d11a      	bne.n	8003334 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	699b      	ldr	r3, [r3, #24]
 8003304:	f003 0302 	and.w	r3, r3, #2
 8003308:	2b02      	cmp	r3, #2
 800330a:	d013      	beq.n	8003334 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003310:	f043 0220 	orr.w	r2, r3, #32
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2220      	movs	r2, #32
 800331c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2200      	movs	r2, #0
 800332c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e007      	b.n	8003344 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b02      	cmp	r3, #2
 8003340:	d1c4      	bne.n	80032cc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003342:	2300      	movs	r3, #0
}
 8003344:	4618      	mov	r0, r3
 8003346:	3710      	adds	r7, #16
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003358:	e02f      	b.n	80033ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	68b9      	ldr	r1, [r7, #8]
 800335e:	68f8      	ldr	r0, [r7, #12]
 8003360:	f000 f838 	bl	80033d4 <I2C_IsErrorOccurred>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e02d      	b.n	80033ca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800336e:	f7ff fa6d 	bl	800284c <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	68ba      	ldr	r2, [r7, #8]
 800337a:	429a      	cmp	r2, r3
 800337c:	d302      	bcc.n	8003384 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d11a      	bne.n	80033ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	f003 0320 	and.w	r3, r3, #32
 800338e:	2b20      	cmp	r3, #32
 8003390:	d013      	beq.n	80033ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003396:	f043 0220 	orr.w	r2, r3, #32
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2220      	movs	r2, #32
 80033a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e007      	b.n	80033ca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	f003 0320 	and.w	r3, r3, #32
 80033c4:	2b20      	cmp	r3, #32
 80033c6:	d1c8      	bne.n	800335a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
	...

080033d4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b08a      	sub	sp, #40	@ 0x28
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033e0:	2300      	movs	r3, #0
 80033e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80033ee:	2300      	movs	r3, #0
 80033f0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	f003 0310 	and.w	r3, r3, #16
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d068      	beq.n	80034d2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2210      	movs	r2, #16
 8003406:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003408:	e049      	b.n	800349e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003410:	d045      	beq.n	800349e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003412:	f7ff fa1b 	bl	800284c <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	68ba      	ldr	r2, [r7, #8]
 800341e:	429a      	cmp	r2, r3
 8003420:	d302      	bcc.n	8003428 <I2C_IsErrorOccurred+0x54>
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d13a      	bne.n	800349e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003432:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800343a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003446:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800344a:	d121      	bne.n	8003490 <I2C_IsErrorOccurred+0xbc>
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003452:	d01d      	beq.n	8003490 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003454:	7cfb      	ldrb	r3, [r7, #19]
 8003456:	2b20      	cmp	r3, #32
 8003458:	d01a      	beq.n	8003490 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	685a      	ldr	r2, [r3, #4]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003468:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800346a:	f7ff f9ef 	bl	800284c <HAL_GetTick>
 800346e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003470:	e00e      	b.n	8003490 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003472:	f7ff f9eb 	bl	800284c <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	2b19      	cmp	r3, #25
 800347e:	d907      	bls.n	8003490 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003480:	6a3b      	ldr	r3, [r7, #32]
 8003482:	f043 0320 	orr.w	r3, r3, #32
 8003486:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800348e:	e006      	b.n	800349e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	f003 0320 	and.w	r3, r3, #32
 800349a:	2b20      	cmp	r3, #32
 800349c:	d1e9      	bne.n	8003472 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	699b      	ldr	r3, [r3, #24]
 80034a4:	f003 0320 	and.w	r3, r3, #32
 80034a8:	2b20      	cmp	r3, #32
 80034aa:	d003      	beq.n	80034b4 <I2C_IsErrorOccurred+0xe0>
 80034ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d0aa      	beq.n	800340a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80034b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d103      	bne.n	80034c4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2220      	movs	r2, #32
 80034c2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80034c4:	6a3b      	ldr	r3, [r7, #32]
 80034c6:	f043 0304 	orr.w	r3, r3, #4
 80034ca:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d00b      	beq.n	80034fc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80034e4:	6a3b      	ldr	r3, [r7, #32]
 80034e6:	f043 0301 	orr.w	r3, r3, #1
 80034ea:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80034f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00b      	beq.n	800351e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003506:	6a3b      	ldr	r3, [r7, #32]
 8003508:	f043 0308 	orr.w	r3, r3, #8
 800350c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003516:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003524:	2b00      	cmp	r3, #0
 8003526:	d00b      	beq.n	8003540 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003528:	6a3b      	ldr	r3, [r7, #32]
 800352a:	f043 0302 	orr.w	r3, r3, #2
 800352e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003538:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003540:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003544:	2b00      	cmp	r3, #0
 8003546:	d01c      	beq.n	8003582 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003548:	68f8      	ldr	r0, [r7, #12]
 800354a:	f7ff fe3b 	bl	80031c4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	6859      	ldr	r1, [r3, #4]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	4b0d      	ldr	r3, [pc, #52]	@ (8003590 <I2C_IsErrorOccurred+0x1bc>)
 800355a:	400b      	ands	r3, r1
 800355c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003562:	6a3b      	ldr	r3, [r7, #32]
 8003564:	431a      	orrs	r2, r3
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2220      	movs	r2, #32
 800356e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003582:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003586:	4618      	mov	r0, r3
 8003588:	3728      	adds	r7, #40	@ 0x28
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	fe00e800 	.word	0xfe00e800

08003594 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003594:	b480      	push	{r7}
 8003596:	b087      	sub	sp, #28
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	607b      	str	r3, [r7, #4]
 800359e:	460b      	mov	r3, r1
 80035a0:	817b      	strh	r3, [r7, #10]
 80035a2:	4613      	mov	r3, r2
 80035a4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80035a6:	897b      	ldrh	r3, [r7, #10]
 80035a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80035ac:	7a7b      	ldrb	r3, [r7, #9]
 80035ae:	041b      	lsls	r3, r3, #16
 80035b0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80035b4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80035ba:	6a3b      	ldr	r3, [r7, #32]
 80035bc:	4313      	orrs	r3, r2
 80035be:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80035c2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	685a      	ldr	r2, [r3, #4]
 80035ca:	6a3b      	ldr	r3, [r7, #32]
 80035cc:	0d5b      	lsrs	r3, r3, #21
 80035ce:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80035d2:	4b08      	ldr	r3, [pc, #32]	@ (80035f4 <I2C_TransferConfig+0x60>)
 80035d4:	430b      	orrs	r3, r1
 80035d6:	43db      	mvns	r3, r3
 80035d8:	ea02 0103 	and.w	r1, r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	697a      	ldr	r2, [r7, #20]
 80035e2:	430a      	orrs	r2, r1
 80035e4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80035e6:	bf00      	nop
 80035e8:	371c      	adds	r7, #28
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	03ff63ff 	.word	0x03ff63ff

080035f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b20      	cmp	r3, #32
 800360c:	d138      	bne.n	8003680 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003614:	2b01      	cmp	r3, #1
 8003616:	d101      	bne.n	800361c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003618:	2302      	movs	r3, #2
 800361a:	e032      	b.n	8003682 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2224      	movs	r2, #36	@ 0x24
 8003628:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f022 0201 	bic.w	r2, r2, #1
 800363a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800364a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	6819      	ldr	r1, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	683a      	ldr	r2, [r7, #0]
 8003658:	430a      	orrs	r2, r1
 800365a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f042 0201 	orr.w	r2, r2, #1
 800366a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2220      	movs	r2, #32
 8003670:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800367c:	2300      	movs	r3, #0
 800367e:	e000      	b.n	8003682 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003680:	2302      	movs	r3, #2
  }
}
 8003682:	4618      	mov	r0, r3
 8003684:	370c      	adds	r7, #12
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr

0800368e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800368e:	b480      	push	{r7}
 8003690:	b085      	sub	sp, #20
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
 8003696:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	2b20      	cmp	r3, #32
 80036a2:	d139      	bne.n	8003718 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d101      	bne.n	80036b2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80036ae:	2302      	movs	r3, #2
 80036b0:	e033      	b.n	800371a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2224      	movs	r2, #36	@ 0x24
 80036be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f022 0201 	bic.w	r2, r2, #1
 80036d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80036e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	021b      	lsls	r3, r3, #8
 80036e6:	68fa      	ldr	r2, [r7, #12]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f042 0201 	orr.w	r2, r2, #1
 8003702:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2220      	movs	r2, #32
 8003708:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003714:	2300      	movs	r3, #0
 8003716:	e000      	b.n	800371a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003718:	2302      	movs	r3, #2
  }
}
 800371a:	4618      	mov	r0, r3
 800371c:	3714      	adds	r7, #20
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
	...

08003728 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003728:	b480      	push	{r7}
 800372a:	b085      	sub	sp, #20
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d141      	bne.n	80037ba <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003736:	4b4b      	ldr	r3, [pc, #300]	@ (8003864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800373e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003742:	d131      	bne.n	80037a8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003744:	4b47      	ldr	r3, [pc, #284]	@ (8003864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003746:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800374a:	4a46      	ldr	r2, [pc, #280]	@ (8003864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800374c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003750:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003754:	4b43      	ldr	r3, [pc, #268]	@ (8003864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800375c:	4a41      	ldr	r2, [pc, #260]	@ (8003864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800375e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003762:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003764:	4b40      	ldr	r3, [pc, #256]	@ (8003868 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2232      	movs	r2, #50	@ 0x32
 800376a:	fb02 f303 	mul.w	r3, r2, r3
 800376e:	4a3f      	ldr	r2, [pc, #252]	@ (800386c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003770:	fba2 2303 	umull	r2, r3, r2, r3
 8003774:	0c9b      	lsrs	r3, r3, #18
 8003776:	3301      	adds	r3, #1
 8003778:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800377a:	e002      	b.n	8003782 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	3b01      	subs	r3, #1
 8003780:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003782:	4b38      	ldr	r3, [pc, #224]	@ (8003864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800378a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800378e:	d102      	bne.n	8003796 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d1f2      	bne.n	800377c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003796:	4b33      	ldr	r3, [pc, #204]	@ (8003864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800379e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037a2:	d158      	bne.n	8003856 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	e057      	b.n	8003858 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80037a8:	4b2e      	ldr	r3, [pc, #184]	@ (8003864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037ae:	4a2d      	ldr	r2, [pc, #180]	@ (8003864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80037b4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80037b8:	e04d      	b.n	8003856 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037c0:	d141      	bne.n	8003846 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80037c2:	4b28      	ldr	r3, [pc, #160]	@ (8003864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80037ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037ce:	d131      	bne.n	8003834 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80037d0:	4b24      	ldr	r3, [pc, #144]	@ (8003864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037d6:	4a23      	ldr	r2, [pc, #140]	@ (8003864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037dc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80037e0:	4b20      	ldr	r3, [pc, #128]	@ (8003864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80037e8:	4a1e      	ldr	r2, [pc, #120]	@ (8003864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80037ee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80037f0:	4b1d      	ldr	r3, [pc, #116]	@ (8003868 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2232      	movs	r2, #50	@ 0x32
 80037f6:	fb02 f303 	mul.w	r3, r2, r3
 80037fa:	4a1c      	ldr	r2, [pc, #112]	@ (800386c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80037fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003800:	0c9b      	lsrs	r3, r3, #18
 8003802:	3301      	adds	r3, #1
 8003804:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003806:	e002      	b.n	800380e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	3b01      	subs	r3, #1
 800380c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800380e:	4b15      	ldr	r3, [pc, #84]	@ (8003864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003810:	695b      	ldr	r3, [r3, #20]
 8003812:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003816:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800381a:	d102      	bne.n	8003822 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1f2      	bne.n	8003808 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003822:	4b10      	ldr	r3, [pc, #64]	@ (8003864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800382a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800382e:	d112      	bne.n	8003856 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e011      	b.n	8003858 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003834:	4b0b      	ldr	r3, [pc, #44]	@ (8003864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003836:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800383a:	4a0a      	ldr	r2, [pc, #40]	@ (8003864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800383c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003840:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003844:	e007      	b.n	8003856 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003846:	4b07      	ldr	r3, [pc, #28]	@ (8003864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800384e:	4a05      	ldr	r2, [pc, #20]	@ (8003864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003850:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003854:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003856:	2300      	movs	r3, #0
}
 8003858:	4618      	mov	r0, r3
 800385a:	3714      	adds	r7, #20
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr
 8003864:	40007000 	.word	0x40007000
 8003868:	20000004 	.word	0x20000004
 800386c:	431bde83 	.word	0x431bde83

08003870 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003870:	b480      	push	{r7}
 8003872:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003874:	4b05      	ldr	r3, [pc, #20]	@ (800388c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	4a04      	ldr	r2, [pc, #16]	@ (800388c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800387a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800387e:	6093      	str	r3, [r2, #8]
}
 8003880:	bf00      	nop
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	40007000 	.word	0x40007000

08003890 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b088      	sub	sp, #32
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d101      	bne.n	80038a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e2fe      	b.n	8003ea0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d075      	beq.n	800399a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038ae:	4b97      	ldr	r3, [pc, #604]	@ (8003b0c <HAL_RCC_OscConfig+0x27c>)
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f003 030c 	and.w	r3, r3, #12
 80038b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038b8:	4b94      	ldr	r3, [pc, #592]	@ (8003b0c <HAL_RCC_OscConfig+0x27c>)
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	f003 0303 	and.w	r3, r3, #3
 80038c0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	2b0c      	cmp	r3, #12
 80038c6:	d102      	bne.n	80038ce <HAL_RCC_OscConfig+0x3e>
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	2b03      	cmp	r3, #3
 80038cc:	d002      	beq.n	80038d4 <HAL_RCC_OscConfig+0x44>
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	2b08      	cmp	r3, #8
 80038d2:	d10b      	bne.n	80038ec <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038d4:	4b8d      	ldr	r3, [pc, #564]	@ (8003b0c <HAL_RCC_OscConfig+0x27c>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d05b      	beq.n	8003998 <HAL_RCC_OscConfig+0x108>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d157      	bne.n	8003998 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e2d9      	b.n	8003ea0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038f4:	d106      	bne.n	8003904 <HAL_RCC_OscConfig+0x74>
 80038f6:	4b85      	ldr	r3, [pc, #532]	@ (8003b0c <HAL_RCC_OscConfig+0x27c>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a84      	ldr	r2, [pc, #528]	@ (8003b0c <HAL_RCC_OscConfig+0x27c>)
 80038fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003900:	6013      	str	r3, [r2, #0]
 8003902:	e01d      	b.n	8003940 <HAL_RCC_OscConfig+0xb0>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800390c:	d10c      	bne.n	8003928 <HAL_RCC_OscConfig+0x98>
 800390e:	4b7f      	ldr	r3, [pc, #508]	@ (8003b0c <HAL_RCC_OscConfig+0x27c>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a7e      	ldr	r2, [pc, #504]	@ (8003b0c <HAL_RCC_OscConfig+0x27c>)
 8003914:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003918:	6013      	str	r3, [r2, #0]
 800391a:	4b7c      	ldr	r3, [pc, #496]	@ (8003b0c <HAL_RCC_OscConfig+0x27c>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a7b      	ldr	r2, [pc, #492]	@ (8003b0c <HAL_RCC_OscConfig+0x27c>)
 8003920:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003924:	6013      	str	r3, [r2, #0]
 8003926:	e00b      	b.n	8003940 <HAL_RCC_OscConfig+0xb0>
 8003928:	4b78      	ldr	r3, [pc, #480]	@ (8003b0c <HAL_RCC_OscConfig+0x27c>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a77      	ldr	r2, [pc, #476]	@ (8003b0c <HAL_RCC_OscConfig+0x27c>)
 800392e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003932:	6013      	str	r3, [r2, #0]
 8003934:	4b75      	ldr	r3, [pc, #468]	@ (8003b0c <HAL_RCC_OscConfig+0x27c>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a74      	ldr	r2, [pc, #464]	@ (8003b0c <HAL_RCC_OscConfig+0x27c>)
 800393a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800393e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d013      	beq.n	8003970 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003948:	f7fe ff80 	bl	800284c <HAL_GetTick>
 800394c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800394e:	e008      	b.n	8003962 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003950:	f7fe ff7c 	bl	800284c <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	2b64      	cmp	r3, #100	@ 0x64
 800395c:	d901      	bls.n	8003962 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e29e      	b.n	8003ea0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003962:	4b6a      	ldr	r3, [pc, #424]	@ (8003b0c <HAL_RCC_OscConfig+0x27c>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d0f0      	beq.n	8003950 <HAL_RCC_OscConfig+0xc0>
 800396e:	e014      	b.n	800399a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003970:	f7fe ff6c 	bl	800284c <HAL_GetTick>
 8003974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003976:	e008      	b.n	800398a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003978:	f7fe ff68 	bl	800284c <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	2b64      	cmp	r3, #100	@ 0x64
 8003984:	d901      	bls.n	800398a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e28a      	b.n	8003ea0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800398a:	4b60      	ldr	r3, [pc, #384]	@ (8003b0c <HAL_RCC_OscConfig+0x27c>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d1f0      	bne.n	8003978 <HAL_RCC_OscConfig+0xe8>
 8003996:	e000      	b.n	800399a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003998:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d075      	beq.n	8003a92 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039a6:	4b59      	ldr	r3, [pc, #356]	@ (8003b0c <HAL_RCC_OscConfig+0x27c>)
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f003 030c 	and.w	r3, r3, #12
 80039ae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039b0:	4b56      	ldr	r3, [pc, #344]	@ (8003b0c <HAL_RCC_OscConfig+0x27c>)
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	f003 0303 	and.w	r3, r3, #3
 80039b8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	2b0c      	cmp	r3, #12
 80039be:	d102      	bne.n	80039c6 <HAL_RCC_OscConfig+0x136>
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d002      	beq.n	80039cc <HAL_RCC_OscConfig+0x13c>
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	2b04      	cmp	r3, #4
 80039ca:	d11f      	bne.n	8003a0c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039cc:	4b4f      	ldr	r3, [pc, #316]	@ (8003b0c <HAL_RCC_OscConfig+0x27c>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d005      	beq.n	80039e4 <HAL_RCC_OscConfig+0x154>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d101      	bne.n	80039e4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e25d      	b.n	8003ea0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039e4:	4b49      	ldr	r3, [pc, #292]	@ (8003b0c <HAL_RCC_OscConfig+0x27c>)
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	061b      	lsls	r3, r3, #24
 80039f2:	4946      	ldr	r1, [pc, #280]	@ (8003b0c <HAL_RCC_OscConfig+0x27c>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80039f8:	4b45      	ldr	r3, [pc, #276]	@ (8003b10 <HAL_RCC_OscConfig+0x280>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7fe fed9 	bl	80027b4 <HAL_InitTick>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d043      	beq.n	8003a90 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e249      	b.n	8003ea0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d023      	beq.n	8003a5c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a14:	4b3d      	ldr	r3, [pc, #244]	@ (8003b0c <HAL_RCC_OscConfig+0x27c>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a3c      	ldr	r2, [pc, #240]	@ (8003b0c <HAL_RCC_OscConfig+0x27c>)
 8003a1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a20:	f7fe ff14 	bl	800284c <HAL_GetTick>
 8003a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a26:	e008      	b.n	8003a3a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a28:	f7fe ff10 	bl	800284c <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e232      	b.n	8003ea0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a3a:	4b34      	ldr	r3, [pc, #208]	@ (8003b0c <HAL_RCC_OscConfig+0x27c>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d0f0      	beq.n	8003a28 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a46:	4b31      	ldr	r3, [pc, #196]	@ (8003b0c <HAL_RCC_OscConfig+0x27c>)
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	061b      	lsls	r3, r3, #24
 8003a54:	492d      	ldr	r1, [pc, #180]	@ (8003b0c <HAL_RCC_OscConfig+0x27c>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	604b      	str	r3, [r1, #4]
 8003a5a:	e01a      	b.n	8003a92 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a5c:	4b2b      	ldr	r3, [pc, #172]	@ (8003b0c <HAL_RCC_OscConfig+0x27c>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a2a      	ldr	r2, [pc, #168]	@ (8003b0c <HAL_RCC_OscConfig+0x27c>)
 8003a62:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a68:	f7fe fef0 	bl	800284c <HAL_GetTick>
 8003a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a6e:	e008      	b.n	8003a82 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a70:	f7fe feec 	bl	800284c <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e20e      	b.n	8003ea0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a82:	4b22      	ldr	r3, [pc, #136]	@ (8003b0c <HAL_RCC_OscConfig+0x27c>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1f0      	bne.n	8003a70 <HAL_RCC_OscConfig+0x1e0>
 8003a8e:	e000      	b.n	8003a92 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a90:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0308 	and.w	r3, r3, #8
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d041      	beq.n	8003b22 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	695b      	ldr	r3, [r3, #20]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d01c      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003aa6:	4b19      	ldr	r3, [pc, #100]	@ (8003b0c <HAL_RCC_OscConfig+0x27c>)
 8003aa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003aac:	4a17      	ldr	r2, [pc, #92]	@ (8003b0c <HAL_RCC_OscConfig+0x27c>)
 8003aae:	f043 0301 	orr.w	r3, r3, #1
 8003ab2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ab6:	f7fe fec9 	bl	800284c <HAL_GetTick>
 8003aba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003abc:	e008      	b.n	8003ad0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003abe:	f7fe fec5 	bl	800284c <HAL_GetTick>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d901      	bls.n	8003ad0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e1e7      	b.n	8003ea0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ad0:	4b0e      	ldr	r3, [pc, #56]	@ (8003b0c <HAL_RCC_OscConfig+0x27c>)
 8003ad2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d0ef      	beq.n	8003abe <HAL_RCC_OscConfig+0x22e>
 8003ade:	e020      	b.n	8003b22 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ae0:	4b0a      	ldr	r3, [pc, #40]	@ (8003b0c <HAL_RCC_OscConfig+0x27c>)
 8003ae2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ae6:	4a09      	ldr	r2, [pc, #36]	@ (8003b0c <HAL_RCC_OscConfig+0x27c>)
 8003ae8:	f023 0301 	bic.w	r3, r3, #1
 8003aec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af0:	f7fe feac 	bl	800284c <HAL_GetTick>
 8003af4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003af6:	e00d      	b.n	8003b14 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003af8:	f7fe fea8 	bl	800284c <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d906      	bls.n	8003b14 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e1ca      	b.n	8003ea0 <HAL_RCC_OscConfig+0x610>
 8003b0a:	bf00      	nop
 8003b0c:	40021000 	.word	0x40021000
 8003b10:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b14:	4b8c      	ldr	r3, [pc, #560]	@ (8003d48 <HAL_RCC_OscConfig+0x4b8>)
 8003b16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b1a:	f003 0302 	and.w	r3, r3, #2
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d1ea      	bne.n	8003af8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0304 	and.w	r3, r3, #4
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	f000 80a6 	beq.w	8003c7c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b30:	2300      	movs	r3, #0
 8003b32:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003b34:	4b84      	ldr	r3, [pc, #528]	@ (8003d48 <HAL_RCC_OscConfig+0x4b8>)
 8003b36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d101      	bne.n	8003b44 <HAL_RCC_OscConfig+0x2b4>
 8003b40:	2301      	movs	r3, #1
 8003b42:	e000      	b.n	8003b46 <HAL_RCC_OscConfig+0x2b6>
 8003b44:	2300      	movs	r3, #0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00d      	beq.n	8003b66 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b4a:	4b7f      	ldr	r3, [pc, #508]	@ (8003d48 <HAL_RCC_OscConfig+0x4b8>)
 8003b4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b4e:	4a7e      	ldr	r2, [pc, #504]	@ (8003d48 <HAL_RCC_OscConfig+0x4b8>)
 8003b50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b54:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b56:	4b7c      	ldr	r3, [pc, #496]	@ (8003d48 <HAL_RCC_OscConfig+0x4b8>)
 8003b58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b5e:	60fb      	str	r3, [r7, #12]
 8003b60:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003b62:	2301      	movs	r3, #1
 8003b64:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b66:	4b79      	ldr	r3, [pc, #484]	@ (8003d4c <HAL_RCC_OscConfig+0x4bc>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d118      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b72:	4b76      	ldr	r3, [pc, #472]	@ (8003d4c <HAL_RCC_OscConfig+0x4bc>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a75      	ldr	r2, [pc, #468]	@ (8003d4c <HAL_RCC_OscConfig+0x4bc>)
 8003b78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b7e:	f7fe fe65 	bl	800284c <HAL_GetTick>
 8003b82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b84:	e008      	b.n	8003b98 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b86:	f7fe fe61 	bl	800284c <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d901      	bls.n	8003b98 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e183      	b.n	8003ea0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b98:	4b6c      	ldr	r3, [pc, #432]	@ (8003d4c <HAL_RCC_OscConfig+0x4bc>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d0f0      	beq.n	8003b86 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d108      	bne.n	8003bbe <HAL_RCC_OscConfig+0x32e>
 8003bac:	4b66      	ldr	r3, [pc, #408]	@ (8003d48 <HAL_RCC_OscConfig+0x4b8>)
 8003bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bb2:	4a65      	ldr	r2, [pc, #404]	@ (8003d48 <HAL_RCC_OscConfig+0x4b8>)
 8003bb4:	f043 0301 	orr.w	r3, r3, #1
 8003bb8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003bbc:	e024      	b.n	8003c08 <HAL_RCC_OscConfig+0x378>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	2b05      	cmp	r3, #5
 8003bc4:	d110      	bne.n	8003be8 <HAL_RCC_OscConfig+0x358>
 8003bc6:	4b60      	ldr	r3, [pc, #384]	@ (8003d48 <HAL_RCC_OscConfig+0x4b8>)
 8003bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bcc:	4a5e      	ldr	r2, [pc, #376]	@ (8003d48 <HAL_RCC_OscConfig+0x4b8>)
 8003bce:	f043 0304 	orr.w	r3, r3, #4
 8003bd2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003bd6:	4b5c      	ldr	r3, [pc, #368]	@ (8003d48 <HAL_RCC_OscConfig+0x4b8>)
 8003bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bdc:	4a5a      	ldr	r2, [pc, #360]	@ (8003d48 <HAL_RCC_OscConfig+0x4b8>)
 8003bde:	f043 0301 	orr.w	r3, r3, #1
 8003be2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003be6:	e00f      	b.n	8003c08 <HAL_RCC_OscConfig+0x378>
 8003be8:	4b57      	ldr	r3, [pc, #348]	@ (8003d48 <HAL_RCC_OscConfig+0x4b8>)
 8003bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bee:	4a56      	ldr	r2, [pc, #344]	@ (8003d48 <HAL_RCC_OscConfig+0x4b8>)
 8003bf0:	f023 0301 	bic.w	r3, r3, #1
 8003bf4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003bf8:	4b53      	ldr	r3, [pc, #332]	@ (8003d48 <HAL_RCC_OscConfig+0x4b8>)
 8003bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bfe:	4a52      	ldr	r2, [pc, #328]	@ (8003d48 <HAL_RCC_OscConfig+0x4b8>)
 8003c00:	f023 0304 	bic.w	r3, r3, #4
 8003c04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d016      	beq.n	8003c3e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c10:	f7fe fe1c 	bl	800284c <HAL_GetTick>
 8003c14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c16:	e00a      	b.n	8003c2e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c18:	f7fe fe18 	bl	800284c <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d901      	bls.n	8003c2e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e138      	b.n	8003ea0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c2e:	4b46      	ldr	r3, [pc, #280]	@ (8003d48 <HAL_RCC_OscConfig+0x4b8>)
 8003c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c34:	f003 0302 	and.w	r3, r3, #2
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d0ed      	beq.n	8003c18 <HAL_RCC_OscConfig+0x388>
 8003c3c:	e015      	b.n	8003c6a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c3e:	f7fe fe05 	bl	800284c <HAL_GetTick>
 8003c42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c44:	e00a      	b.n	8003c5c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c46:	f7fe fe01 	bl	800284c <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d901      	bls.n	8003c5c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	e121      	b.n	8003ea0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c5c:	4b3a      	ldr	r3, [pc, #232]	@ (8003d48 <HAL_RCC_OscConfig+0x4b8>)
 8003c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c62:	f003 0302 	and.w	r3, r3, #2
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1ed      	bne.n	8003c46 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c6a:	7ffb      	ldrb	r3, [r7, #31]
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d105      	bne.n	8003c7c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c70:	4b35      	ldr	r3, [pc, #212]	@ (8003d48 <HAL_RCC_OscConfig+0x4b8>)
 8003c72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c74:	4a34      	ldr	r2, [pc, #208]	@ (8003d48 <HAL_RCC_OscConfig+0x4b8>)
 8003c76:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c7a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0320 	and.w	r3, r3, #32
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d03c      	beq.n	8003d02 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	699b      	ldr	r3, [r3, #24]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d01c      	beq.n	8003cca <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003c90:	4b2d      	ldr	r3, [pc, #180]	@ (8003d48 <HAL_RCC_OscConfig+0x4b8>)
 8003c92:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c96:	4a2c      	ldr	r2, [pc, #176]	@ (8003d48 <HAL_RCC_OscConfig+0x4b8>)
 8003c98:	f043 0301 	orr.w	r3, r3, #1
 8003c9c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ca0:	f7fe fdd4 	bl	800284c <HAL_GetTick>
 8003ca4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003ca6:	e008      	b.n	8003cba <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ca8:	f7fe fdd0 	bl	800284c <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e0f2      	b.n	8003ea0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003cba:	4b23      	ldr	r3, [pc, #140]	@ (8003d48 <HAL_RCC_OscConfig+0x4b8>)
 8003cbc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003cc0:	f003 0302 	and.w	r3, r3, #2
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d0ef      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x418>
 8003cc8:	e01b      	b.n	8003d02 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003cca:	4b1f      	ldr	r3, [pc, #124]	@ (8003d48 <HAL_RCC_OscConfig+0x4b8>)
 8003ccc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003cd0:	4a1d      	ldr	r2, [pc, #116]	@ (8003d48 <HAL_RCC_OscConfig+0x4b8>)
 8003cd2:	f023 0301 	bic.w	r3, r3, #1
 8003cd6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cda:	f7fe fdb7 	bl	800284c <HAL_GetTick>
 8003cde:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ce0:	e008      	b.n	8003cf4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ce2:	f7fe fdb3 	bl	800284c <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d901      	bls.n	8003cf4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e0d5      	b.n	8003ea0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003cf4:	4b14      	ldr	r3, [pc, #80]	@ (8003d48 <HAL_RCC_OscConfig+0x4b8>)
 8003cf6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003cfa:	f003 0302 	and.w	r3, r3, #2
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d1ef      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	69db      	ldr	r3, [r3, #28]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	f000 80c9 	beq.w	8003e9e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d0c:	4b0e      	ldr	r3, [pc, #56]	@ (8003d48 <HAL_RCC_OscConfig+0x4b8>)
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f003 030c 	and.w	r3, r3, #12
 8003d14:	2b0c      	cmp	r3, #12
 8003d16:	f000 8083 	beq.w	8003e20 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	69db      	ldr	r3, [r3, #28]
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d15e      	bne.n	8003de0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d22:	4b09      	ldr	r3, [pc, #36]	@ (8003d48 <HAL_RCC_OscConfig+0x4b8>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a08      	ldr	r2, [pc, #32]	@ (8003d48 <HAL_RCC_OscConfig+0x4b8>)
 8003d28:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d2e:	f7fe fd8d 	bl	800284c <HAL_GetTick>
 8003d32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d34:	e00c      	b.n	8003d50 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d36:	f7fe fd89 	bl	800284c <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d905      	bls.n	8003d50 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e0ab      	b.n	8003ea0 <HAL_RCC_OscConfig+0x610>
 8003d48:	40021000 	.word	0x40021000
 8003d4c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d50:	4b55      	ldr	r3, [pc, #340]	@ (8003ea8 <HAL_RCC_OscConfig+0x618>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d1ec      	bne.n	8003d36 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d5c:	4b52      	ldr	r3, [pc, #328]	@ (8003ea8 <HAL_RCC_OscConfig+0x618>)
 8003d5e:	68da      	ldr	r2, [r3, #12]
 8003d60:	4b52      	ldr	r3, [pc, #328]	@ (8003eac <HAL_RCC_OscConfig+0x61c>)
 8003d62:	4013      	ands	r3, r2
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	6a11      	ldr	r1, [r2, #32]
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003d6c:	3a01      	subs	r2, #1
 8003d6e:	0112      	lsls	r2, r2, #4
 8003d70:	4311      	orrs	r1, r2
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003d76:	0212      	lsls	r2, r2, #8
 8003d78:	4311      	orrs	r1, r2
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003d7e:	0852      	lsrs	r2, r2, #1
 8003d80:	3a01      	subs	r2, #1
 8003d82:	0552      	lsls	r2, r2, #21
 8003d84:	4311      	orrs	r1, r2
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003d8a:	0852      	lsrs	r2, r2, #1
 8003d8c:	3a01      	subs	r2, #1
 8003d8e:	0652      	lsls	r2, r2, #25
 8003d90:	4311      	orrs	r1, r2
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003d96:	06d2      	lsls	r2, r2, #27
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	4943      	ldr	r1, [pc, #268]	@ (8003ea8 <HAL_RCC_OscConfig+0x618>)
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003da0:	4b41      	ldr	r3, [pc, #260]	@ (8003ea8 <HAL_RCC_OscConfig+0x618>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a40      	ldr	r2, [pc, #256]	@ (8003ea8 <HAL_RCC_OscConfig+0x618>)
 8003da6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003daa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003dac:	4b3e      	ldr	r3, [pc, #248]	@ (8003ea8 <HAL_RCC_OscConfig+0x618>)
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	4a3d      	ldr	r2, [pc, #244]	@ (8003ea8 <HAL_RCC_OscConfig+0x618>)
 8003db2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003db6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db8:	f7fe fd48 	bl	800284c <HAL_GetTick>
 8003dbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dbe:	e008      	b.n	8003dd2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dc0:	f7fe fd44 	bl	800284c <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d901      	bls.n	8003dd2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e066      	b.n	8003ea0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dd2:	4b35      	ldr	r3, [pc, #212]	@ (8003ea8 <HAL_RCC_OscConfig+0x618>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d0f0      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x530>
 8003dde:	e05e      	b.n	8003e9e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003de0:	4b31      	ldr	r3, [pc, #196]	@ (8003ea8 <HAL_RCC_OscConfig+0x618>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a30      	ldr	r2, [pc, #192]	@ (8003ea8 <HAL_RCC_OscConfig+0x618>)
 8003de6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003dea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dec:	f7fe fd2e 	bl	800284c <HAL_GetTick>
 8003df0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003df2:	e008      	b.n	8003e06 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003df4:	f7fe fd2a 	bl	800284c <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d901      	bls.n	8003e06 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e04c      	b.n	8003ea0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e06:	4b28      	ldr	r3, [pc, #160]	@ (8003ea8 <HAL_RCC_OscConfig+0x618>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1f0      	bne.n	8003df4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003e12:	4b25      	ldr	r3, [pc, #148]	@ (8003ea8 <HAL_RCC_OscConfig+0x618>)
 8003e14:	68da      	ldr	r2, [r3, #12]
 8003e16:	4924      	ldr	r1, [pc, #144]	@ (8003ea8 <HAL_RCC_OscConfig+0x618>)
 8003e18:	4b25      	ldr	r3, [pc, #148]	@ (8003eb0 <HAL_RCC_OscConfig+0x620>)
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	60cb      	str	r3, [r1, #12]
 8003e1e:	e03e      	b.n	8003e9e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	69db      	ldr	r3, [r3, #28]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d101      	bne.n	8003e2c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e039      	b.n	8003ea0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003e2c:	4b1e      	ldr	r3, [pc, #120]	@ (8003ea8 <HAL_RCC_OscConfig+0x618>)
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	f003 0203 	and.w	r2, r3, #3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a1b      	ldr	r3, [r3, #32]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d12c      	bne.n	8003e9a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d123      	bne.n	8003e9a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e5c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d11b      	bne.n	8003e9a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e6c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d113      	bne.n	8003e9a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e7c:	085b      	lsrs	r3, r3, #1
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d109      	bne.n	8003e9a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e90:	085b      	lsrs	r3, r3, #1
 8003e92:	3b01      	subs	r3, #1
 8003e94:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d001      	beq.n	8003e9e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e000      	b.n	8003ea0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003e9e:	2300      	movs	r3, #0
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3720      	adds	r7, #32
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	40021000 	.word	0x40021000
 8003eac:	019f800c 	.word	0x019f800c
 8003eb0:	feeefffc 	.word	0xfeeefffc

08003eb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b086      	sub	sp, #24
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d101      	bne.n	8003ecc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e11e      	b.n	800410a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ecc:	4b91      	ldr	r3, [pc, #580]	@ (8004114 <HAL_RCC_ClockConfig+0x260>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 030f 	and.w	r3, r3, #15
 8003ed4:	683a      	ldr	r2, [r7, #0]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d910      	bls.n	8003efc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eda:	4b8e      	ldr	r3, [pc, #568]	@ (8004114 <HAL_RCC_ClockConfig+0x260>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f023 020f 	bic.w	r2, r3, #15
 8003ee2:	498c      	ldr	r1, [pc, #560]	@ (8004114 <HAL_RCC_ClockConfig+0x260>)
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eea:	4b8a      	ldr	r3, [pc, #552]	@ (8004114 <HAL_RCC_ClockConfig+0x260>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 030f 	and.w	r3, r3, #15
 8003ef2:	683a      	ldr	r2, [r7, #0]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d001      	beq.n	8003efc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e106      	b.n	800410a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0301 	and.w	r3, r3, #1
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d073      	beq.n	8003ff0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	2b03      	cmp	r3, #3
 8003f0e:	d129      	bne.n	8003f64 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f10:	4b81      	ldr	r3, [pc, #516]	@ (8004118 <HAL_RCC_ClockConfig+0x264>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d101      	bne.n	8003f20 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e0f4      	b.n	800410a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003f20:	f000 f99e 	bl	8004260 <RCC_GetSysClockFreqFromPLLSource>
 8003f24:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	4a7c      	ldr	r2, [pc, #496]	@ (800411c <HAL_RCC_ClockConfig+0x268>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d93f      	bls.n	8003fae <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003f2e:	4b7a      	ldr	r3, [pc, #488]	@ (8004118 <HAL_RCC_ClockConfig+0x264>)
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d009      	beq.n	8003f4e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d033      	beq.n	8003fae <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d12f      	bne.n	8003fae <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003f4e:	4b72      	ldr	r3, [pc, #456]	@ (8004118 <HAL_RCC_ClockConfig+0x264>)
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f56:	4a70      	ldr	r2, [pc, #448]	@ (8004118 <HAL_RCC_ClockConfig+0x264>)
 8003f58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f5c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003f5e:	2380      	movs	r3, #128	@ 0x80
 8003f60:	617b      	str	r3, [r7, #20]
 8003f62:	e024      	b.n	8003fae <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d107      	bne.n	8003f7c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f6c:	4b6a      	ldr	r3, [pc, #424]	@ (8004118 <HAL_RCC_ClockConfig+0x264>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d109      	bne.n	8003f8c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e0c6      	b.n	800410a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f7c:	4b66      	ldr	r3, [pc, #408]	@ (8004118 <HAL_RCC_ClockConfig+0x264>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d101      	bne.n	8003f8c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e0be      	b.n	800410a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003f8c:	f000 f8ce 	bl	800412c <HAL_RCC_GetSysClockFreq>
 8003f90:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	4a61      	ldr	r2, [pc, #388]	@ (800411c <HAL_RCC_ClockConfig+0x268>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d909      	bls.n	8003fae <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003f9a:	4b5f      	ldr	r3, [pc, #380]	@ (8004118 <HAL_RCC_ClockConfig+0x264>)
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003fa2:	4a5d      	ldr	r2, [pc, #372]	@ (8004118 <HAL_RCC_ClockConfig+0x264>)
 8003fa4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fa8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003faa:	2380      	movs	r3, #128	@ 0x80
 8003fac:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003fae:	4b5a      	ldr	r3, [pc, #360]	@ (8004118 <HAL_RCC_ClockConfig+0x264>)
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	f023 0203 	bic.w	r2, r3, #3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	4957      	ldr	r1, [pc, #348]	@ (8004118 <HAL_RCC_ClockConfig+0x264>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fc0:	f7fe fc44 	bl	800284c <HAL_GetTick>
 8003fc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fc6:	e00a      	b.n	8003fde <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fc8:	f7fe fc40 	bl	800284c <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d901      	bls.n	8003fde <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e095      	b.n	800410a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fde:	4b4e      	ldr	r3, [pc, #312]	@ (8004118 <HAL_RCC_ClockConfig+0x264>)
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f003 020c 	and.w	r2, r3, #12
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d1eb      	bne.n	8003fc8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0302 	and.w	r3, r3, #2
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d023      	beq.n	8004044 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0304 	and.w	r3, r3, #4
 8004004:	2b00      	cmp	r3, #0
 8004006:	d005      	beq.n	8004014 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004008:	4b43      	ldr	r3, [pc, #268]	@ (8004118 <HAL_RCC_ClockConfig+0x264>)
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	4a42      	ldr	r2, [pc, #264]	@ (8004118 <HAL_RCC_ClockConfig+0x264>)
 800400e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004012:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0308 	and.w	r3, r3, #8
 800401c:	2b00      	cmp	r3, #0
 800401e:	d007      	beq.n	8004030 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004020:	4b3d      	ldr	r3, [pc, #244]	@ (8004118 <HAL_RCC_ClockConfig+0x264>)
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004028:	4a3b      	ldr	r2, [pc, #236]	@ (8004118 <HAL_RCC_ClockConfig+0x264>)
 800402a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800402e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004030:	4b39      	ldr	r3, [pc, #228]	@ (8004118 <HAL_RCC_ClockConfig+0x264>)
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	4936      	ldr	r1, [pc, #216]	@ (8004118 <HAL_RCC_ClockConfig+0x264>)
 800403e:	4313      	orrs	r3, r2
 8004040:	608b      	str	r3, [r1, #8]
 8004042:	e008      	b.n	8004056 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	2b80      	cmp	r3, #128	@ 0x80
 8004048:	d105      	bne.n	8004056 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800404a:	4b33      	ldr	r3, [pc, #204]	@ (8004118 <HAL_RCC_ClockConfig+0x264>)
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	4a32      	ldr	r2, [pc, #200]	@ (8004118 <HAL_RCC_ClockConfig+0x264>)
 8004050:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004054:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004056:	4b2f      	ldr	r3, [pc, #188]	@ (8004114 <HAL_RCC_ClockConfig+0x260>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 030f 	and.w	r3, r3, #15
 800405e:	683a      	ldr	r2, [r7, #0]
 8004060:	429a      	cmp	r2, r3
 8004062:	d21d      	bcs.n	80040a0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004064:	4b2b      	ldr	r3, [pc, #172]	@ (8004114 <HAL_RCC_ClockConfig+0x260>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f023 020f 	bic.w	r2, r3, #15
 800406c:	4929      	ldr	r1, [pc, #164]	@ (8004114 <HAL_RCC_ClockConfig+0x260>)
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	4313      	orrs	r3, r2
 8004072:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004074:	f7fe fbea 	bl	800284c <HAL_GetTick>
 8004078:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800407a:	e00a      	b.n	8004092 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800407c:	f7fe fbe6 	bl	800284c <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	f241 3288 	movw	r2, #5000	@ 0x1388
 800408a:	4293      	cmp	r3, r2
 800408c:	d901      	bls.n	8004092 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e03b      	b.n	800410a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004092:	4b20      	ldr	r3, [pc, #128]	@ (8004114 <HAL_RCC_ClockConfig+0x260>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 030f 	and.w	r3, r3, #15
 800409a:	683a      	ldr	r2, [r7, #0]
 800409c:	429a      	cmp	r2, r3
 800409e:	d1ed      	bne.n	800407c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0304 	and.w	r3, r3, #4
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d008      	beq.n	80040be <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040ac:	4b1a      	ldr	r3, [pc, #104]	@ (8004118 <HAL_RCC_ClockConfig+0x264>)
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	4917      	ldr	r1, [pc, #92]	@ (8004118 <HAL_RCC_ClockConfig+0x264>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0308 	and.w	r3, r3, #8
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d009      	beq.n	80040de <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040ca:	4b13      	ldr	r3, [pc, #76]	@ (8004118 <HAL_RCC_ClockConfig+0x264>)
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	00db      	lsls	r3, r3, #3
 80040d8:	490f      	ldr	r1, [pc, #60]	@ (8004118 <HAL_RCC_ClockConfig+0x264>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80040de:	f000 f825 	bl	800412c <HAL_RCC_GetSysClockFreq>
 80040e2:	4602      	mov	r2, r0
 80040e4:	4b0c      	ldr	r3, [pc, #48]	@ (8004118 <HAL_RCC_ClockConfig+0x264>)
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	091b      	lsrs	r3, r3, #4
 80040ea:	f003 030f 	and.w	r3, r3, #15
 80040ee:	490c      	ldr	r1, [pc, #48]	@ (8004120 <HAL_RCC_ClockConfig+0x26c>)
 80040f0:	5ccb      	ldrb	r3, [r1, r3]
 80040f2:	f003 031f 	and.w	r3, r3, #31
 80040f6:	fa22 f303 	lsr.w	r3, r2, r3
 80040fa:	4a0a      	ldr	r2, [pc, #40]	@ (8004124 <HAL_RCC_ClockConfig+0x270>)
 80040fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80040fe:	4b0a      	ldr	r3, [pc, #40]	@ (8004128 <HAL_RCC_ClockConfig+0x274>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4618      	mov	r0, r3
 8004104:	f7fe fb56 	bl	80027b4 <HAL_InitTick>
 8004108:	4603      	mov	r3, r0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3718      	adds	r7, #24
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	40022000 	.word	0x40022000
 8004118:	40021000 	.word	0x40021000
 800411c:	04c4b400 	.word	0x04c4b400
 8004120:	08007500 	.word	0x08007500
 8004124:	20000004 	.word	0x20000004
 8004128:	2000000c 	.word	0x2000000c

0800412c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800412c:	b480      	push	{r7}
 800412e:	b087      	sub	sp, #28
 8004130:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004132:	4b2c      	ldr	r3, [pc, #176]	@ (80041e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f003 030c 	and.w	r3, r3, #12
 800413a:	2b04      	cmp	r3, #4
 800413c:	d102      	bne.n	8004144 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800413e:	4b2a      	ldr	r3, [pc, #168]	@ (80041e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004140:	613b      	str	r3, [r7, #16]
 8004142:	e047      	b.n	80041d4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004144:	4b27      	ldr	r3, [pc, #156]	@ (80041e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f003 030c 	and.w	r3, r3, #12
 800414c:	2b08      	cmp	r3, #8
 800414e:	d102      	bne.n	8004156 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004150:	4b26      	ldr	r3, [pc, #152]	@ (80041ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8004152:	613b      	str	r3, [r7, #16]
 8004154:	e03e      	b.n	80041d4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004156:	4b23      	ldr	r3, [pc, #140]	@ (80041e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f003 030c 	and.w	r3, r3, #12
 800415e:	2b0c      	cmp	r3, #12
 8004160:	d136      	bne.n	80041d0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004162:	4b20      	ldr	r3, [pc, #128]	@ (80041e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	f003 0303 	and.w	r3, r3, #3
 800416a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800416c:	4b1d      	ldr	r3, [pc, #116]	@ (80041e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	091b      	lsrs	r3, r3, #4
 8004172:	f003 030f 	and.w	r3, r3, #15
 8004176:	3301      	adds	r3, #1
 8004178:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2b03      	cmp	r3, #3
 800417e:	d10c      	bne.n	800419a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004180:	4a1a      	ldr	r2, [pc, #104]	@ (80041ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	fbb2 f3f3 	udiv	r3, r2, r3
 8004188:	4a16      	ldr	r2, [pc, #88]	@ (80041e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800418a:	68d2      	ldr	r2, [r2, #12]
 800418c:	0a12      	lsrs	r2, r2, #8
 800418e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004192:	fb02 f303 	mul.w	r3, r2, r3
 8004196:	617b      	str	r3, [r7, #20]
      break;
 8004198:	e00c      	b.n	80041b4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800419a:	4a13      	ldr	r2, [pc, #76]	@ (80041e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a2:	4a10      	ldr	r2, [pc, #64]	@ (80041e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041a4:	68d2      	ldr	r2, [r2, #12]
 80041a6:	0a12      	lsrs	r2, r2, #8
 80041a8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80041ac:	fb02 f303 	mul.w	r3, r2, r3
 80041b0:	617b      	str	r3, [r7, #20]
      break;
 80041b2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80041b4:	4b0b      	ldr	r3, [pc, #44]	@ (80041e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	0e5b      	lsrs	r3, r3, #25
 80041ba:	f003 0303 	and.w	r3, r3, #3
 80041be:	3301      	adds	r3, #1
 80041c0:	005b      	lsls	r3, r3, #1
 80041c2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80041c4:	697a      	ldr	r2, [r7, #20]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041cc:	613b      	str	r3, [r7, #16]
 80041ce:	e001      	b.n	80041d4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80041d0:	2300      	movs	r3, #0
 80041d2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80041d4:	693b      	ldr	r3, [r7, #16]
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	371c      	adds	r7, #28
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	40021000 	.word	0x40021000
 80041e8:	00f42400 	.word	0x00f42400
 80041ec:	007a1200 	.word	0x007a1200

080041f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041f0:	b480      	push	{r7}
 80041f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041f4:	4b03      	ldr	r3, [pc, #12]	@ (8004204 <HAL_RCC_GetHCLKFreq+0x14>)
 80041f6:	681b      	ldr	r3, [r3, #0]
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	20000004 	.word	0x20000004

08004208 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800420c:	f7ff fff0 	bl	80041f0 <HAL_RCC_GetHCLKFreq>
 8004210:	4602      	mov	r2, r0
 8004212:	4b06      	ldr	r3, [pc, #24]	@ (800422c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	0a1b      	lsrs	r3, r3, #8
 8004218:	f003 0307 	and.w	r3, r3, #7
 800421c:	4904      	ldr	r1, [pc, #16]	@ (8004230 <HAL_RCC_GetPCLK1Freq+0x28>)
 800421e:	5ccb      	ldrb	r3, [r1, r3]
 8004220:	f003 031f 	and.w	r3, r3, #31
 8004224:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004228:	4618      	mov	r0, r3
 800422a:	bd80      	pop	{r7, pc}
 800422c:	40021000 	.word	0x40021000
 8004230:	08007510 	.word	0x08007510

08004234 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004238:	f7ff ffda 	bl	80041f0 <HAL_RCC_GetHCLKFreq>
 800423c:	4602      	mov	r2, r0
 800423e:	4b06      	ldr	r3, [pc, #24]	@ (8004258 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	0adb      	lsrs	r3, r3, #11
 8004244:	f003 0307 	and.w	r3, r3, #7
 8004248:	4904      	ldr	r1, [pc, #16]	@ (800425c <HAL_RCC_GetPCLK2Freq+0x28>)
 800424a:	5ccb      	ldrb	r3, [r1, r3]
 800424c:	f003 031f 	and.w	r3, r3, #31
 8004250:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004254:	4618      	mov	r0, r3
 8004256:	bd80      	pop	{r7, pc}
 8004258:	40021000 	.word	0x40021000
 800425c:	08007510 	.word	0x08007510

08004260 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004260:	b480      	push	{r7}
 8004262:	b087      	sub	sp, #28
 8004264:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004266:	4b1e      	ldr	r3, [pc, #120]	@ (80042e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	f003 0303 	and.w	r3, r3, #3
 800426e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004270:	4b1b      	ldr	r3, [pc, #108]	@ (80042e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	091b      	lsrs	r3, r3, #4
 8004276:	f003 030f 	and.w	r3, r3, #15
 800427a:	3301      	adds	r3, #1
 800427c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	2b03      	cmp	r3, #3
 8004282:	d10c      	bne.n	800429e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004284:	4a17      	ldr	r2, [pc, #92]	@ (80042e4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	fbb2 f3f3 	udiv	r3, r2, r3
 800428c:	4a14      	ldr	r2, [pc, #80]	@ (80042e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800428e:	68d2      	ldr	r2, [r2, #12]
 8004290:	0a12      	lsrs	r2, r2, #8
 8004292:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004296:	fb02 f303 	mul.w	r3, r2, r3
 800429a:	617b      	str	r3, [r7, #20]
    break;
 800429c:	e00c      	b.n	80042b8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800429e:	4a12      	ldr	r2, [pc, #72]	@ (80042e8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a6:	4a0e      	ldr	r2, [pc, #56]	@ (80042e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80042a8:	68d2      	ldr	r2, [r2, #12]
 80042aa:	0a12      	lsrs	r2, r2, #8
 80042ac:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80042b0:	fb02 f303 	mul.w	r3, r2, r3
 80042b4:	617b      	str	r3, [r7, #20]
    break;
 80042b6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80042b8:	4b09      	ldr	r3, [pc, #36]	@ (80042e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	0e5b      	lsrs	r3, r3, #25
 80042be:	f003 0303 	and.w	r3, r3, #3
 80042c2:	3301      	adds	r3, #1
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80042c8:	697a      	ldr	r2, [r7, #20]
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80042d0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80042d2:	687b      	ldr	r3, [r7, #4]
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	371c      	adds	r7, #28
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr
 80042e0:	40021000 	.word	0x40021000
 80042e4:	007a1200 	.word	0x007a1200
 80042e8:	00f42400 	.word	0x00f42400

080042ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b086      	sub	sp, #24
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80042f4:	2300      	movs	r3, #0
 80042f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80042f8:	2300      	movs	r3, #0
 80042fa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004304:	2b00      	cmp	r3, #0
 8004306:	f000 8098 	beq.w	800443a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800430a:	2300      	movs	r3, #0
 800430c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800430e:	4b43      	ldr	r3, [pc, #268]	@ (800441c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004310:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004312:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d10d      	bne.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800431a:	4b40      	ldr	r3, [pc, #256]	@ (800441c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800431c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800431e:	4a3f      	ldr	r2, [pc, #252]	@ (800441c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004320:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004324:	6593      	str	r3, [r2, #88]	@ 0x58
 8004326:	4b3d      	ldr	r3, [pc, #244]	@ (800441c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800432a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800432e:	60bb      	str	r3, [r7, #8]
 8004330:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004332:	2301      	movs	r3, #1
 8004334:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004336:	4b3a      	ldr	r3, [pc, #232]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a39      	ldr	r2, [pc, #228]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800433c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004340:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004342:	f7fe fa83 	bl	800284c <HAL_GetTick>
 8004346:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004348:	e009      	b.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800434a:	f7fe fa7f 	bl	800284c <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	2b02      	cmp	r3, #2
 8004356:	d902      	bls.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	74fb      	strb	r3, [r7, #19]
        break;
 800435c:	e005      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800435e:	4b30      	ldr	r3, [pc, #192]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004366:	2b00      	cmp	r3, #0
 8004368:	d0ef      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800436a:	7cfb      	ldrb	r3, [r7, #19]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d159      	bne.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004370:	4b2a      	ldr	r3, [pc, #168]	@ (800441c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004372:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004376:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800437a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d01e      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004386:	697a      	ldr	r2, [r7, #20]
 8004388:	429a      	cmp	r2, r3
 800438a:	d019      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800438c:	4b23      	ldr	r3, [pc, #140]	@ (800441c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800438e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004392:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004396:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004398:	4b20      	ldr	r3, [pc, #128]	@ (800441c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800439a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800439e:	4a1f      	ldr	r2, [pc, #124]	@ (800441c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80043a8:	4b1c      	ldr	r3, [pc, #112]	@ (800441c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043ae:	4a1b      	ldr	r2, [pc, #108]	@ (800441c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80043b8:	4a18      	ldr	r2, [pc, #96]	@ (800441c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	f003 0301 	and.w	r3, r3, #1
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d016      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ca:	f7fe fa3f 	bl	800284c <HAL_GetTick>
 80043ce:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043d0:	e00b      	b.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043d2:	f7fe fa3b 	bl	800284c <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d902      	bls.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	74fb      	strb	r3, [r7, #19]
            break;
 80043e8:	e006      	b.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043ea:	4b0c      	ldr	r3, [pc, #48]	@ (800441c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043f0:	f003 0302 	and.w	r3, r3, #2
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d0ec      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80043f8:	7cfb      	ldrb	r3, [r7, #19]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d10b      	bne.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043fe:	4b07      	ldr	r3, [pc, #28]	@ (800441c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004400:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004404:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800440c:	4903      	ldr	r1, [pc, #12]	@ (800441c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800440e:	4313      	orrs	r3, r2
 8004410:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004414:	e008      	b.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004416:	7cfb      	ldrb	r3, [r7, #19]
 8004418:	74bb      	strb	r3, [r7, #18]
 800441a:	e005      	b.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800441c:	40021000 	.word	0x40021000
 8004420:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004424:	7cfb      	ldrb	r3, [r7, #19]
 8004426:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004428:	7c7b      	ldrb	r3, [r7, #17]
 800442a:	2b01      	cmp	r3, #1
 800442c:	d105      	bne.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800442e:	4ba6      	ldr	r3, [pc, #664]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004430:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004432:	4aa5      	ldr	r2, [pc, #660]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004434:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004438:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0301 	and.w	r3, r3, #1
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00a      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004446:	4ba0      	ldr	r3, [pc, #640]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004448:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800444c:	f023 0203 	bic.w	r2, r3, #3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	499c      	ldr	r1, [pc, #624]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004456:	4313      	orrs	r3, r2
 8004458:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0302 	and.w	r3, r3, #2
 8004464:	2b00      	cmp	r3, #0
 8004466:	d00a      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004468:	4b97      	ldr	r3, [pc, #604]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800446a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800446e:	f023 020c 	bic.w	r2, r3, #12
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	4994      	ldr	r1, [pc, #592]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004478:	4313      	orrs	r3, r2
 800447a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0304 	and.w	r3, r3, #4
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00a      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800448a:	4b8f      	ldr	r3, [pc, #572]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800448c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004490:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	498b      	ldr	r1, [pc, #556]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800449a:	4313      	orrs	r3, r2
 800449c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0308 	and.w	r3, r3, #8
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d00a      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80044ac:	4b86      	ldr	r3, [pc, #536]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044b2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	4983      	ldr	r1, [pc, #524]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0320 	and.w	r3, r3, #32
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00a      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80044ce:	4b7e      	ldr	r3, [pc, #504]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044d4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	695b      	ldr	r3, [r3, #20]
 80044dc:	497a      	ldr	r1, [pc, #488]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d00a      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044f0:	4b75      	ldr	r3, [pc, #468]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044f6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	699b      	ldr	r3, [r3, #24]
 80044fe:	4972      	ldr	r1, [pc, #456]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004500:	4313      	orrs	r3, r2
 8004502:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00a      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004512:	4b6d      	ldr	r3, [pc, #436]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004514:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004518:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	69db      	ldr	r3, [r3, #28]
 8004520:	4969      	ldr	r1, [pc, #420]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004522:	4313      	orrs	r3, r2
 8004524:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004530:	2b00      	cmp	r3, #0
 8004532:	d00a      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004534:	4b64      	ldr	r3, [pc, #400]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004536:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800453a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a1b      	ldr	r3, [r3, #32]
 8004542:	4961      	ldr	r1, [pc, #388]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004544:	4313      	orrs	r3, r2
 8004546:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00a      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004556:	4b5c      	ldr	r3, [pc, #368]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004558:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800455c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004564:	4958      	ldr	r1, [pc, #352]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004566:	4313      	orrs	r3, r2
 8004568:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004574:	2b00      	cmp	r3, #0
 8004576:	d015      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004578:	4b53      	ldr	r3, [pc, #332]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800457a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800457e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004586:	4950      	ldr	r1, [pc, #320]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004588:	4313      	orrs	r3, r2
 800458a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004592:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004596:	d105      	bne.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004598:	4b4b      	ldr	r3, [pc, #300]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	4a4a      	ldr	r2, [pc, #296]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800459e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80045a2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d015      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80045b0:	4b45      	ldr	r3, [pc, #276]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045b6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045be:	4942      	ldr	r1, [pc, #264]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045c0:	4313      	orrs	r3, r2
 80045c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80045ce:	d105      	bne.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045d0:	4b3d      	ldr	r3, [pc, #244]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	4a3c      	ldr	r2, [pc, #240]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80045da:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d015      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80045e8:	4b37      	ldr	r3, [pc, #220]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045ee:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045f6:	4934      	ldr	r1, [pc, #208]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045f8:	4313      	orrs	r3, r2
 80045fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004602:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004606:	d105      	bne.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004608:	4b2f      	ldr	r3, [pc, #188]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	4a2e      	ldr	r2, [pc, #184]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800460e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004612:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d015      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004620:	4b29      	ldr	r3, [pc, #164]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004622:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004626:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800462e:	4926      	ldr	r1, [pc, #152]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004630:	4313      	orrs	r3, r2
 8004632:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800463a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800463e:	d105      	bne.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004640:	4b21      	ldr	r3, [pc, #132]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	4a20      	ldr	r2, [pc, #128]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004646:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800464a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d015      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004658:	4b1b      	ldr	r3, [pc, #108]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800465a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800465e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004666:	4918      	ldr	r1, [pc, #96]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004668:	4313      	orrs	r3, r2
 800466a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004672:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004676:	d105      	bne.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004678:	4b13      	ldr	r3, [pc, #76]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	4a12      	ldr	r2, [pc, #72]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800467e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004682:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d015      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004690:	4b0d      	ldr	r3, [pc, #52]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004692:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004696:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800469e:	490a      	ldr	r1, [pc, #40]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046a0:	4313      	orrs	r3, r2
 80046a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80046ae:	d105      	bne.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80046b0:	4b05      	ldr	r3, [pc, #20]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	4a04      	ldr	r2, [pc, #16]	@ (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046ba:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80046bc:	7cbb      	ldrb	r3, [r7, #18]
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3718      	adds	r7, #24
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	40021000 	.word	0x40021000

080046cc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d070      	beq.n	80047c0 <HAL_RTC_Init+0xf4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d106      	bne.n	80046f8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f7fd fde8 	bl	80022c8 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2202      	movs	r2, #2
 80046fc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	f003 0310 	and.w	r3, r3, #16
 800470a:	2b10      	cmp	r3, #16
 800470c:	d04f      	beq.n	80047ae <HAL_RTC_Init+0xe2>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	22ca      	movs	r2, #202	@ 0xca
 8004714:	625a      	str	r2, [r3, #36]	@ 0x24
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	2253      	movs	r2, #83	@ 0x53
 800471c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 f9be 	bl	8004aa0 <RTC_EnterInitMode>
 8004724:	4603      	mov	r3, r0
 8004726:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004728:	7bfb      	ldrb	r3, [r7, #15]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d126      	bne.n	800477c <HAL_RTC_Init+0xb0>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(hrtc->Instance->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	699b      	ldr	r3, [r3, #24]
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	6812      	ldr	r2, [r2, #0]
 8004738:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800473c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004740:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(hrtc->Instance->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	6999      	ldr	r1, [r3, #24]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685a      	ldr	r2, [r3, #4]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	691b      	ldr	r3, [r3, #16]
 8004750:	431a      	orrs	r2, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	431a      	orrs	r2, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	430a      	orrs	r2, r1
 800475e:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        WRITE_REG(hrtc->Instance->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	68d9      	ldr	r1, [r3, #12]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	041a      	lsls	r2, r3, #16
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	430a      	orrs	r2, r1
 8004770:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f000 f9ca 	bl	8004b0c <RTC_ExitInitMode>
 8004778:	4603      	mov	r3, r0
 800477a:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 800477c:	7bfb      	ldrb	r3, [r7, #15]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d110      	bne.n	80047a4 <HAL_RTC_Init+0xd8>
      {
        MODIFY_REG(hrtc->Instance->CR, \
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a1a      	ldr	r2, [r3, #32]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	69db      	ldr	r3, [r3, #28]
 8004794:	431a      	orrs	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	695b      	ldr	r3, [r3, #20]
 800479a:	431a      	orrs	r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	430a      	orrs	r2, r1
 80047a2:	619a      	str	r2, [r3, #24]
                   RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN, \
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	22ff      	movs	r2, #255	@ 0xff
 80047aa:	625a      	str	r2, [r3, #36]	@ 0x24
 80047ac:	e001      	b.n	80047b2 <HAL_RTC_Init+0xe6>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80047ae:	2300      	movs	r3, #0
 80047b0:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80047b2:	7bfb      	ldrb	r3, [r7, #15]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d103      	bne.n	80047c0 <HAL_RTC_Init+0xf4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
  }

  return status;
 80047c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3710      	adds	r7, #16
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}

080047ca <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80047ca:	b590      	push	{r4, r7, lr}
 80047cc:	b087      	sub	sp, #28
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	60f8      	str	r0, [r7, #12]
 80047d2:	60b9      	str	r1, [r7, #8]
 80047d4:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d101      	bne.n	80047e4 <HAL_RTC_SetTime+0x1a>
 80047e0:	2302      	movs	r3, #2
 80047e2:	e08b      	b.n	80048fc <HAL_RTC_SetTime+0x132>
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2202      	movs	r2, #2
 80047f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	22ca      	movs	r2, #202	@ 0xca
 80047fa:	625a      	str	r2, [r3, #36]	@ 0x24
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2253      	movs	r2, #83	@ 0x53
 8004802:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004804:	68f8      	ldr	r0, [r7, #12]
 8004806:	f000 f94b 	bl	8004aa0 <RTC_EnterInitMode>
 800480a:	4603      	mov	r3, r0
 800480c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800480e:	7cfb      	ldrb	r3, [r7, #19]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d163      	bne.n	80048dc <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d126      	bne.n	8004868 <HAL_RTC_SetTime+0x9e>
    {
      if (READ_BIT(hrtc->Instance->CR, RTC_CR_FMT) != 0U)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	699b      	ldr	r3, [r3, #24]
 8004820:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004824:	2b00      	cmp	r3, #0
 8004826:	d102      	bne.n	800482e <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	2200      	movs	r2, #0
 800482c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	4618      	mov	r0, r3
 8004834:	f000 f9ad 	bl	8004b92 <RTC_ByteToBcd2>
 8004838:	4603      	mov	r3, r0
 800483a:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	785b      	ldrb	r3, [r3, #1]
 8004840:	4618      	mov	r0, r3
 8004842:	f000 f9a6 	bl	8004b92 <RTC_ByteToBcd2>
 8004846:	4603      	mov	r3, r0
 8004848:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800484a:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	789b      	ldrb	r3, [r3, #2]
 8004850:	4618      	mov	r0, r3
 8004852:	f000 f99e 	bl	8004b92 <RTC_ByteToBcd2>
 8004856:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004858:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	78db      	ldrb	r3, [r3, #3]
 8004860:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004862:	4313      	orrs	r3, r2
 8004864:	617b      	str	r3, [r7, #20]
 8004866:	e018      	b.n	800489a <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if (READ_BIT(hrtc->Instance->CR, RTC_CR_FMT) != 0U)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	699b      	ldr	r3, [r3, #24]
 800486e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004872:	2b00      	cmp	r3, #0
 8004874:	d102      	bne.n	800487c <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	2200      	movs	r2, #0
 800487a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	785b      	ldrb	r3, [r3, #1]
 8004886:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004888:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800488a:	68ba      	ldr	r2, [r7, #8]
 800488c:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800488e:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	78db      	ldrb	r3, [r3, #3]
 8004894:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004896:	4313      	orrs	r3, r2
 8004898:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    WRITE_REG(hrtc->Instance->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80048a4:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80048a8:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BKP);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	699a      	ldr	r2, [r3, #24]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80048b8:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    SET_BIT(hrtc->Instance->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	6999      	ldr	r1, [r3, #24]
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	68da      	ldr	r2, [r3, #12]
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	431a      	orrs	r2, r3
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	430a      	orrs	r2, r1
 80048d0:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80048d2:	68f8      	ldr	r0, [r7, #12]
 80048d4:	f000 f91a 	bl	8004b0c <RTC_ExitInitMode>
 80048d8:	4603      	mov	r3, r0
 80048da:	74fb      	strb	r3, [r7, #19]
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	22ff      	movs	r2, #255	@ 0xff
 80048e2:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 80048e4:	7cfb      	ldrb	r3, [r7, #19]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d103      	bne.n	80048f2 <HAL_RTC_SetTime+0x128>
  {
     hrtc->State = HAL_RTC_STATE_READY;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2201      	movs	r2, #1
 80048ee:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  }
    __HAL_UNLOCK(hrtc);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80048fa:	7cfb      	ldrb	r3, [r7, #19]
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	371c      	adds	r7, #28
 8004900:	46bd      	mov	sp, r7
 8004902:	bd90      	pop	{r4, r7, pc}

08004904 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b086      	sub	sp, #24
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(hrtc->Instance->SSR);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	689a      	ldr	r2, [r3, #8]
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(READ_REG(hrtc->Instance->PRER) & RTC_PRER_PREDIV_S);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	691b      	ldr	r3, [r3, #16]
 8004920:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(READ_REG(hrtc->Instance->TR) & RTC_TR_RESERVED_MASK);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8004932:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004936:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	0c1b      	lsrs	r3, r3, #16
 800493c:	b2db      	uxtb	r3, r3
 800493e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004942:	b2da      	uxtb	r2, r3
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	0a1b      	lsrs	r3, r3, #8
 800494c:	b2db      	uxtb	r3, r3
 800494e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004952:	b2da      	uxtb	r2, r3
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	b2db      	uxtb	r3, r3
 800495c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004960:	b2da      	uxtb	r2, r3
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	0d9b      	lsrs	r3, r3, #22
 800496a:	b2db      	uxtb	r3, r3
 800496c:	f003 0301 	and.w	r3, r3, #1
 8004970:	b2da      	uxtb	r2, r3
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d11a      	bne.n	80049b2 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	4618      	mov	r0, r3
 8004982:	f000 f926 	bl	8004bd2 <RTC_Bcd2ToByte>
 8004986:	4603      	mov	r3, r0
 8004988:	461a      	mov	r2, r3
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	785b      	ldrb	r3, [r3, #1]
 8004992:	4618      	mov	r0, r3
 8004994:	f000 f91d 	bl	8004bd2 <RTC_Bcd2ToByte>
 8004998:	4603      	mov	r3, r0
 800499a:	461a      	mov	r2, r3
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	789b      	ldrb	r3, [r3, #2]
 80049a4:	4618      	mov	r0, r3
 80049a6:	f000 f914 	bl	8004bd2 <RTC_Bcd2ToByte>
 80049aa:	4603      	mov	r3, r0
 80049ac:	461a      	mov	r2, r3
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80049b2:	2300      	movs	r3, #0
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3718      	adds	r7, #24
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b086      	sub	sp, #24
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(hrtc->Instance->DR) & RTC_DR_RESERVED_MASK);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80049d2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80049d6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	0c1b      	lsrs	r3, r3, #16
 80049dc:	b2da      	uxtb	r2, r3
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	0a1b      	lsrs	r3, r3, #8
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	f003 031f 	and.w	r3, r3, #31
 80049ec:	b2da      	uxtb	r2, r3
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80049fa:	b2da      	uxtb	r2, r3
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	0b5b      	lsrs	r3, r3, #13
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	f003 0307 	and.w	r3, r3, #7
 8004a0a:	b2da      	uxtb	r2, r3
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d11a      	bne.n	8004a4c <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	78db      	ldrb	r3, [r3, #3]
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f000 f8d9 	bl	8004bd2 <RTC_Bcd2ToByte>
 8004a20:	4603      	mov	r3, r0
 8004a22:	461a      	mov	r2, r3
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	785b      	ldrb	r3, [r3, #1]
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f000 f8d0 	bl	8004bd2 <RTC_Bcd2ToByte>
 8004a32:	4603      	mov	r3, r0
 8004a34:	461a      	mov	r2, r3
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	789b      	ldrb	r3, [r3, #2]
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f000 f8c7 	bl	8004bd2 <RTC_Bcd2ToByte>
 8004a44:	4603      	mov	r3, r0
 8004a46:	461a      	mov	r2, r3
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004a4c:	2300      	movs	r3, #0
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3718      	adds	r7, #24
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
	...

08004a58 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a0d      	ldr	r2, [pc, #52]	@ (8004a9c <HAL_RTC_WaitForSynchro+0x44>)
 8004a66:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004a68:	f7fd fef0 	bl	800284c <HAL_GetTick>
 8004a6c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 8004a6e:	e009      	b.n	8004a84 <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004a70:	f7fd feec 	bl	800284c <HAL_GetTick>
 8004a74:	4602      	mov	r2, r0
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004a7e:	d901      	bls.n	8004a84 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8004a80:	2303      	movs	r3, #3
 8004a82:	e007      	b.n	8004a94 <HAL_RTC_WaitForSynchro+0x3c>
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	f003 0320 	and.w	r3, r3, #32
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d0ee      	beq.n	8004a70 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8004a92:	2300      	movs	r3, #0
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3710      	adds	r7, #16
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	0001005f 	.word	0x0001005f

08004aa0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d123      	bne.n	8004b02 <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68da      	ldr	r2, [r3, #12]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004ac8:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004aca:	f7fd febf 	bl	800284c <HAL_GetTick>
 8004ace:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004ad0:	e00d      	b.n	8004aee <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004ad2:	f7fd febb 	bl	800284c <HAL_GetTick>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004ae0:	d905      	bls.n	8004aee <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2203      	movs	r2, #3
 8004aea:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d102      	bne.n	8004b02 <RTC_EnterInitMode+0x62>
 8004afc:	7bfb      	ldrb	r3, [r7, #15]
 8004afe:	2b03      	cmp	r3, #3
 8004b00:	d1e7      	bne.n	8004ad2 <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 8004b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3710      	adds	r7, #16
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b14:	2300      	movs	r3, #0
 8004b16:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68da      	ldr	r2, [r3, #12]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004b26:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	f003 0320 	and.w	r3, r3, #32
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d10c      	bne.n	8004b50 <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f7ff ff8e 	bl	8004a58 <HAL_RTC_WaitForSynchro>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d022      	beq.n	8004b88 <RTC_ExitInitMode+0x7c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2203      	movs	r2, #3
 8004b46:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	73fb      	strb	r3, [r7, #15]
 8004b4e:	e01b      	b.n	8004b88 <RTC_ExitInitMode+0x7c>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	699a      	ldr	r2, [r3, #24]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f022 0220 	bic.w	r2, r2, #32
 8004b5e:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f7ff ff79 	bl	8004a58 <HAL_RTC_WaitForSynchro>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d005      	beq.n	8004b78 <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2203      	movs	r2, #3
 8004b70:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	699a      	ldr	r2, [r3, #24]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f042 0220 	orr.w	r2, r2, #32
 8004b86:	619a      	str	r2, [r3, #24]
  }

  return status;
 8004b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3710      	adds	r7, #16
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}

08004b92 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004b92:	b480      	push	{r7}
 8004b94:	b085      	sub	sp, #20
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	4603      	mov	r3, r0
 8004b9a:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8004ba0:	79fb      	ldrb	r3, [r7, #7]
 8004ba2:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8004ba4:	e005      	b.n	8004bb2 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	3301      	adds	r3, #1
 8004baa:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8004bac:	7afb      	ldrb	r3, [r7, #11]
 8004bae:	3b0a      	subs	r3, #10
 8004bb0:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8004bb2:	7afb      	ldrb	r3, [r7, #11]
 8004bb4:	2b09      	cmp	r3, #9
 8004bb6:	d8f6      	bhi.n	8004ba6 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	011b      	lsls	r3, r3, #4
 8004bbe:	b2da      	uxtb	r2, r3
 8004bc0:	7afb      	ldrb	r3, [r7, #11]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	b2db      	uxtb	r3, r3
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3714      	adds	r7, #20
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr

08004bd2 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004bd2:	b480      	push	{r7}
 8004bd4:	b085      	sub	sp, #20
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	4603      	mov	r3, r0
 8004bda:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 8004bdc:	79fb      	ldrb	r3, [r7, #7]
 8004bde:	091b      	lsrs	r3, r3, #4
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	461a      	mov	r2, r3
 8004be4:	4613      	mov	r3, r2
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	4413      	add	r3, r2
 8004bea:	005b      	lsls	r3, r3, #1
 8004bec:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	b2da      	uxtb	r2, r3
 8004bf2:	79fb      	ldrb	r3, [r7, #7]
 8004bf4:	f003 030f 	and.w	r3, r3, #15
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	4413      	add	r3, r2
 8004bfc:	b2db      	uxtb	r3, r3
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3714      	adds	r7, #20
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr

08004c0a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c0a:	b580      	push	{r7, lr}
 8004c0c:	b084      	sub	sp, #16
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d101      	bne.n	8004c1c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e09d      	b.n	8004d58 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d108      	bne.n	8004c36 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c2c:	d009      	beq.n	8004c42 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	61da      	str	r2, [r3, #28]
 8004c34:	e005      	b.n	8004c42 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d106      	bne.n	8004c62 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f7fd fb6f 	bl	8002340 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2202      	movs	r2, #2
 8004c66:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c78:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004c82:	d902      	bls.n	8004c8a <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004c84:	2300      	movs	r3, #0
 8004c86:	60fb      	str	r3, [r7, #12]
 8004c88:	e002      	b.n	8004c90 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004c8a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004c8e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004c98:	d007      	beq.n	8004caa <HAL_SPI_Init+0xa0>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004ca2:	d002      	beq.n	8004caa <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004cba:	431a      	orrs	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	f003 0302 	and.w	r3, r3, #2
 8004cc4:	431a      	orrs	r2, r3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	695b      	ldr	r3, [r3, #20]
 8004cca:	f003 0301 	and.w	r3, r3, #1
 8004cce:	431a      	orrs	r2, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	699b      	ldr	r3, [r3, #24]
 8004cd4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004cd8:	431a      	orrs	r2, r3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	69db      	ldr	r3, [r3, #28]
 8004cde:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ce2:	431a      	orrs	r2, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a1b      	ldr	r3, [r3, #32]
 8004ce8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cec:	ea42 0103 	orr.w	r1, r2, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cf4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	430a      	orrs	r2, r1
 8004cfe:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	699b      	ldr	r3, [r3, #24]
 8004d04:	0c1b      	lsrs	r3, r3, #16
 8004d06:	f003 0204 	and.w	r2, r3, #4
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d0e:	f003 0310 	and.w	r3, r3, #16
 8004d12:	431a      	orrs	r2, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d18:	f003 0308 	and.w	r3, r3, #8
 8004d1c:	431a      	orrs	r2, r3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004d26:	ea42 0103 	orr.w	r1, r2, r3
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	430a      	orrs	r2, r1
 8004d36:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	69da      	ldr	r2, [r3, #28]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d46:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2201      	movs	r2, #1
 8004d52:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004d56:	2300      	movs	r3, #0
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3710      	adds	r7, #16
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b08a      	sub	sp, #40	@ 0x28
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	607a      	str	r2, [r7, #4]
 8004d6c:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d72:	f7fd fd6b 	bl	800284c <HAL_GetTick>
 8004d76:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004d7e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004d86:	887b      	ldrh	r3, [r7, #2]
 8004d88:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8004d8a:	887b      	ldrh	r3, [r7, #2]
 8004d8c:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004d8e:	7ffb      	ldrb	r3, [r7, #31]
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d00c      	beq.n	8004dae <HAL_SPI_TransmitReceive+0x4e>
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d9a:	d106      	bne.n	8004daa <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d102      	bne.n	8004daa <HAL_SPI_TransmitReceive+0x4a>
 8004da4:	7ffb      	ldrb	r3, [r7, #31]
 8004da6:	2b04      	cmp	r3, #4
 8004da8:	d001      	beq.n	8004dae <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004daa:	2302      	movs	r3, #2
 8004dac:	e1f3      	b.n	8005196 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d005      	beq.n	8004dc0 <HAL_SPI_TransmitReceive+0x60>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d002      	beq.n	8004dc0 <HAL_SPI_TransmitReceive+0x60>
 8004dba:	887b      	ldrh	r3, [r7, #2]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d101      	bne.n	8004dc4 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e1e8      	b.n	8005196 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d101      	bne.n	8004dd2 <HAL_SPI_TransmitReceive+0x72>
 8004dce:	2302      	movs	r3, #2
 8004dd0:	e1e1      	b.n	8005196 <HAL_SPI_TransmitReceive+0x436>
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	2b04      	cmp	r3, #4
 8004de4:	d003      	beq.n	8004dee <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2205      	movs	r2, #5
 8004dea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2200      	movs	r2, #0
 8004df2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	887a      	ldrh	r2, [r7, #2]
 8004dfe:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	887a      	ldrh	r2, [r7, #2]
 8004e06:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	68ba      	ldr	r2, [r7, #8]
 8004e0e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	887a      	ldrh	r2, [r7, #2]
 8004e14:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	887a      	ldrh	r2, [r7, #2]
 8004e1a:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2200      	movs	r2, #0
 8004e26:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004e30:	d802      	bhi.n	8004e38 <HAL_SPI_TransmitReceive+0xd8>
 8004e32:	8abb      	ldrh	r3, [r7, #20]
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d908      	bls.n	8004e4a <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	685a      	ldr	r2, [r3, #4]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004e46:	605a      	str	r2, [r3, #4]
 8004e48:	e007      	b.n	8004e5a <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	685a      	ldr	r2, [r3, #4]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004e58:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e64:	2b40      	cmp	r3, #64	@ 0x40
 8004e66:	d007      	beq.n	8004e78 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e76:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004e80:	f240 8083 	bls.w	8004f8a <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d002      	beq.n	8004e92 <HAL_SPI_TransmitReceive+0x132>
 8004e8c:	8afb      	ldrh	r3, [r7, #22]
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d16f      	bne.n	8004f72 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e96:	881a      	ldrh	r2, [r3, #0]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ea2:	1c9a      	adds	r2, r3, #2
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	b29a      	uxth	r2, r3
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004eb6:	e05c      	b.n	8004f72 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	f003 0302 	and.w	r3, r3, #2
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d11b      	bne.n	8004efe <HAL_SPI_TransmitReceive+0x19e>
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d016      	beq.n	8004efe <HAL_SPI_TransmitReceive+0x19e>
 8004ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d113      	bne.n	8004efe <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eda:	881a      	ldrh	r2, [r3, #0]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ee6:	1c9a      	adds	r2, r3, #2
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	3b01      	subs	r3, #1
 8004ef4:	b29a      	uxth	r2, r3
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004efa:	2300      	movs	r3, #0
 8004efc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	f003 0301 	and.w	r3, r3, #1
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d11c      	bne.n	8004f46 <HAL_SPI_TransmitReceive+0x1e6>
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d016      	beq.n	8004f46 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68da      	ldr	r2, [r3, #12]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f22:	b292      	uxth	r2, r2
 8004f24:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f2a:	1c9a      	adds	r2, r3, #2
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	3b01      	subs	r3, #1
 8004f3a:	b29a      	uxth	r2, r3
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f42:	2301      	movs	r3, #1
 8004f44:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004f46:	f7fd fc81 	bl	800284c <HAL_GetTick>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	6a3b      	ldr	r3, [r7, #32]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d80d      	bhi.n	8004f72 <HAL_SPI_TransmitReceive+0x212>
 8004f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f5c:	d009      	beq.n	8004f72 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2201      	movs	r2, #1
 8004f62:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e111      	b.n	8005196 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d19d      	bne.n	8004eb8 <HAL_SPI_TransmitReceive+0x158>
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d197      	bne.n	8004eb8 <HAL_SPI_TransmitReceive+0x158>
 8004f88:	e0e5      	b.n	8005156 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d003      	beq.n	8004f9a <HAL_SPI_TransmitReceive+0x23a>
 8004f92:	8afb      	ldrh	r3, [r7, #22]
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	f040 80d1 	bne.w	800513c <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d912      	bls.n	8004fca <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fa8:	881a      	ldrh	r2, [r3, #0]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fb4:	1c9a      	adds	r2, r3, #2
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	3b02      	subs	r3, #2
 8004fc2:	b29a      	uxth	r2, r3
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004fc8:	e0b8      	b.n	800513c <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	330c      	adds	r3, #12
 8004fd4:	7812      	ldrb	r2, [r2, #0]
 8004fd6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fdc:	1c5a      	adds	r2, r3, #1
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	3b01      	subs	r3, #1
 8004fea:	b29a      	uxth	r2, r3
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ff0:	e0a4      	b.n	800513c <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	f003 0302 	and.w	r3, r3, #2
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d134      	bne.n	800506a <HAL_SPI_TransmitReceive+0x30a>
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005004:	b29b      	uxth	r3, r3
 8005006:	2b00      	cmp	r3, #0
 8005008:	d02f      	beq.n	800506a <HAL_SPI_TransmitReceive+0x30a>
 800500a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800500c:	2b01      	cmp	r3, #1
 800500e:	d12c      	bne.n	800506a <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005014:	b29b      	uxth	r3, r3
 8005016:	2b01      	cmp	r3, #1
 8005018:	d912      	bls.n	8005040 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800501e:	881a      	ldrh	r2, [r3, #0]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800502a:	1c9a      	adds	r2, r3, #2
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005034:	b29b      	uxth	r3, r3
 8005036:	3b02      	subs	r3, #2
 8005038:	b29a      	uxth	r2, r3
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800503e:	e012      	b.n	8005066 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	330c      	adds	r3, #12
 800504a:	7812      	ldrb	r2, [r2, #0]
 800504c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005052:	1c5a      	adds	r2, r3, #1
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800505c:	b29b      	uxth	r3, r3
 800505e:	3b01      	subs	r3, #1
 8005060:	b29a      	uxth	r2, r3
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005066:	2300      	movs	r3, #0
 8005068:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	f003 0301 	and.w	r3, r3, #1
 8005074:	2b01      	cmp	r3, #1
 8005076:	d148      	bne.n	800510a <HAL_SPI_TransmitReceive+0x3aa>
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800507e:	b29b      	uxth	r3, r3
 8005080:	2b00      	cmp	r3, #0
 8005082:	d042      	beq.n	800510a <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800508a:	b29b      	uxth	r3, r3
 800508c:	2b01      	cmp	r3, #1
 800508e:	d923      	bls.n	80050d8 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68da      	ldr	r2, [r3, #12]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800509a:	b292      	uxth	r2, r2
 800509c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050a2:	1c9a      	adds	r2, r3, #2
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	3b02      	subs	r3, #2
 80050b2:	b29a      	uxth	r2, r3
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d81f      	bhi.n	8005106 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	685a      	ldr	r2, [r3, #4]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80050d4:	605a      	str	r2, [r3, #4]
 80050d6:	e016      	b.n	8005106 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f103 020c 	add.w	r2, r3, #12
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050e4:	7812      	ldrb	r2, [r2, #0]
 80050e6:	b2d2      	uxtb	r2, r2
 80050e8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ee:	1c5a      	adds	r2, r3, #1
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	3b01      	subs	r3, #1
 80050fe:	b29a      	uxth	r2, r3
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005106:	2301      	movs	r3, #1
 8005108:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800510a:	f7fd fb9f 	bl	800284c <HAL_GetTick>
 800510e:	4602      	mov	r2, r0
 8005110:	6a3b      	ldr	r3, [r7, #32]
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005116:	429a      	cmp	r2, r3
 8005118:	d803      	bhi.n	8005122 <HAL_SPI_TransmitReceive+0x3c2>
 800511a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800511c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005120:	d102      	bne.n	8005128 <HAL_SPI_TransmitReceive+0x3c8>
 8005122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005124:	2b00      	cmp	r3, #0
 8005126:	d109      	bne.n	800513c <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2200      	movs	r2, #0
 8005134:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005138:	2303      	movs	r3, #3
 800513a:	e02c      	b.n	8005196 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005140:	b29b      	uxth	r3, r3
 8005142:	2b00      	cmp	r3, #0
 8005144:	f47f af55 	bne.w	8004ff2 <HAL_SPI_TransmitReceive+0x292>
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800514e:	b29b      	uxth	r3, r3
 8005150:	2b00      	cmp	r3, #0
 8005152:	f47f af4e 	bne.w	8004ff2 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005156:	6a3a      	ldr	r2, [r7, #32]
 8005158:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800515a:	68f8      	ldr	r0, [r7, #12]
 800515c:	f000 f93e 	bl	80053dc <SPI_EndRxTxTransaction>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d008      	beq.n	8005178 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2220      	movs	r2, #32
 800516a:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2200      	movs	r2, #0
 8005170:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e00e      	b.n	8005196 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2200      	movs	r2, #0
 8005184:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800518c:	2b00      	cmp	r3, #0
 800518e:	d001      	beq.n	8005194 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	e000      	b.n	8005196 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8005194:	2300      	movs	r3, #0
  }
}
 8005196:	4618      	mov	r0, r3
 8005198:	3728      	adds	r7, #40	@ 0x28
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
	...

080051a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b088      	sub	sp, #32
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	603b      	str	r3, [r7, #0]
 80051ac:	4613      	mov	r3, r2
 80051ae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80051b0:	f7fd fb4c 	bl	800284c <HAL_GetTick>
 80051b4:	4602      	mov	r2, r0
 80051b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051b8:	1a9b      	subs	r3, r3, r2
 80051ba:	683a      	ldr	r2, [r7, #0]
 80051bc:	4413      	add	r3, r2
 80051be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80051c0:	f7fd fb44 	bl	800284c <HAL_GetTick>
 80051c4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80051c6:	4b39      	ldr	r3, [pc, #228]	@ (80052ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	015b      	lsls	r3, r3, #5
 80051cc:	0d1b      	lsrs	r3, r3, #20
 80051ce:	69fa      	ldr	r2, [r7, #28]
 80051d0:	fb02 f303 	mul.w	r3, r2, r3
 80051d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051d6:	e054      	b.n	8005282 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051de:	d050      	beq.n	8005282 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80051e0:	f7fd fb34 	bl	800284c <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	69bb      	ldr	r3, [r7, #24]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	69fa      	ldr	r2, [r7, #28]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d902      	bls.n	80051f6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d13d      	bne.n	8005272 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	685a      	ldr	r2, [r3, #4]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005204:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800520e:	d111      	bne.n	8005234 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005218:	d004      	beq.n	8005224 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005222:	d107      	bne.n	8005234 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005232:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005238:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800523c:	d10f      	bne.n	800525e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800524c:	601a      	str	r2, [r3, #0]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800525c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2201      	movs	r2, #1
 8005262:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2200      	movs	r2, #0
 800526a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800526e:	2303      	movs	r3, #3
 8005270:	e017      	b.n	80052a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d101      	bne.n	800527c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005278:	2300      	movs	r3, #0
 800527a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	3b01      	subs	r3, #1
 8005280:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	689a      	ldr	r2, [r3, #8]
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	4013      	ands	r3, r2
 800528c:	68ba      	ldr	r2, [r7, #8]
 800528e:	429a      	cmp	r2, r3
 8005290:	bf0c      	ite	eq
 8005292:	2301      	moveq	r3, #1
 8005294:	2300      	movne	r3, #0
 8005296:	b2db      	uxtb	r3, r3
 8005298:	461a      	mov	r2, r3
 800529a:	79fb      	ldrb	r3, [r7, #7]
 800529c:	429a      	cmp	r2, r3
 800529e:	d19b      	bne.n	80051d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3720      	adds	r7, #32
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	20000004 	.word	0x20000004

080052b0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b08a      	sub	sp, #40	@ 0x28
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	607a      	str	r2, [r7, #4]
 80052bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80052be:	2300      	movs	r3, #0
 80052c0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80052c2:	f7fd fac3 	bl	800284c <HAL_GetTick>
 80052c6:	4602      	mov	r2, r0
 80052c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ca:	1a9b      	subs	r3, r3, r2
 80052cc:	683a      	ldr	r2, [r7, #0]
 80052ce:	4413      	add	r3, r2
 80052d0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80052d2:	f7fd fabb 	bl	800284c <HAL_GetTick>
 80052d6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	330c      	adds	r3, #12
 80052de:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80052e0:	4b3d      	ldr	r3, [pc, #244]	@ (80053d8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	4613      	mov	r3, r2
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	4413      	add	r3, r2
 80052ea:	00da      	lsls	r2, r3, #3
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	0d1b      	lsrs	r3, r3, #20
 80052f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052f2:	fb02 f303 	mul.w	r3, r2, r3
 80052f6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80052f8:	e060      	b.n	80053bc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005300:	d107      	bne.n	8005312 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d104      	bne.n	8005312 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005308:	69fb      	ldr	r3, [r7, #28]
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	b2db      	uxtb	r3, r3
 800530e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005310:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005318:	d050      	beq.n	80053bc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800531a:	f7fd fa97 	bl	800284c <HAL_GetTick>
 800531e:	4602      	mov	r2, r0
 8005320:	6a3b      	ldr	r3, [r7, #32]
 8005322:	1ad3      	subs	r3, r2, r3
 8005324:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005326:	429a      	cmp	r2, r3
 8005328:	d902      	bls.n	8005330 <SPI_WaitFifoStateUntilTimeout+0x80>
 800532a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800532c:	2b00      	cmp	r3, #0
 800532e:	d13d      	bne.n	80053ac <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	685a      	ldr	r2, [r3, #4]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800533e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005348:	d111      	bne.n	800536e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005352:	d004      	beq.n	800535e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800535c:	d107      	bne.n	800536e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800536c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005372:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005376:	d10f      	bne.n	8005398 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005386:	601a      	str	r2, [r3, #0]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005396:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80053a8:	2303      	movs	r3, #3
 80053aa:	e010      	b.n	80053ce <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d101      	bne.n	80053b6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80053b2:	2300      	movs	r3, #0
 80053b4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	3b01      	subs	r3, #1
 80053ba:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	689a      	ldr	r2, [r3, #8]
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	4013      	ands	r3, r2
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d196      	bne.n	80052fa <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3728      	adds	r7, #40	@ 0x28
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	20000004 	.word	0x20000004

080053dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b086      	sub	sp, #24
 80053e0:	af02      	add	r7, sp, #8
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	9300      	str	r3, [sp, #0]
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	2200      	movs	r2, #0
 80053f0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80053f4:	68f8      	ldr	r0, [r7, #12]
 80053f6:	f7ff ff5b 	bl	80052b0 <SPI_WaitFifoStateUntilTimeout>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d007      	beq.n	8005410 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005404:	f043 0220 	orr.w	r2, r3, #32
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800540c:	2303      	movs	r3, #3
 800540e:	e027      	b.n	8005460 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	9300      	str	r3, [sp, #0]
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	2200      	movs	r2, #0
 8005418:	2180      	movs	r1, #128	@ 0x80
 800541a:	68f8      	ldr	r0, [r7, #12]
 800541c:	f7ff fec0 	bl	80051a0 <SPI_WaitFlagStateUntilTimeout>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d007      	beq.n	8005436 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800542a:	f043 0220 	orr.w	r2, r3, #32
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005432:	2303      	movs	r3, #3
 8005434:	e014      	b.n	8005460 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	9300      	str	r3, [sp, #0]
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	2200      	movs	r2, #0
 800543e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005442:	68f8      	ldr	r0, [r7, #12]
 8005444:	f7ff ff34 	bl	80052b0 <SPI_WaitFifoStateUntilTimeout>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d007      	beq.n	800545e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005452:	f043 0220 	orr.w	r2, r3, #32
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800545a:	2303      	movs	r3, #3
 800545c:	e000      	b.n	8005460 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800545e:	2300      	movs	r3, #0
}
 8005460:	4618      	mov	r0, r3
 8005462:	3710      	adds	r7, #16
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}

08005468 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b082      	sub	sp, #8
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d101      	bne.n	800547a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e042      	b.n	8005500 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005480:	2b00      	cmp	r3, #0
 8005482:	d106      	bne.n	8005492 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f000 f83b 	bl	8005508 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2224      	movs	r2, #36	@ 0x24
 8005496:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f022 0201 	bic.w	r2, r2, #1
 80054a8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d002      	beq.n	80054b8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 fb8c 	bl	8005bd0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f000 f8bd 	bl	8005638 <UART_SetConfig>
 80054be:	4603      	mov	r3, r0
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d101      	bne.n	80054c8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e01b      	b.n	8005500 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	685a      	ldr	r2, [r3, #4]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80054d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	689a      	ldr	r2, [r3, #8]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80054e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f042 0201 	orr.w	r2, r2, #1
 80054f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f000 fc0b 	bl	8005d14 <UART_CheckIdleState>
 80054fe:	4603      	mov	r3, r0
}
 8005500:	4618      	mov	r0, r3
 8005502:	3708      	adds	r7, #8
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8005508:	b480      	push	{r7}
 800550a:	b083      	sub	sp, #12
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8005510:	bf00      	nop
 8005512:	370c      	adds	r7, #12
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b08a      	sub	sp, #40	@ 0x28
 8005520:	af02      	add	r7, sp, #8
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	603b      	str	r3, [r7, #0]
 8005528:	4613      	mov	r3, r2
 800552a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005532:	2b20      	cmp	r3, #32
 8005534:	d17b      	bne.n	800562e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d002      	beq.n	8005542 <HAL_UART_Transmit+0x26>
 800553c:	88fb      	ldrh	r3, [r7, #6]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d101      	bne.n	8005546 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e074      	b.n	8005630 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2200      	movs	r2, #0
 800554a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2221      	movs	r2, #33	@ 0x21
 8005552:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005556:	f7fd f979 	bl	800284c <HAL_GetTick>
 800555a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	88fa      	ldrh	r2, [r7, #6]
 8005560:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	88fa      	ldrh	r2, [r7, #6]
 8005568:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005574:	d108      	bne.n	8005588 <HAL_UART_Transmit+0x6c>
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d104      	bne.n	8005588 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800557e:	2300      	movs	r3, #0
 8005580:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	61bb      	str	r3, [r7, #24]
 8005586:	e003      	b.n	8005590 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800558c:	2300      	movs	r3, #0
 800558e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005590:	e030      	b.n	80055f4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	9300      	str	r3, [sp, #0]
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	2200      	movs	r2, #0
 800559a:	2180      	movs	r1, #128	@ 0x80
 800559c:	68f8      	ldr	r0, [r7, #12]
 800559e:	f000 fc63 	bl	8005e68 <UART_WaitOnFlagUntilTimeout>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d005      	beq.n	80055b4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2220      	movs	r2, #32
 80055ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80055b0:	2303      	movs	r3, #3
 80055b2:	e03d      	b.n	8005630 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d10b      	bne.n	80055d2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	881b      	ldrh	r3, [r3, #0]
 80055be:	461a      	mov	r2, r3
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055c8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	3302      	adds	r3, #2
 80055ce:	61bb      	str	r3, [r7, #24]
 80055d0:	e007      	b.n	80055e2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80055d2:	69fb      	ldr	r3, [r7, #28]
 80055d4:	781a      	ldrb	r2, [r3, #0]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	3301      	adds	r3, #1
 80055e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	3b01      	subs	r3, #1
 80055ec:	b29a      	uxth	r2, r3
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d1c8      	bne.n	8005592 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	9300      	str	r3, [sp, #0]
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	2200      	movs	r2, #0
 8005608:	2140      	movs	r1, #64	@ 0x40
 800560a:	68f8      	ldr	r0, [r7, #12]
 800560c:	f000 fc2c 	bl	8005e68 <UART_WaitOnFlagUntilTimeout>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d005      	beq.n	8005622 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2220      	movs	r2, #32
 800561a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800561e:	2303      	movs	r3, #3
 8005620:	e006      	b.n	8005630 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2220      	movs	r2, #32
 8005626:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800562a:	2300      	movs	r3, #0
 800562c:	e000      	b.n	8005630 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800562e:	2302      	movs	r3, #2
  }
}
 8005630:	4618      	mov	r0, r3
 8005632:	3720      	adds	r7, #32
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}

08005638 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005638:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800563c:	b08c      	sub	sp, #48	@ 0x30
 800563e:	af00      	add	r7, sp, #0
 8005640:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005642:	2300      	movs	r3, #0
 8005644:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	689a      	ldr	r2, [r3, #8]
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	691b      	ldr	r3, [r3, #16]
 8005650:	431a      	orrs	r2, r3
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	695b      	ldr	r3, [r3, #20]
 8005656:	431a      	orrs	r2, r3
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	69db      	ldr	r3, [r3, #28]
 800565c:	4313      	orrs	r3, r2
 800565e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	4bab      	ldr	r3, [pc, #684]	@ (8005914 <UART_SetConfig+0x2dc>)
 8005668:	4013      	ands	r3, r2
 800566a:	697a      	ldr	r2, [r7, #20]
 800566c:	6812      	ldr	r2, [r2, #0]
 800566e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005670:	430b      	orrs	r3, r1
 8005672:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	68da      	ldr	r2, [r3, #12]
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	430a      	orrs	r2, r1
 8005688:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	699b      	ldr	r3, [r3, #24]
 800568e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4aa0      	ldr	r2, [pc, #640]	@ (8005918 <UART_SetConfig+0x2e0>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d004      	beq.n	80056a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	6a1b      	ldr	r3, [r3, #32]
 800569e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056a0:	4313      	orrs	r3, r2
 80056a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80056ae:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80056b2:	697a      	ldr	r2, [r7, #20]
 80056b4:	6812      	ldr	r2, [r2, #0]
 80056b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80056b8:	430b      	orrs	r3, r1
 80056ba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056c2:	f023 010f 	bic.w	r1, r3, #15
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	430a      	orrs	r2, r1
 80056d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a91      	ldr	r2, [pc, #580]	@ (800591c <UART_SetConfig+0x2e4>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d125      	bne.n	8005728 <UART_SetConfig+0xf0>
 80056dc:	4b90      	ldr	r3, [pc, #576]	@ (8005920 <UART_SetConfig+0x2e8>)
 80056de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056e2:	f003 0303 	and.w	r3, r3, #3
 80056e6:	2b03      	cmp	r3, #3
 80056e8:	d81a      	bhi.n	8005720 <UART_SetConfig+0xe8>
 80056ea:	a201      	add	r2, pc, #4	@ (adr r2, 80056f0 <UART_SetConfig+0xb8>)
 80056ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056f0:	08005701 	.word	0x08005701
 80056f4:	08005711 	.word	0x08005711
 80056f8:	08005709 	.word	0x08005709
 80056fc:	08005719 	.word	0x08005719
 8005700:	2301      	movs	r3, #1
 8005702:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005706:	e0d6      	b.n	80058b6 <UART_SetConfig+0x27e>
 8005708:	2302      	movs	r3, #2
 800570a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800570e:	e0d2      	b.n	80058b6 <UART_SetConfig+0x27e>
 8005710:	2304      	movs	r3, #4
 8005712:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005716:	e0ce      	b.n	80058b6 <UART_SetConfig+0x27e>
 8005718:	2308      	movs	r3, #8
 800571a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800571e:	e0ca      	b.n	80058b6 <UART_SetConfig+0x27e>
 8005720:	2310      	movs	r3, #16
 8005722:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005726:	e0c6      	b.n	80058b6 <UART_SetConfig+0x27e>
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a7d      	ldr	r2, [pc, #500]	@ (8005924 <UART_SetConfig+0x2ec>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d138      	bne.n	80057a4 <UART_SetConfig+0x16c>
 8005732:	4b7b      	ldr	r3, [pc, #492]	@ (8005920 <UART_SetConfig+0x2e8>)
 8005734:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005738:	f003 030c 	and.w	r3, r3, #12
 800573c:	2b0c      	cmp	r3, #12
 800573e:	d82d      	bhi.n	800579c <UART_SetConfig+0x164>
 8005740:	a201      	add	r2, pc, #4	@ (adr r2, 8005748 <UART_SetConfig+0x110>)
 8005742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005746:	bf00      	nop
 8005748:	0800577d 	.word	0x0800577d
 800574c:	0800579d 	.word	0x0800579d
 8005750:	0800579d 	.word	0x0800579d
 8005754:	0800579d 	.word	0x0800579d
 8005758:	0800578d 	.word	0x0800578d
 800575c:	0800579d 	.word	0x0800579d
 8005760:	0800579d 	.word	0x0800579d
 8005764:	0800579d 	.word	0x0800579d
 8005768:	08005785 	.word	0x08005785
 800576c:	0800579d 	.word	0x0800579d
 8005770:	0800579d 	.word	0x0800579d
 8005774:	0800579d 	.word	0x0800579d
 8005778:	08005795 	.word	0x08005795
 800577c:	2300      	movs	r3, #0
 800577e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005782:	e098      	b.n	80058b6 <UART_SetConfig+0x27e>
 8005784:	2302      	movs	r3, #2
 8005786:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800578a:	e094      	b.n	80058b6 <UART_SetConfig+0x27e>
 800578c:	2304      	movs	r3, #4
 800578e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005792:	e090      	b.n	80058b6 <UART_SetConfig+0x27e>
 8005794:	2308      	movs	r3, #8
 8005796:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800579a:	e08c      	b.n	80058b6 <UART_SetConfig+0x27e>
 800579c:	2310      	movs	r3, #16
 800579e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057a2:	e088      	b.n	80058b6 <UART_SetConfig+0x27e>
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a5f      	ldr	r2, [pc, #380]	@ (8005928 <UART_SetConfig+0x2f0>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d125      	bne.n	80057fa <UART_SetConfig+0x1c2>
 80057ae:	4b5c      	ldr	r3, [pc, #368]	@ (8005920 <UART_SetConfig+0x2e8>)
 80057b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057b4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80057b8:	2b30      	cmp	r3, #48	@ 0x30
 80057ba:	d016      	beq.n	80057ea <UART_SetConfig+0x1b2>
 80057bc:	2b30      	cmp	r3, #48	@ 0x30
 80057be:	d818      	bhi.n	80057f2 <UART_SetConfig+0x1ba>
 80057c0:	2b20      	cmp	r3, #32
 80057c2:	d00a      	beq.n	80057da <UART_SetConfig+0x1a2>
 80057c4:	2b20      	cmp	r3, #32
 80057c6:	d814      	bhi.n	80057f2 <UART_SetConfig+0x1ba>
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d002      	beq.n	80057d2 <UART_SetConfig+0x19a>
 80057cc:	2b10      	cmp	r3, #16
 80057ce:	d008      	beq.n	80057e2 <UART_SetConfig+0x1aa>
 80057d0:	e00f      	b.n	80057f2 <UART_SetConfig+0x1ba>
 80057d2:	2300      	movs	r3, #0
 80057d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057d8:	e06d      	b.n	80058b6 <UART_SetConfig+0x27e>
 80057da:	2302      	movs	r3, #2
 80057dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057e0:	e069      	b.n	80058b6 <UART_SetConfig+0x27e>
 80057e2:	2304      	movs	r3, #4
 80057e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057e8:	e065      	b.n	80058b6 <UART_SetConfig+0x27e>
 80057ea:	2308      	movs	r3, #8
 80057ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057f0:	e061      	b.n	80058b6 <UART_SetConfig+0x27e>
 80057f2:	2310      	movs	r3, #16
 80057f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057f8:	e05d      	b.n	80058b6 <UART_SetConfig+0x27e>
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a4b      	ldr	r2, [pc, #300]	@ (800592c <UART_SetConfig+0x2f4>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d125      	bne.n	8005850 <UART_SetConfig+0x218>
 8005804:	4b46      	ldr	r3, [pc, #280]	@ (8005920 <UART_SetConfig+0x2e8>)
 8005806:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800580a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800580e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005810:	d016      	beq.n	8005840 <UART_SetConfig+0x208>
 8005812:	2bc0      	cmp	r3, #192	@ 0xc0
 8005814:	d818      	bhi.n	8005848 <UART_SetConfig+0x210>
 8005816:	2b80      	cmp	r3, #128	@ 0x80
 8005818:	d00a      	beq.n	8005830 <UART_SetConfig+0x1f8>
 800581a:	2b80      	cmp	r3, #128	@ 0x80
 800581c:	d814      	bhi.n	8005848 <UART_SetConfig+0x210>
 800581e:	2b00      	cmp	r3, #0
 8005820:	d002      	beq.n	8005828 <UART_SetConfig+0x1f0>
 8005822:	2b40      	cmp	r3, #64	@ 0x40
 8005824:	d008      	beq.n	8005838 <UART_SetConfig+0x200>
 8005826:	e00f      	b.n	8005848 <UART_SetConfig+0x210>
 8005828:	2300      	movs	r3, #0
 800582a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800582e:	e042      	b.n	80058b6 <UART_SetConfig+0x27e>
 8005830:	2302      	movs	r3, #2
 8005832:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005836:	e03e      	b.n	80058b6 <UART_SetConfig+0x27e>
 8005838:	2304      	movs	r3, #4
 800583a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800583e:	e03a      	b.n	80058b6 <UART_SetConfig+0x27e>
 8005840:	2308      	movs	r3, #8
 8005842:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005846:	e036      	b.n	80058b6 <UART_SetConfig+0x27e>
 8005848:	2310      	movs	r3, #16
 800584a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800584e:	e032      	b.n	80058b6 <UART_SetConfig+0x27e>
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a30      	ldr	r2, [pc, #192]	@ (8005918 <UART_SetConfig+0x2e0>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d12a      	bne.n	80058b0 <UART_SetConfig+0x278>
 800585a:	4b31      	ldr	r3, [pc, #196]	@ (8005920 <UART_SetConfig+0x2e8>)
 800585c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005860:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005864:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005868:	d01a      	beq.n	80058a0 <UART_SetConfig+0x268>
 800586a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800586e:	d81b      	bhi.n	80058a8 <UART_SetConfig+0x270>
 8005870:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005874:	d00c      	beq.n	8005890 <UART_SetConfig+0x258>
 8005876:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800587a:	d815      	bhi.n	80058a8 <UART_SetConfig+0x270>
 800587c:	2b00      	cmp	r3, #0
 800587e:	d003      	beq.n	8005888 <UART_SetConfig+0x250>
 8005880:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005884:	d008      	beq.n	8005898 <UART_SetConfig+0x260>
 8005886:	e00f      	b.n	80058a8 <UART_SetConfig+0x270>
 8005888:	2300      	movs	r3, #0
 800588a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800588e:	e012      	b.n	80058b6 <UART_SetConfig+0x27e>
 8005890:	2302      	movs	r3, #2
 8005892:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005896:	e00e      	b.n	80058b6 <UART_SetConfig+0x27e>
 8005898:	2304      	movs	r3, #4
 800589a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800589e:	e00a      	b.n	80058b6 <UART_SetConfig+0x27e>
 80058a0:	2308      	movs	r3, #8
 80058a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058a6:	e006      	b.n	80058b6 <UART_SetConfig+0x27e>
 80058a8:	2310      	movs	r3, #16
 80058aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058ae:	e002      	b.n	80058b6 <UART_SetConfig+0x27e>
 80058b0:	2310      	movs	r3, #16
 80058b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a17      	ldr	r2, [pc, #92]	@ (8005918 <UART_SetConfig+0x2e0>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	f040 80a8 	bne.w	8005a12 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80058c2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80058c6:	2b08      	cmp	r3, #8
 80058c8:	d834      	bhi.n	8005934 <UART_SetConfig+0x2fc>
 80058ca:	a201      	add	r2, pc, #4	@ (adr r2, 80058d0 <UART_SetConfig+0x298>)
 80058cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058d0:	080058f5 	.word	0x080058f5
 80058d4:	08005935 	.word	0x08005935
 80058d8:	080058fd 	.word	0x080058fd
 80058dc:	08005935 	.word	0x08005935
 80058e0:	08005903 	.word	0x08005903
 80058e4:	08005935 	.word	0x08005935
 80058e8:	08005935 	.word	0x08005935
 80058ec:	08005935 	.word	0x08005935
 80058f0:	0800590b 	.word	0x0800590b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058f4:	f7fe fc88 	bl	8004208 <HAL_RCC_GetPCLK1Freq>
 80058f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80058fa:	e021      	b.n	8005940 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058fc:	4b0c      	ldr	r3, [pc, #48]	@ (8005930 <UART_SetConfig+0x2f8>)
 80058fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005900:	e01e      	b.n	8005940 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005902:	f7fe fc13 	bl	800412c <HAL_RCC_GetSysClockFreq>
 8005906:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005908:	e01a      	b.n	8005940 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800590a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800590e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005910:	e016      	b.n	8005940 <UART_SetConfig+0x308>
 8005912:	bf00      	nop
 8005914:	cfff69f3 	.word	0xcfff69f3
 8005918:	40008000 	.word	0x40008000
 800591c:	40013800 	.word	0x40013800
 8005920:	40021000 	.word	0x40021000
 8005924:	40004400 	.word	0x40004400
 8005928:	40004800 	.word	0x40004800
 800592c:	40004c00 	.word	0x40004c00
 8005930:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005934:	2300      	movs	r3, #0
 8005936:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800593e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005942:	2b00      	cmp	r3, #0
 8005944:	f000 812a 	beq.w	8005b9c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800594c:	4a9e      	ldr	r2, [pc, #632]	@ (8005bc8 <UART_SetConfig+0x590>)
 800594e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005952:	461a      	mov	r2, r3
 8005954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005956:	fbb3 f3f2 	udiv	r3, r3, r2
 800595a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	685a      	ldr	r2, [r3, #4]
 8005960:	4613      	mov	r3, r2
 8005962:	005b      	lsls	r3, r3, #1
 8005964:	4413      	add	r3, r2
 8005966:	69ba      	ldr	r2, [r7, #24]
 8005968:	429a      	cmp	r2, r3
 800596a:	d305      	bcc.n	8005978 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005972:	69ba      	ldr	r2, [r7, #24]
 8005974:	429a      	cmp	r2, r3
 8005976:	d903      	bls.n	8005980 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800597e:	e10d      	b.n	8005b9c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005982:	2200      	movs	r2, #0
 8005984:	60bb      	str	r3, [r7, #8]
 8005986:	60fa      	str	r2, [r7, #12]
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800598c:	4a8e      	ldr	r2, [pc, #568]	@ (8005bc8 <UART_SetConfig+0x590>)
 800598e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005992:	b29b      	uxth	r3, r3
 8005994:	2200      	movs	r2, #0
 8005996:	603b      	str	r3, [r7, #0]
 8005998:	607a      	str	r2, [r7, #4]
 800599a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800599e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80059a2:	f7fa fca5 	bl	80002f0 <__aeabi_uldivmod>
 80059a6:	4602      	mov	r2, r0
 80059a8:	460b      	mov	r3, r1
 80059aa:	4610      	mov	r0, r2
 80059ac:	4619      	mov	r1, r3
 80059ae:	f04f 0200 	mov.w	r2, #0
 80059b2:	f04f 0300 	mov.w	r3, #0
 80059b6:	020b      	lsls	r3, r1, #8
 80059b8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80059bc:	0202      	lsls	r2, r0, #8
 80059be:	6979      	ldr	r1, [r7, #20]
 80059c0:	6849      	ldr	r1, [r1, #4]
 80059c2:	0849      	lsrs	r1, r1, #1
 80059c4:	2000      	movs	r0, #0
 80059c6:	460c      	mov	r4, r1
 80059c8:	4605      	mov	r5, r0
 80059ca:	eb12 0804 	adds.w	r8, r2, r4
 80059ce:	eb43 0905 	adc.w	r9, r3, r5
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	469a      	mov	sl, r3
 80059da:	4693      	mov	fp, r2
 80059dc:	4652      	mov	r2, sl
 80059de:	465b      	mov	r3, fp
 80059e0:	4640      	mov	r0, r8
 80059e2:	4649      	mov	r1, r9
 80059e4:	f7fa fc84 	bl	80002f0 <__aeabi_uldivmod>
 80059e8:	4602      	mov	r2, r0
 80059ea:	460b      	mov	r3, r1
 80059ec:	4613      	mov	r3, r2
 80059ee:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80059f0:	6a3b      	ldr	r3, [r7, #32]
 80059f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80059f6:	d308      	bcc.n	8005a0a <UART_SetConfig+0x3d2>
 80059f8:	6a3b      	ldr	r3, [r7, #32]
 80059fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059fe:	d204      	bcs.n	8005a0a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	6a3a      	ldr	r2, [r7, #32]
 8005a06:	60da      	str	r2, [r3, #12]
 8005a08:	e0c8      	b.n	8005b9c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005a10:	e0c4      	b.n	8005b9c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	69db      	ldr	r3, [r3, #28]
 8005a16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a1a:	d167      	bne.n	8005aec <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8005a1c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005a20:	2b08      	cmp	r3, #8
 8005a22:	d828      	bhi.n	8005a76 <UART_SetConfig+0x43e>
 8005a24:	a201      	add	r2, pc, #4	@ (adr r2, 8005a2c <UART_SetConfig+0x3f4>)
 8005a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a2a:	bf00      	nop
 8005a2c:	08005a51 	.word	0x08005a51
 8005a30:	08005a59 	.word	0x08005a59
 8005a34:	08005a61 	.word	0x08005a61
 8005a38:	08005a77 	.word	0x08005a77
 8005a3c:	08005a67 	.word	0x08005a67
 8005a40:	08005a77 	.word	0x08005a77
 8005a44:	08005a77 	.word	0x08005a77
 8005a48:	08005a77 	.word	0x08005a77
 8005a4c:	08005a6f 	.word	0x08005a6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a50:	f7fe fbda 	bl	8004208 <HAL_RCC_GetPCLK1Freq>
 8005a54:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005a56:	e014      	b.n	8005a82 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a58:	f7fe fbec 	bl	8004234 <HAL_RCC_GetPCLK2Freq>
 8005a5c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005a5e:	e010      	b.n	8005a82 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a60:	4b5a      	ldr	r3, [pc, #360]	@ (8005bcc <UART_SetConfig+0x594>)
 8005a62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005a64:	e00d      	b.n	8005a82 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a66:	f7fe fb61 	bl	800412c <HAL_RCC_GetSysClockFreq>
 8005a6a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005a6c:	e009      	b.n	8005a82 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a72:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005a74:	e005      	b.n	8005a82 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8005a76:	2300      	movs	r3, #0
 8005a78:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005a80:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	f000 8089 	beq.w	8005b9c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a8e:	4a4e      	ldr	r2, [pc, #312]	@ (8005bc8 <UART_SetConfig+0x590>)
 8005a90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a94:	461a      	mov	r2, r3
 8005a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a98:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a9c:	005a      	lsls	r2, r3, #1
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	085b      	lsrs	r3, r3, #1
 8005aa4:	441a      	add	r2, r3
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ab0:	6a3b      	ldr	r3, [r7, #32]
 8005ab2:	2b0f      	cmp	r3, #15
 8005ab4:	d916      	bls.n	8005ae4 <UART_SetConfig+0x4ac>
 8005ab6:	6a3b      	ldr	r3, [r7, #32]
 8005ab8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005abc:	d212      	bcs.n	8005ae4 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005abe:	6a3b      	ldr	r3, [r7, #32]
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	f023 030f 	bic.w	r3, r3, #15
 8005ac6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ac8:	6a3b      	ldr	r3, [r7, #32]
 8005aca:	085b      	lsrs	r3, r3, #1
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	f003 0307 	and.w	r3, r3, #7
 8005ad2:	b29a      	uxth	r2, r3
 8005ad4:	8bfb      	ldrh	r3, [r7, #30]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	8bfa      	ldrh	r2, [r7, #30]
 8005ae0:	60da      	str	r2, [r3, #12]
 8005ae2:	e05b      	b.n	8005b9c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005aea:	e057      	b.n	8005b9c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005aec:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005af0:	2b08      	cmp	r3, #8
 8005af2:	d828      	bhi.n	8005b46 <UART_SetConfig+0x50e>
 8005af4:	a201      	add	r2, pc, #4	@ (adr r2, 8005afc <UART_SetConfig+0x4c4>)
 8005af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005afa:	bf00      	nop
 8005afc:	08005b21 	.word	0x08005b21
 8005b00:	08005b29 	.word	0x08005b29
 8005b04:	08005b31 	.word	0x08005b31
 8005b08:	08005b47 	.word	0x08005b47
 8005b0c:	08005b37 	.word	0x08005b37
 8005b10:	08005b47 	.word	0x08005b47
 8005b14:	08005b47 	.word	0x08005b47
 8005b18:	08005b47 	.word	0x08005b47
 8005b1c:	08005b3f 	.word	0x08005b3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b20:	f7fe fb72 	bl	8004208 <HAL_RCC_GetPCLK1Freq>
 8005b24:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005b26:	e014      	b.n	8005b52 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b28:	f7fe fb84 	bl	8004234 <HAL_RCC_GetPCLK2Freq>
 8005b2c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005b2e:	e010      	b.n	8005b52 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b30:	4b26      	ldr	r3, [pc, #152]	@ (8005bcc <UART_SetConfig+0x594>)
 8005b32:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005b34:	e00d      	b.n	8005b52 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b36:	f7fe faf9 	bl	800412c <HAL_RCC_GetSysClockFreq>
 8005b3a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005b3c:	e009      	b.n	8005b52 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b42:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005b44:	e005      	b.n	8005b52 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8005b46:	2300      	movs	r3, #0
 8005b48:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005b50:	bf00      	nop
    }

    if (pclk != 0U)
 8005b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d021      	beq.n	8005b9c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b5c:	4a1a      	ldr	r2, [pc, #104]	@ (8005bc8 <UART_SetConfig+0x590>)
 8005b5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b62:	461a      	mov	r2, r3
 8005b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b66:	fbb3 f2f2 	udiv	r2, r3, r2
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	085b      	lsrs	r3, r3, #1
 8005b70:	441a      	add	r2, r3
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b7a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b7c:	6a3b      	ldr	r3, [r7, #32]
 8005b7e:	2b0f      	cmp	r3, #15
 8005b80:	d909      	bls.n	8005b96 <UART_SetConfig+0x55e>
 8005b82:	6a3b      	ldr	r3, [r7, #32]
 8005b84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b88:	d205      	bcs.n	8005b96 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005b8a:	6a3b      	ldr	r3, [r7, #32]
 8005b8c:	b29a      	uxth	r2, r3
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	60da      	str	r2, [r3, #12]
 8005b94:	e002      	b.n	8005b9c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005bb8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3730      	adds	r7, #48	@ 0x30
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005bc6:	bf00      	nop
 8005bc8:	08007518 	.word	0x08007518
 8005bcc:	00f42400 	.word	0x00f42400

08005bd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bdc:	f003 0308 	and.w	r3, r3, #8
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d00a      	beq.n	8005bfa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	430a      	orrs	r2, r1
 8005bf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bfe:	f003 0301 	and.w	r3, r3, #1
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d00a      	beq.n	8005c1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	430a      	orrs	r2, r1
 8005c1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c20:	f003 0302 	and.w	r3, r3, #2
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d00a      	beq.n	8005c3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	430a      	orrs	r2, r1
 8005c3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c42:	f003 0304 	and.w	r3, r3, #4
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d00a      	beq.n	8005c60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	430a      	orrs	r2, r1
 8005c5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c64:	f003 0310 	and.w	r3, r3, #16
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d00a      	beq.n	8005c82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	430a      	orrs	r2, r1
 8005c80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c86:	f003 0320 	and.w	r3, r3, #32
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d00a      	beq.n	8005ca4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	430a      	orrs	r2, r1
 8005ca2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ca8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d01a      	beq.n	8005ce6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	430a      	orrs	r2, r1
 8005cc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005cce:	d10a      	bne.n	8005ce6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	430a      	orrs	r2, r1
 8005ce4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d00a      	beq.n	8005d08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	430a      	orrs	r2, r1
 8005d06:	605a      	str	r2, [r3, #4]
  }
}
 8005d08:	bf00      	nop
 8005d0a:	370c      	adds	r7, #12
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr

08005d14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b098      	sub	sp, #96	@ 0x60
 8005d18:	af02      	add	r7, sp, #8
 8005d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d24:	f7fc fd92 	bl	800284c <HAL_GetTick>
 8005d28:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 0308 	and.w	r3, r3, #8
 8005d34:	2b08      	cmp	r3, #8
 8005d36:	d12f      	bne.n	8005d98 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d38:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005d3c:	9300      	str	r3, [sp, #0]
 8005d3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d40:	2200      	movs	r2, #0
 8005d42:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 f88e 	bl	8005e68 <UART_WaitOnFlagUntilTimeout>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d022      	beq.n	8005d98 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d5a:	e853 3f00 	ldrex	r3, [r3]
 8005d5e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005d60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d66:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d70:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d72:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d74:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005d76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d78:	e841 2300 	strex	r3, r2, [r1]
 8005d7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005d7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d1e6      	bne.n	8005d52 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2220      	movs	r2, #32
 8005d88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d94:	2303      	movs	r3, #3
 8005d96:	e063      	b.n	8005e60 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 0304 	and.w	r3, r3, #4
 8005da2:	2b04      	cmp	r3, #4
 8005da4:	d149      	bne.n	8005e3a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005da6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005daa:	9300      	str	r3, [sp, #0]
 8005dac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005dae:	2200      	movs	r2, #0
 8005db0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f000 f857 	bl	8005e68 <UART_WaitOnFlagUntilTimeout>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d03c      	beq.n	8005e3a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc8:	e853 3f00 	ldrex	r3, [r3]
 8005dcc:	623b      	str	r3, [r7, #32]
   return(result);
 8005dce:	6a3b      	ldr	r3, [r7, #32]
 8005dd0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005dd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	461a      	mov	r2, r3
 8005ddc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005dde:	633b      	str	r3, [r7, #48]	@ 0x30
 8005de0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005de4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005de6:	e841 2300 	strex	r3, r2, [r1]
 8005dea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005dec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d1e6      	bne.n	8005dc0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	3308      	adds	r3, #8
 8005df8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	e853 3f00 	ldrex	r3, [r3]
 8005e00:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f023 0301 	bic.w	r3, r3, #1
 8005e08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	3308      	adds	r3, #8
 8005e10:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e12:	61fa      	str	r2, [r7, #28]
 8005e14:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e16:	69b9      	ldr	r1, [r7, #24]
 8005e18:	69fa      	ldr	r2, [r7, #28]
 8005e1a:	e841 2300 	strex	r3, r2, [r1]
 8005e1e:	617b      	str	r3, [r7, #20]
   return(result);
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d1e5      	bne.n	8005df2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2220      	movs	r2, #32
 8005e2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e36:	2303      	movs	r3, #3
 8005e38:	e012      	b.n	8005e60 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2220      	movs	r2, #32
 8005e3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2220      	movs	r2, #32
 8005e46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005e5e:	2300      	movs	r3, #0
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3758      	adds	r7, #88	@ 0x58
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b084      	sub	sp, #16
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	60b9      	str	r1, [r7, #8]
 8005e72:	603b      	str	r3, [r7, #0]
 8005e74:	4613      	mov	r3, r2
 8005e76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e78:	e04f      	b.n	8005f1a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e7a:	69bb      	ldr	r3, [r7, #24]
 8005e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e80:	d04b      	beq.n	8005f1a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e82:	f7fc fce3 	bl	800284c <HAL_GetTick>
 8005e86:	4602      	mov	r2, r0
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	1ad3      	subs	r3, r2, r3
 8005e8c:	69ba      	ldr	r2, [r7, #24]
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d302      	bcc.n	8005e98 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e92:	69bb      	ldr	r3, [r7, #24]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d101      	bne.n	8005e9c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005e98:	2303      	movs	r3, #3
 8005e9a:	e04e      	b.n	8005f3a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 0304 	and.w	r3, r3, #4
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d037      	beq.n	8005f1a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	2b80      	cmp	r3, #128	@ 0x80
 8005eae:	d034      	beq.n	8005f1a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	2b40      	cmp	r3, #64	@ 0x40
 8005eb4:	d031      	beq.n	8005f1a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	69db      	ldr	r3, [r3, #28]
 8005ebc:	f003 0308 	and.w	r3, r3, #8
 8005ec0:	2b08      	cmp	r3, #8
 8005ec2:	d110      	bne.n	8005ee6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2208      	movs	r2, #8
 8005eca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ecc:	68f8      	ldr	r0, [r7, #12]
 8005ece:	f000 f838 	bl	8005f42 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2208      	movs	r2, #8
 8005ed6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2200      	movs	r2, #0
 8005ede:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e029      	b.n	8005f3a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	69db      	ldr	r3, [r3, #28]
 8005eec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ef0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ef4:	d111      	bne.n	8005f1a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005efe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f00:	68f8      	ldr	r0, [r7, #12]
 8005f02:	f000 f81e 	bl	8005f42 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2220      	movs	r2, #32
 8005f0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2200      	movs	r2, #0
 8005f12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005f16:	2303      	movs	r3, #3
 8005f18:	e00f      	b.n	8005f3a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	69da      	ldr	r2, [r3, #28]
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	4013      	ands	r3, r2
 8005f24:	68ba      	ldr	r2, [r7, #8]
 8005f26:	429a      	cmp	r2, r3
 8005f28:	bf0c      	ite	eq
 8005f2a:	2301      	moveq	r3, #1
 8005f2c:	2300      	movne	r3, #0
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	461a      	mov	r2, r3
 8005f32:	79fb      	ldrb	r3, [r7, #7]
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d0a0      	beq.n	8005e7a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f38:	2300      	movs	r3, #0
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3710      	adds	r7, #16
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}

08005f42 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f42:	b480      	push	{r7}
 8005f44:	b095      	sub	sp, #84	@ 0x54
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f52:	e853 3f00 	ldrex	r3, [r3]
 8005f56:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f5a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	461a      	mov	r2, r3
 8005f66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f68:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f6a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f6c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005f6e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005f70:	e841 2300 	strex	r3, r2, [r1]
 8005f74:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005f76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d1e6      	bne.n	8005f4a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	3308      	adds	r3, #8
 8005f82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f84:	6a3b      	ldr	r3, [r7, #32]
 8005f86:	e853 3f00 	ldrex	r3, [r3]
 8005f8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f8c:	69fb      	ldr	r3, [r7, #28]
 8005f8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f92:	f023 0301 	bic.w	r3, r3, #1
 8005f96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	3308      	adds	r3, #8
 8005f9e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005fa0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005fa2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005fa6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005fa8:	e841 2300 	strex	r3, r2, [r1]
 8005fac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d1e3      	bne.n	8005f7c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d118      	bne.n	8005fee <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	e853 3f00 	ldrex	r3, [r3]
 8005fc8:	60bb      	str	r3, [r7, #8]
   return(result);
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	f023 0310 	bic.w	r3, r3, #16
 8005fd0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005fda:	61bb      	str	r3, [r7, #24]
 8005fdc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fde:	6979      	ldr	r1, [r7, #20]
 8005fe0:	69ba      	ldr	r2, [r7, #24]
 8005fe2:	e841 2300 	strex	r3, r2, [r1]
 8005fe6:	613b      	str	r3, [r7, #16]
   return(result);
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d1e6      	bne.n	8005fbc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2220      	movs	r2, #32
 8005ff2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006002:	bf00      	nop
 8006004:	3754      	adds	r7, #84	@ 0x54
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr
	...

08006010 <std>:
 8006010:	2300      	movs	r3, #0
 8006012:	b510      	push	{r4, lr}
 8006014:	4604      	mov	r4, r0
 8006016:	e9c0 3300 	strd	r3, r3, [r0]
 800601a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800601e:	6083      	str	r3, [r0, #8]
 8006020:	8181      	strh	r1, [r0, #12]
 8006022:	6643      	str	r3, [r0, #100]	@ 0x64
 8006024:	81c2      	strh	r2, [r0, #14]
 8006026:	6183      	str	r3, [r0, #24]
 8006028:	4619      	mov	r1, r3
 800602a:	2208      	movs	r2, #8
 800602c:	305c      	adds	r0, #92	@ 0x5c
 800602e:	f000 f938 	bl	80062a2 <memset>
 8006032:	4b0d      	ldr	r3, [pc, #52]	@ (8006068 <std+0x58>)
 8006034:	6263      	str	r3, [r4, #36]	@ 0x24
 8006036:	4b0d      	ldr	r3, [pc, #52]	@ (800606c <std+0x5c>)
 8006038:	62a3      	str	r3, [r4, #40]	@ 0x28
 800603a:	4b0d      	ldr	r3, [pc, #52]	@ (8006070 <std+0x60>)
 800603c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800603e:	4b0d      	ldr	r3, [pc, #52]	@ (8006074 <std+0x64>)
 8006040:	6323      	str	r3, [r4, #48]	@ 0x30
 8006042:	4b0d      	ldr	r3, [pc, #52]	@ (8006078 <std+0x68>)
 8006044:	6224      	str	r4, [r4, #32]
 8006046:	429c      	cmp	r4, r3
 8006048:	d006      	beq.n	8006058 <std+0x48>
 800604a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800604e:	4294      	cmp	r4, r2
 8006050:	d002      	beq.n	8006058 <std+0x48>
 8006052:	33d0      	adds	r3, #208	@ 0xd0
 8006054:	429c      	cmp	r4, r3
 8006056:	d105      	bne.n	8006064 <std+0x54>
 8006058:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800605c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006060:	f000 b998 	b.w	8006394 <__retarget_lock_init_recursive>
 8006064:	bd10      	pop	{r4, pc}
 8006066:	bf00      	nop
 8006068:	080061fd 	.word	0x080061fd
 800606c:	0800621f 	.word	0x0800621f
 8006070:	08006257 	.word	0x08006257
 8006074:	0800627b 	.word	0x0800627b
 8006078:	200002f0 	.word	0x200002f0

0800607c <stdio_exit_handler>:
 800607c:	4a02      	ldr	r2, [pc, #8]	@ (8006088 <stdio_exit_handler+0xc>)
 800607e:	4903      	ldr	r1, [pc, #12]	@ (800608c <stdio_exit_handler+0x10>)
 8006080:	4803      	ldr	r0, [pc, #12]	@ (8006090 <stdio_exit_handler+0x14>)
 8006082:	f000 b869 	b.w	8006158 <_fwalk_sglue>
 8006086:	bf00      	nop
 8006088:	20000014 	.word	0x20000014
 800608c:	08006f0d 	.word	0x08006f0d
 8006090:	20000024 	.word	0x20000024

08006094 <cleanup_stdio>:
 8006094:	6841      	ldr	r1, [r0, #4]
 8006096:	4b0c      	ldr	r3, [pc, #48]	@ (80060c8 <cleanup_stdio+0x34>)
 8006098:	4299      	cmp	r1, r3
 800609a:	b510      	push	{r4, lr}
 800609c:	4604      	mov	r4, r0
 800609e:	d001      	beq.n	80060a4 <cleanup_stdio+0x10>
 80060a0:	f000 ff34 	bl	8006f0c <_fflush_r>
 80060a4:	68a1      	ldr	r1, [r4, #8]
 80060a6:	4b09      	ldr	r3, [pc, #36]	@ (80060cc <cleanup_stdio+0x38>)
 80060a8:	4299      	cmp	r1, r3
 80060aa:	d002      	beq.n	80060b2 <cleanup_stdio+0x1e>
 80060ac:	4620      	mov	r0, r4
 80060ae:	f000 ff2d 	bl	8006f0c <_fflush_r>
 80060b2:	68e1      	ldr	r1, [r4, #12]
 80060b4:	4b06      	ldr	r3, [pc, #24]	@ (80060d0 <cleanup_stdio+0x3c>)
 80060b6:	4299      	cmp	r1, r3
 80060b8:	d004      	beq.n	80060c4 <cleanup_stdio+0x30>
 80060ba:	4620      	mov	r0, r4
 80060bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060c0:	f000 bf24 	b.w	8006f0c <_fflush_r>
 80060c4:	bd10      	pop	{r4, pc}
 80060c6:	bf00      	nop
 80060c8:	200002f0 	.word	0x200002f0
 80060cc:	20000358 	.word	0x20000358
 80060d0:	200003c0 	.word	0x200003c0

080060d4 <global_stdio_init.part.0>:
 80060d4:	b510      	push	{r4, lr}
 80060d6:	4b0b      	ldr	r3, [pc, #44]	@ (8006104 <global_stdio_init.part.0+0x30>)
 80060d8:	4c0b      	ldr	r4, [pc, #44]	@ (8006108 <global_stdio_init.part.0+0x34>)
 80060da:	4a0c      	ldr	r2, [pc, #48]	@ (800610c <global_stdio_init.part.0+0x38>)
 80060dc:	601a      	str	r2, [r3, #0]
 80060de:	4620      	mov	r0, r4
 80060e0:	2200      	movs	r2, #0
 80060e2:	2104      	movs	r1, #4
 80060e4:	f7ff ff94 	bl	8006010 <std>
 80060e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80060ec:	2201      	movs	r2, #1
 80060ee:	2109      	movs	r1, #9
 80060f0:	f7ff ff8e 	bl	8006010 <std>
 80060f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80060f8:	2202      	movs	r2, #2
 80060fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060fe:	2112      	movs	r1, #18
 8006100:	f7ff bf86 	b.w	8006010 <std>
 8006104:	20000428 	.word	0x20000428
 8006108:	200002f0 	.word	0x200002f0
 800610c:	0800607d 	.word	0x0800607d

08006110 <__sfp_lock_acquire>:
 8006110:	4801      	ldr	r0, [pc, #4]	@ (8006118 <__sfp_lock_acquire+0x8>)
 8006112:	f000 b940 	b.w	8006396 <__retarget_lock_acquire_recursive>
 8006116:	bf00      	nop
 8006118:	20000431 	.word	0x20000431

0800611c <__sfp_lock_release>:
 800611c:	4801      	ldr	r0, [pc, #4]	@ (8006124 <__sfp_lock_release+0x8>)
 800611e:	f000 b93b 	b.w	8006398 <__retarget_lock_release_recursive>
 8006122:	bf00      	nop
 8006124:	20000431 	.word	0x20000431

08006128 <__sinit>:
 8006128:	b510      	push	{r4, lr}
 800612a:	4604      	mov	r4, r0
 800612c:	f7ff fff0 	bl	8006110 <__sfp_lock_acquire>
 8006130:	6a23      	ldr	r3, [r4, #32]
 8006132:	b11b      	cbz	r3, 800613c <__sinit+0x14>
 8006134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006138:	f7ff bff0 	b.w	800611c <__sfp_lock_release>
 800613c:	4b04      	ldr	r3, [pc, #16]	@ (8006150 <__sinit+0x28>)
 800613e:	6223      	str	r3, [r4, #32]
 8006140:	4b04      	ldr	r3, [pc, #16]	@ (8006154 <__sinit+0x2c>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d1f5      	bne.n	8006134 <__sinit+0xc>
 8006148:	f7ff ffc4 	bl	80060d4 <global_stdio_init.part.0>
 800614c:	e7f2      	b.n	8006134 <__sinit+0xc>
 800614e:	bf00      	nop
 8006150:	08006095 	.word	0x08006095
 8006154:	20000428 	.word	0x20000428

08006158 <_fwalk_sglue>:
 8006158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800615c:	4607      	mov	r7, r0
 800615e:	4688      	mov	r8, r1
 8006160:	4614      	mov	r4, r2
 8006162:	2600      	movs	r6, #0
 8006164:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006168:	f1b9 0901 	subs.w	r9, r9, #1
 800616c:	d505      	bpl.n	800617a <_fwalk_sglue+0x22>
 800616e:	6824      	ldr	r4, [r4, #0]
 8006170:	2c00      	cmp	r4, #0
 8006172:	d1f7      	bne.n	8006164 <_fwalk_sglue+0xc>
 8006174:	4630      	mov	r0, r6
 8006176:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800617a:	89ab      	ldrh	r3, [r5, #12]
 800617c:	2b01      	cmp	r3, #1
 800617e:	d907      	bls.n	8006190 <_fwalk_sglue+0x38>
 8006180:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006184:	3301      	adds	r3, #1
 8006186:	d003      	beq.n	8006190 <_fwalk_sglue+0x38>
 8006188:	4629      	mov	r1, r5
 800618a:	4638      	mov	r0, r7
 800618c:	47c0      	blx	r8
 800618e:	4306      	orrs	r6, r0
 8006190:	3568      	adds	r5, #104	@ 0x68
 8006192:	e7e9      	b.n	8006168 <_fwalk_sglue+0x10>

08006194 <iprintf>:
 8006194:	b40f      	push	{r0, r1, r2, r3}
 8006196:	b507      	push	{r0, r1, r2, lr}
 8006198:	4906      	ldr	r1, [pc, #24]	@ (80061b4 <iprintf+0x20>)
 800619a:	ab04      	add	r3, sp, #16
 800619c:	6808      	ldr	r0, [r1, #0]
 800619e:	f853 2b04 	ldr.w	r2, [r3], #4
 80061a2:	6881      	ldr	r1, [r0, #8]
 80061a4:	9301      	str	r3, [sp, #4]
 80061a6:	f000 fb89 	bl	80068bc <_vfiprintf_r>
 80061aa:	b003      	add	sp, #12
 80061ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80061b0:	b004      	add	sp, #16
 80061b2:	4770      	bx	lr
 80061b4:	20000020 	.word	0x20000020

080061b8 <siprintf>:
 80061b8:	b40e      	push	{r1, r2, r3}
 80061ba:	b510      	push	{r4, lr}
 80061bc:	b09d      	sub	sp, #116	@ 0x74
 80061be:	ab1f      	add	r3, sp, #124	@ 0x7c
 80061c0:	9002      	str	r0, [sp, #8]
 80061c2:	9006      	str	r0, [sp, #24]
 80061c4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80061c8:	480a      	ldr	r0, [pc, #40]	@ (80061f4 <siprintf+0x3c>)
 80061ca:	9107      	str	r1, [sp, #28]
 80061cc:	9104      	str	r1, [sp, #16]
 80061ce:	490a      	ldr	r1, [pc, #40]	@ (80061f8 <siprintf+0x40>)
 80061d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80061d4:	9105      	str	r1, [sp, #20]
 80061d6:	2400      	movs	r4, #0
 80061d8:	a902      	add	r1, sp, #8
 80061da:	6800      	ldr	r0, [r0, #0]
 80061dc:	9301      	str	r3, [sp, #4]
 80061de:	941b      	str	r4, [sp, #108]	@ 0x6c
 80061e0:	f000 fa46 	bl	8006670 <_svfiprintf_r>
 80061e4:	9b02      	ldr	r3, [sp, #8]
 80061e6:	701c      	strb	r4, [r3, #0]
 80061e8:	b01d      	add	sp, #116	@ 0x74
 80061ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061ee:	b003      	add	sp, #12
 80061f0:	4770      	bx	lr
 80061f2:	bf00      	nop
 80061f4:	20000020 	.word	0x20000020
 80061f8:	ffff0208 	.word	0xffff0208

080061fc <__sread>:
 80061fc:	b510      	push	{r4, lr}
 80061fe:	460c      	mov	r4, r1
 8006200:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006204:	f000 f878 	bl	80062f8 <_read_r>
 8006208:	2800      	cmp	r0, #0
 800620a:	bfab      	itete	ge
 800620c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800620e:	89a3      	ldrhlt	r3, [r4, #12]
 8006210:	181b      	addge	r3, r3, r0
 8006212:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006216:	bfac      	ite	ge
 8006218:	6563      	strge	r3, [r4, #84]	@ 0x54
 800621a:	81a3      	strhlt	r3, [r4, #12]
 800621c:	bd10      	pop	{r4, pc}

0800621e <__swrite>:
 800621e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006222:	461f      	mov	r7, r3
 8006224:	898b      	ldrh	r3, [r1, #12]
 8006226:	05db      	lsls	r3, r3, #23
 8006228:	4605      	mov	r5, r0
 800622a:	460c      	mov	r4, r1
 800622c:	4616      	mov	r6, r2
 800622e:	d505      	bpl.n	800623c <__swrite+0x1e>
 8006230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006234:	2302      	movs	r3, #2
 8006236:	2200      	movs	r2, #0
 8006238:	f000 f84c 	bl	80062d4 <_lseek_r>
 800623c:	89a3      	ldrh	r3, [r4, #12]
 800623e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006242:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006246:	81a3      	strh	r3, [r4, #12]
 8006248:	4632      	mov	r2, r6
 800624a:	463b      	mov	r3, r7
 800624c:	4628      	mov	r0, r5
 800624e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006252:	f000 b863 	b.w	800631c <_write_r>

08006256 <__sseek>:
 8006256:	b510      	push	{r4, lr}
 8006258:	460c      	mov	r4, r1
 800625a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800625e:	f000 f839 	bl	80062d4 <_lseek_r>
 8006262:	1c43      	adds	r3, r0, #1
 8006264:	89a3      	ldrh	r3, [r4, #12]
 8006266:	bf15      	itete	ne
 8006268:	6560      	strne	r0, [r4, #84]	@ 0x54
 800626a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800626e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006272:	81a3      	strheq	r3, [r4, #12]
 8006274:	bf18      	it	ne
 8006276:	81a3      	strhne	r3, [r4, #12]
 8006278:	bd10      	pop	{r4, pc}

0800627a <__sclose>:
 800627a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800627e:	f000 b819 	b.w	80062b4 <_close_r>

08006282 <memcmp>:
 8006282:	b510      	push	{r4, lr}
 8006284:	3901      	subs	r1, #1
 8006286:	4402      	add	r2, r0
 8006288:	4290      	cmp	r0, r2
 800628a:	d101      	bne.n	8006290 <memcmp+0xe>
 800628c:	2000      	movs	r0, #0
 800628e:	e005      	b.n	800629c <memcmp+0x1a>
 8006290:	7803      	ldrb	r3, [r0, #0]
 8006292:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006296:	42a3      	cmp	r3, r4
 8006298:	d001      	beq.n	800629e <memcmp+0x1c>
 800629a:	1b18      	subs	r0, r3, r4
 800629c:	bd10      	pop	{r4, pc}
 800629e:	3001      	adds	r0, #1
 80062a0:	e7f2      	b.n	8006288 <memcmp+0x6>

080062a2 <memset>:
 80062a2:	4402      	add	r2, r0
 80062a4:	4603      	mov	r3, r0
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d100      	bne.n	80062ac <memset+0xa>
 80062aa:	4770      	bx	lr
 80062ac:	f803 1b01 	strb.w	r1, [r3], #1
 80062b0:	e7f9      	b.n	80062a6 <memset+0x4>
	...

080062b4 <_close_r>:
 80062b4:	b538      	push	{r3, r4, r5, lr}
 80062b6:	4d06      	ldr	r5, [pc, #24]	@ (80062d0 <_close_r+0x1c>)
 80062b8:	2300      	movs	r3, #0
 80062ba:	4604      	mov	r4, r0
 80062bc:	4608      	mov	r0, r1
 80062be:	602b      	str	r3, [r5, #0]
 80062c0:	f7fc f8ef 	bl	80024a2 <_close>
 80062c4:	1c43      	adds	r3, r0, #1
 80062c6:	d102      	bne.n	80062ce <_close_r+0x1a>
 80062c8:	682b      	ldr	r3, [r5, #0]
 80062ca:	b103      	cbz	r3, 80062ce <_close_r+0x1a>
 80062cc:	6023      	str	r3, [r4, #0]
 80062ce:	bd38      	pop	{r3, r4, r5, pc}
 80062d0:	2000042c 	.word	0x2000042c

080062d4 <_lseek_r>:
 80062d4:	b538      	push	{r3, r4, r5, lr}
 80062d6:	4d07      	ldr	r5, [pc, #28]	@ (80062f4 <_lseek_r+0x20>)
 80062d8:	4604      	mov	r4, r0
 80062da:	4608      	mov	r0, r1
 80062dc:	4611      	mov	r1, r2
 80062de:	2200      	movs	r2, #0
 80062e0:	602a      	str	r2, [r5, #0]
 80062e2:	461a      	mov	r2, r3
 80062e4:	f7fc f904 	bl	80024f0 <_lseek>
 80062e8:	1c43      	adds	r3, r0, #1
 80062ea:	d102      	bne.n	80062f2 <_lseek_r+0x1e>
 80062ec:	682b      	ldr	r3, [r5, #0]
 80062ee:	b103      	cbz	r3, 80062f2 <_lseek_r+0x1e>
 80062f0:	6023      	str	r3, [r4, #0]
 80062f2:	bd38      	pop	{r3, r4, r5, pc}
 80062f4:	2000042c 	.word	0x2000042c

080062f8 <_read_r>:
 80062f8:	b538      	push	{r3, r4, r5, lr}
 80062fa:	4d07      	ldr	r5, [pc, #28]	@ (8006318 <_read_r+0x20>)
 80062fc:	4604      	mov	r4, r0
 80062fe:	4608      	mov	r0, r1
 8006300:	4611      	mov	r1, r2
 8006302:	2200      	movs	r2, #0
 8006304:	602a      	str	r2, [r5, #0]
 8006306:	461a      	mov	r2, r3
 8006308:	f7fc f892 	bl	8002430 <_read>
 800630c:	1c43      	adds	r3, r0, #1
 800630e:	d102      	bne.n	8006316 <_read_r+0x1e>
 8006310:	682b      	ldr	r3, [r5, #0]
 8006312:	b103      	cbz	r3, 8006316 <_read_r+0x1e>
 8006314:	6023      	str	r3, [r4, #0]
 8006316:	bd38      	pop	{r3, r4, r5, pc}
 8006318:	2000042c 	.word	0x2000042c

0800631c <_write_r>:
 800631c:	b538      	push	{r3, r4, r5, lr}
 800631e:	4d07      	ldr	r5, [pc, #28]	@ (800633c <_write_r+0x20>)
 8006320:	4604      	mov	r4, r0
 8006322:	4608      	mov	r0, r1
 8006324:	4611      	mov	r1, r2
 8006326:	2200      	movs	r2, #0
 8006328:	602a      	str	r2, [r5, #0]
 800632a:	461a      	mov	r2, r3
 800632c:	f7fc f89d 	bl	800246a <_write>
 8006330:	1c43      	adds	r3, r0, #1
 8006332:	d102      	bne.n	800633a <_write_r+0x1e>
 8006334:	682b      	ldr	r3, [r5, #0]
 8006336:	b103      	cbz	r3, 800633a <_write_r+0x1e>
 8006338:	6023      	str	r3, [r4, #0]
 800633a:	bd38      	pop	{r3, r4, r5, pc}
 800633c:	2000042c 	.word	0x2000042c

08006340 <__errno>:
 8006340:	4b01      	ldr	r3, [pc, #4]	@ (8006348 <__errno+0x8>)
 8006342:	6818      	ldr	r0, [r3, #0]
 8006344:	4770      	bx	lr
 8006346:	bf00      	nop
 8006348:	20000020 	.word	0x20000020

0800634c <__libc_init_array>:
 800634c:	b570      	push	{r4, r5, r6, lr}
 800634e:	4d0d      	ldr	r5, [pc, #52]	@ (8006384 <__libc_init_array+0x38>)
 8006350:	4c0d      	ldr	r4, [pc, #52]	@ (8006388 <__libc_init_array+0x3c>)
 8006352:	1b64      	subs	r4, r4, r5
 8006354:	10a4      	asrs	r4, r4, #2
 8006356:	2600      	movs	r6, #0
 8006358:	42a6      	cmp	r6, r4
 800635a:	d109      	bne.n	8006370 <__libc_init_array+0x24>
 800635c:	4d0b      	ldr	r5, [pc, #44]	@ (800638c <__libc_init_array+0x40>)
 800635e:	4c0c      	ldr	r4, [pc, #48]	@ (8006390 <__libc_init_array+0x44>)
 8006360:	f000 ff74 	bl	800724c <_init>
 8006364:	1b64      	subs	r4, r4, r5
 8006366:	10a4      	asrs	r4, r4, #2
 8006368:	2600      	movs	r6, #0
 800636a:	42a6      	cmp	r6, r4
 800636c:	d105      	bne.n	800637a <__libc_init_array+0x2e>
 800636e:	bd70      	pop	{r4, r5, r6, pc}
 8006370:	f855 3b04 	ldr.w	r3, [r5], #4
 8006374:	4798      	blx	r3
 8006376:	3601      	adds	r6, #1
 8006378:	e7ee      	b.n	8006358 <__libc_init_array+0xc>
 800637a:	f855 3b04 	ldr.w	r3, [r5], #4
 800637e:	4798      	blx	r3
 8006380:	3601      	adds	r6, #1
 8006382:	e7f2      	b.n	800636a <__libc_init_array+0x1e>
 8006384:	0800756c 	.word	0x0800756c
 8006388:	0800756c 	.word	0x0800756c
 800638c:	0800756c 	.word	0x0800756c
 8006390:	08007570 	.word	0x08007570

08006394 <__retarget_lock_init_recursive>:
 8006394:	4770      	bx	lr

08006396 <__retarget_lock_acquire_recursive>:
 8006396:	4770      	bx	lr

08006398 <__retarget_lock_release_recursive>:
 8006398:	4770      	bx	lr

0800639a <strcpy>:
 800639a:	4603      	mov	r3, r0
 800639c:	f811 2b01 	ldrb.w	r2, [r1], #1
 80063a0:	f803 2b01 	strb.w	r2, [r3], #1
 80063a4:	2a00      	cmp	r2, #0
 80063a6:	d1f9      	bne.n	800639c <strcpy+0x2>
 80063a8:	4770      	bx	lr

080063aa <memcpy>:
 80063aa:	440a      	add	r2, r1
 80063ac:	4291      	cmp	r1, r2
 80063ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80063b2:	d100      	bne.n	80063b6 <memcpy+0xc>
 80063b4:	4770      	bx	lr
 80063b6:	b510      	push	{r4, lr}
 80063b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063c0:	4291      	cmp	r1, r2
 80063c2:	d1f9      	bne.n	80063b8 <memcpy+0xe>
 80063c4:	bd10      	pop	{r4, pc}
	...

080063c8 <_free_r>:
 80063c8:	b538      	push	{r3, r4, r5, lr}
 80063ca:	4605      	mov	r5, r0
 80063cc:	2900      	cmp	r1, #0
 80063ce:	d041      	beq.n	8006454 <_free_r+0x8c>
 80063d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063d4:	1f0c      	subs	r4, r1, #4
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	bfb8      	it	lt
 80063da:	18e4      	addlt	r4, r4, r3
 80063dc:	f000 f8e0 	bl	80065a0 <__malloc_lock>
 80063e0:	4a1d      	ldr	r2, [pc, #116]	@ (8006458 <_free_r+0x90>)
 80063e2:	6813      	ldr	r3, [r2, #0]
 80063e4:	b933      	cbnz	r3, 80063f4 <_free_r+0x2c>
 80063e6:	6063      	str	r3, [r4, #4]
 80063e8:	6014      	str	r4, [r2, #0]
 80063ea:	4628      	mov	r0, r5
 80063ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80063f0:	f000 b8dc 	b.w	80065ac <__malloc_unlock>
 80063f4:	42a3      	cmp	r3, r4
 80063f6:	d908      	bls.n	800640a <_free_r+0x42>
 80063f8:	6820      	ldr	r0, [r4, #0]
 80063fa:	1821      	adds	r1, r4, r0
 80063fc:	428b      	cmp	r3, r1
 80063fe:	bf01      	itttt	eq
 8006400:	6819      	ldreq	r1, [r3, #0]
 8006402:	685b      	ldreq	r3, [r3, #4]
 8006404:	1809      	addeq	r1, r1, r0
 8006406:	6021      	streq	r1, [r4, #0]
 8006408:	e7ed      	b.n	80063e6 <_free_r+0x1e>
 800640a:	461a      	mov	r2, r3
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	b10b      	cbz	r3, 8006414 <_free_r+0x4c>
 8006410:	42a3      	cmp	r3, r4
 8006412:	d9fa      	bls.n	800640a <_free_r+0x42>
 8006414:	6811      	ldr	r1, [r2, #0]
 8006416:	1850      	adds	r0, r2, r1
 8006418:	42a0      	cmp	r0, r4
 800641a:	d10b      	bne.n	8006434 <_free_r+0x6c>
 800641c:	6820      	ldr	r0, [r4, #0]
 800641e:	4401      	add	r1, r0
 8006420:	1850      	adds	r0, r2, r1
 8006422:	4283      	cmp	r3, r0
 8006424:	6011      	str	r1, [r2, #0]
 8006426:	d1e0      	bne.n	80063ea <_free_r+0x22>
 8006428:	6818      	ldr	r0, [r3, #0]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	6053      	str	r3, [r2, #4]
 800642e:	4408      	add	r0, r1
 8006430:	6010      	str	r0, [r2, #0]
 8006432:	e7da      	b.n	80063ea <_free_r+0x22>
 8006434:	d902      	bls.n	800643c <_free_r+0x74>
 8006436:	230c      	movs	r3, #12
 8006438:	602b      	str	r3, [r5, #0]
 800643a:	e7d6      	b.n	80063ea <_free_r+0x22>
 800643c:	6820      	ldr	r0, [r4, #0]
 800643e:	1821      	adds	r1, r4, r0
 8006440:	428b      	cmp	r3, r1
 8006442:	bf04      	itt	eq
 8006444:	6819      	ldreq	r1, [r3, #0]
 8006446:	685b      	ldreq	r3, [r3, #4]
 8006448:	6063      	str	r3, [r4, #4]
 800644a:	bf04      	itt	eq
 800644c:	1809      	addeq	r1, r1, r0
 800644e:	6021      	streq	r1, [r4, #0]
 8006450:	6054      	str	r4, [r2, #4]
 8006452:	e7ca      	b.n	80063ea <_free_r+0x22>
 8006454:	bd38      	pop	{r3, r4, r5, pc}
 8006456:	bf00      	nop
 8006458:	20000438 	.word	0x20000438

0800645c <sbrk_aligned>:
 800645c:	b570      	push	{r4, r5, r6, lr}
 800645e:	4e0f      	ldr	r6, [pc, #60]	@ (800649c <sbrk_aligned+0x40>)
 8006460:	460c      	mov	r4, r1
 8006462:	6831      	ldr	r1, [r6, #0]
 8006464:	4605      	mov	r5, r0
 8006466:	b911      	cbnz	r1, 800646e <sbrk_aligned+0x12>
 8006468:	f000 fe26 	bl	80070b8 <_sbrk_r>
 800646c:	6030      	str	r0, [r6, #0]
 800646e:	4621      	mov	r1, r4
 8006470:	4628      	mov	r0, r5
 8006472:	f000 fe21 	bl	80070b8 <_sbrk_r>
 8006476:	1c43      	adds	r3, r0, #1
 8006478:	d103      	bne.n	8006482 <sbrk_aligned+0x26>
 800647a:	f04f 34ff 	mov.w	r4, #4294967295
 800647e:	4620      	mov	r0, r4
 8006480:	bd70      	pop	{r4, r5, r6, pc}
 8006482:	1cc4      	adds	r4, r0, #3
 8006484:	f024 0403 	bic.w	r4, r4, #3
 8006488:	42a0      	cmp	r0, r4
 800648a:	d0f8      	beq.n	800647e <sbrk_aligned+0x22>
 800648c:	1a21      	subs	r1, r4, r0
 800648e:	4628      	mov	r0, r5
 8006490:	f000 fe12 	bl	80070b8 <_sbrk_r>
 8006494:	3001      	adds	r0, #1
 8006496:	d1f2      	bne.n	800647e <sbrk_aligned+0x22>
 8006498:	e7ef      	b.n	800647a <sbrk_aligned+0x1e>
 800649a:	bf00      	nop
 800649c:	20000434 	.word	0x20000434

080064a0 <_malloc_r>:
 80064a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064a4:	1ccd      	adds	r5, r1, #3
 80064a6:	f025 0503 	bic.w	r5, r5, #3
 80064aa:	3508      	adds	r5, #8
 80064ac:	2d0c      	cmp	r5, #12
 80064ae:	bf38      	it	cc
 80064b0:	250c      	movcc	r5, #12
 80064b2:	2d00      	cmp	r5, #0
 80064b4:	4606      	mov	r6, r0
 80064b6:	db01      	blt.n	80064bc <_malloc_r+0x1c>
 80064b8:	42a9      	cmp	r1, r5
 80064ba:	d904      	bls.n	80064c6 <_malloc_r+0x26>
 80064bc:	230c      	movs	r3, #12
 80064be:	6033      	str	r3, [r6, #0]
 80064c0:	2000      	movs	r0, #0
 80064c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800659c <_malloc_r+0xfc>
 80064ca:	f000 f869 	bl	80065a0 <__malloc_lock>
 80064ce:	f8d8 3000 	ldr.w	r3, [r8]
 80064d2:	461c      	mov	r4, r3
 80064d4:	bb44      	cbnz	r4, 8006528 <_malloc_r+0x88>
 80064d6:	4629      	mov	r1, r5
 80064d8:	4630      	mov	r0, r6
 80064da:	f7ff ffbf 	bl	800645c <sbrk_aligned>
 80064de:	1c43      	adds	r3, r0, #1
 80064e0:	4604      	mov	r4, r0
 80064e2:	d158      	bne.n	8006596 <_malloc_r+0xf6>
 80064e4:	f8d8 4000 	ldr.w	r4, [r8]
 80064e8:	4627      	mov	r7, r4
 80064ea:	2f00      	cmp	r7, #0
 80064ec:	d143      	bne.n	8006576 <_malloc_r+0xd6>
 80064ee:	2c00      	cmp	r4, #0
 80064f0:	d04b      	beq.n	800658a <_malloc_r+0xea>
 80064f2:	6823      	ldr	r3, [r4, #0]
 80064f4:	4639      	mov	r1, r7
 80064f6:	4630      	mov	r0, r6
 80064f8:	eb04 0903 	add.w	r9, r4, r3
 80064fc:	f000 fddc 	bl	80070b8 <_sbrk_r>
 8006500:	4581      	cmp	r9, r0
 8006502:	d142      	bne.n	800658a <_malloc_r+0xea>
 8006504:	6821      	ldr	r1, [r4, #0]
 8006506:	1a6d      	subs	r5, r5, r1
 8006508:	4629      	mov	r1, r5
 800650a:	4630      	mov	r0, r6
 800650c:	f7ff ffa6 	bl	800645c <sbrk_aligned>
 8006510:	3001      	adds	r0, #1
 8006512:	d03a      	beq.n	800658a <_malloc_r+0xea>
 8006514:	6823      	ldr	r3, [r4, #0]
 8006516:	442b      	add	r3, r5
 8006518:	6023      	str	r3, [r4, #0]
 800651a:	f8d8 3000 	ldr.w	r3, [r8]
 800651e:	685a      	ldr	r2, [r3, #4]
 8006520:	bb62      	cbnz	r2, 800657c <_malloc_r+0xdc>
 8006522:	f8c8 7000 	str.w	r7, [r8]
 8006526:	e00f      	b.n	8006548 <_malloc_r+0xa8>
 8006528:	6822      	ldr	r2, [r4, #0]
 800652a:	1b52      	subs	r2, r2, r5
 800652c:	d420      	bmi.n	8006570 <_malloc_r+0xd0>
 800652e:	2a0b      	cmp	r2, #11
 8006530:	d917      	bls.n	8006562 <_malloc_r+0xc2>
 8006532:	1961      	adds	r1, r4, r5
 8006534:	42a3      	cmp	r3, r4
 8006536:	6025      	str	r5, [r4, #0]
 8006538:	bf18      	it	ne
 800653a:	6059      	strne	r1, [r3, #4]
 800653c:	6863      	ldr	r3, [r4, #4]
 800653e:	bf08      	it	eq
 8006540:	f8c8 1000 	streq.w	r1, [r8]
 8006544:	5162      	str	r2, [r4, r5]
 8006546:	604b      	str	r3, [r1, #4]
 8006548:	4630      	mov	r0, r6
 800654a:	f000 f82f 	bl	80065ac <__malloc_unlock>
 800654e:	f104 000b 	add.w	r0, r4, #11
 8006552:	1d23      	adds	r3, r4, #4
 8006554:	f020 0007 	bic.w	r0, r0, #7
 8006558:	1ac2      	subs	r2, r0, r3
 800655a:	bf1c      	itt	ne
 800655c:	1a1b      	subne	r3, r3, r0
 800655e:	50a3      	strne	r3, [r4, r2]
 8006560:	e7af      	b.n	80064c2 <_malloc_r+0x22>
 8006562:	6862      	ldr	r2, [r4, #4]
 8006564:	42a3      	cmp	r3, r4
 8006566:	bf0c      	ite	eq
 8006568:	f8c8 2000 	streq.w	r2, [r8]
 800656c:	605a      	strne	r2, [r3, #4]
 800656e:	e7eb      	b.n	8006548 <_malloc_r+0xa8>
 8006570:	4623      	mov	r3, r4
 8006572:	6864      	ldr	r4, [r4, #4]
 8006574:	e7ae      	b.n	80064d4 <_malloc_r+0x34>
 8006576:	463c      	mov	r4, r7
 8006578:	687f      	ldr	r7, [r7, #4]
 800657a:	e7b6      	b.n	80064ea <_malloc_r+0x4a>
 800657c:	461a      	mov	r2, r3
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	42a3      	cmp	r3, r4
 8006582:	d1fb      	bne.n	800657c <_malloc_r+0xdc>
 8006584:	2300      	movs	r3, #0
 8006586:	6053      	str	r3, [r2, #4]
 8006588:	e7de      	b.n	8006548 <_malloc_r+0xa8>
 800658a:	230c      	movs	r3, #12
 800658c:	6033      	str	r3, [r6, #0]
 800658e:	4630      	mov	r0, r6
 8006590:	f000 f80c 	bl	80065ac <__malloc_unlock>
 8006594:	e794      	b.n	80064c0 <_malloc_r+0x20>
 8006596:	6005      	str	r5, [r0, #0]
 8006598:	e7d6      	b.n	8006548 <_malloc_r+0xa8>
 800659a:	bf00      	nop
 800659c:	20000438 	.word	0x20000438

080065a0 <__malloc_lock>:
 80065a0:	4801      	ldr	r0, [pc, #4]	@ (80065a8 <__malloc_lock+0x8>)
 80065a2:	f7ff bef8 	b.w	8006396 <__retarget_lock_acquire_recursive>
 80065a6:	bf00      	nop
 80065a8:	20000430 	.word	0x20000430

080065ac <__malloc_unlock>:
 80065ac:	4801      	ldr	r0, [pc, #4]	@ (80065b4 <__malloc_unlock+0x8>)
 80065ae:	f7ff bef3 	b.w	8006398 <__retarget_lock_release_recursive>
 80065b2:	bf00      	nop
 80065b4:	20000430 	.word	0x20000430

080065b8 <__ssputs_r>:
 80065b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065bc:	688e      	ldr	r6, [r1, #8]
 80065be:	461f      	mov	r7, r3
 80065c0:	42be      	cmp	r6, r7
 80065c2:	680b      	ldr	r3, [r1, #0]
 80065c4:	4682      	mov	sl, r0
 80065c6:	460c      	mov	r4, r1
 80065c8:	4690      	mov	r8, r2
 80065ca:	d82d      	bhi.n	8006628 <__ssputs_r+0x70>
 80065cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80065d0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80065d4:	d026      	beq.n	8006624 <__ssputs_r+0x6c>
 80065d6:	6965      	ldr	r5, [r4, #20]
 80065d8:	6909      	ldr	r1, [r1, #16]
 80065da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80065de:	eba3 0901 	sub.w	r9, r3, r1
 80065e2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80065e6:	1c7b      	adds	r3, r7, #1
 80065e8:	444b      	add	r3, r9
 80065ea:	106d      	asrs	r5, r5, #1
 80065ec:	429d      	cmp	r5, r3
 80065ee:	bf38      	it	cc
 80065f0:	461d      	movcc	r5, r3
 80065f2:	0553      	lsls	r3, r2, #21
 80065f4:	d527      	bpl.n	8006646 <__ssputs_r+0x8e>
 80065f6:	4629      	mov	r1, r5
 80065f8:	f7ff ff52 	bl	80064a0 <_malloc_r>
 80065fc:	4606      	mov	r6, r0
 80065fe:	b360      	cbz	r0, 800665a <__ssputs_r+0xa2>
 8006600:	6921      	ldr	r1, [r4, #16]
 8006602:	464a      	mov	r2, r9
 8006604:	f7ff fed1 	bl	80063aa <memcpy>
 8006608:	89a3      	ldrh	r3, [r4, #12]
 800660a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800660e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006612:	81a3      	strh	r3, [r4, #12]
 8006614:	6126      	str	r6, [r4, #16]
 8006616:	6165      	str	r5, [r4, #20]
 8006618:	444e      	add	r6, r9
 800661a:	eba5 0509 	sub.w	r5, r5, r9
 800661e:	6026      	str	r6, [r4, #0]
 8006620:	60a5      	str	r5, [r4, #8]
 8006622:	463e      	mov	r6, r7
 8006624:	42be      	cmp	r6, r7
 8006626:	d900      	bls.n	800662a <__ssputs_r+0x72>
 8006628:	463e      	mov	r6, r7
 800662a:	6820      	ldr	r0, [r4, #0]
 800662c:	4632      	mov	r2, r6
 800662e:	4641      	mov	r1, r8
 8006630:	f000 fd28 	bl	8007084 <memmove>
 8006634:	68a3      	ldr	r3, [r4, #8]
 8006636:	1b9b      	subs	r3, r3, r6
 8006638:	60a3      	str	r3, [r4, #8]
 800663a:	6823      	ldr	r3, [r4, #0]
 800663c:	4433      	add	r3, r6
 800663e:	6023      	str	r3, [r4, #0]
 8006640:	2000      	movs	r0, #0
 8006642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006646:	462a      	mov	r2, r5
 8006648:	f000 fd46 	bl	80070d8 <_realloc_r>
 800664c:	4606      	mov	r6, r0
 800664e:	2800      	cmp	r0, #0
 8006650:	d1e0      	bne.n	8006614 <__ssputs_r+0x5c>
 8006652:	6921      	ldr	r1, [r4, #16]
 8006654:	4650      	mov	r0, sl
 8006656:	f7ff feb7 	bl	80063c8 <_free_r>
 800665a:	230c      	movs	r3, #12
 800665c:	f8ca 3000 	str.w	r3, [sl]
 8006660:	89a3      	ldrh	r3, [r4, #12]
 8006662:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006666:	81a3      	strh	r3, [r4, #12]
 8006668:	f04f 30ff 	mov.w	r0, #4294967295
 800666c:	e7e9      	b.n	8006642 <__ssputs_r+0x8a>
	...

08006670 <_svfiprintf_r>:
 8006670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006674:	4698      	mov	r8, r3
 8006676:	898b      	ldrh	r3, [r1, #12]
 8006678:	061b      	lsls	r3, r3, #24
 800667a:	b09d      	sub	sp, #116	@ 0x74
 800667c:	4607      	mov	r7, r0
 800667e:	460d      	mov	r5, r1
 8006680:	4614      	mov	r4, r2
 8006682:	d510      	bpl.n	80066a6 <_svfiprintf_r+0x36>
 8006684:	690b      	ldr	r3, [r1, #16]
 8006686:	b973      	cbnz	r3, 80066a6 <_svfiprintf_r+0x36>
 8006688:	2140      	movs	r1, #64	@ 0x40
 800668a:	f7ff ff09 	bl	80064a0 <_malloc_r>
 800668e:	6028      	str	r0, [r5, #0]
 8006690:	6128      	str	r0, [r5, #16]
 8006692:	b930      	cbnz	r0, 80066a2 <_svfiprintf_r+0x32>
 8006694:	230c      	movs	r3, #12
 8006696:	603b      	str	r3, [r7, #0]
 8006698:	f04f 30ff 	mov.w	r0, #4294967295
 800669c:	b01d      	add	sp, #116	@ 0x74
 800669e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066a2:	2340      	movs	r3, #64	@ 0x40
 80066a4:	616b      	str	r3, [r5, #20]
 80066a6:	2300      	movs	r3, #0
 80066a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80066aa:	2320      	movs	r3, #32
 80066ac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80066b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80066b4:	2330      	movs	r3, #48	@ 0x30
 80066b6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006854 <_svfiprintf_r+0x1e4>
 80066ba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80066be:	f04f 0901 	mov.w	r9, #1
 80066c2:	4623      	mov	r3, r4
 80066c4:	469a      	mov	sl, r3
 80066c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066ca:	b10a      	cbz	r2, 80066d0 <_svfiprintf_r+0x60>
 80066cc:	2a25      	cmp	r2, #37	@ 0x25
 80066ce:	d1f9      	bne.n	80066c4 <_svfiprintf_r+0x54>
 80066d0:	ebba 0b04 	subs.w	fp, sl, r4
 80066d4:	d00b      	beq.n	80066ee <_svfiprintf_r+0x7e>
 80066d6:	465b      	mov	r3, fp
 80066d8:	4622      	mov	r2, r4
 80066da:	4629      	mov	r1, r5
 80066dc:	4638      	mov	r0, r7
 80066de:	f7ff ff6b 	bl	80065b8 <__ssputs_r>
 80066e2:	3001      	adds	r0, #1
 80066e4:	f000 80a7 	beq.w	8006836 <_svfiprintf_r+0x1c6>
 80066e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80066ea:	445a      	add	r2, fp
 80066ec:	9209      	str	r2, [sp, #36]	@ 0x24
 80066ee:	f89a 3000 	ldrb.w	r3, [sl]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	f000 809f 	beq.w	8006836 <_svfiprintf_r+0x1c6>
 80066f8:	2300      	movs	r3, #0
 80066fa:	f04f 32ff 	mov.w	r2, #4294967295
 80066fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006702:	f10a 0a01 	add.w	sl, sl, #1
 8006706:	9304      	str	r3, [sp, #16]
 8006708:	9307      	str	r3, [sp, #28]
 800670a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800670e:	931a      	str	r3, [sp, #104]	@ 0x68
 8006710:	4654      	mov	r4, sl
 8006712:	2205      	movs	r2, #5
 8006714:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006718:	484e      	ldr	r0, [pc, #312]	@ (8006854 <_svfiprintf_r+0x1e4>)
 800671a:	f7f9 fd99 	bl	8000250 <memchr>
 800671e:	9a04      	ldr	r2, [sp, #16]
 8006720:	b9d8      	cbnz	r0, 800675a <_svfiprintf_r+0xea>
 8006722:	06d0      	lsls	r0, r2, #27
 8006724:	bf44      	itt	mi
 8006726:	2320      	movmi	r3, #32
 8006728:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800672c:	0711      	lsls	r1, r2, #28
 800672e:	bf44      	itt	mi
 8006730:	232b      	movmi	r3, #43	@ 0x2b
 8006732:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006736:	f89a 3000 	ldrb.w	r3, [sl]
 800673a:	2b2a      	cmp	r3, #42	@ 0x2a
 800673c:	d015      	beq.n	800676a <_svfiprintf_r+0xfa>
 800673e:	9a07      	ldr	r2, [sp, #28]
 8006740:	4654      	mov	r4, sl
 8006742:	2000      	movs	r0, #0
 8006744:	f04f 0c0a 	mov.w	ip, #10
 8006748:	4621      	mov	r1, r4
 800674a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800674e:	3b30      	subs	r3, #48	@ 0x30
 8006750:	2b09      	cmp	r3, #9
 8006752:	d94b      	bls.n	80067ec <_svfiprintf_r+0x17c>
 8006754:	b1b0      	cbz	r0, 8006784 <_svfiprintf_r+0x114>
 8006756:	9207      	str	r2, [sp, #28]
 8006758:	e014      	b.n	8006784 <_svfiprintf_r+0x114>
 800675a:	eba0 0308 	sub.w	r3, r0, r8
 800675e:	fa09 f303 	lsl.w	r3, r9, r3
 8006762:	4313      	orrs	r3, r2
 8006764:	9304      	str	r3, [sp, #16]
 8006766:	46a2      	mov	sl, r4
 8006768:	e7d2      	b.n	8006710 <_svfiprintf_r+0xa0>
 800676a:	9b03      	ldr	r3, [sp, #12]
 800676c:	1d19      	adds	r1, r3, #4
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	9103      	str	r1, [sp, #12]
 8006772:	2b00      	cmp	r3, #0
 8006774:	bfbb      	ittet	lt
 8006776:	425b      	neglt	r3, r3
 8006778:	f042 0202 	orrlt.w	r2, r2, #2
 800677c:	9307      	strge	r3, [sp, #28]
 800677e:	9307      	strlt	r3, [sp, #28]
 8006780:	bfb8      	it	lt
 8006782:	9204      	strlt	r2, [sp, #16]
 8006784:	7823      	ldrb	r3, [r4, #0]
 8006786:	2b2e      	cmp	r3, #46	@ 0x2e
 8006788:	d10a      	bne.n	80067a0 <_svfiprintf_r+0x130>
 800678a:	7863      	ldrb	r3, [r4, #1]
 800678c:	2b2a      	cmp	r3, #42	@ 0x2a
 800678e:	d132      	bne.n	80067f6 <_svfiprintf_r+0x186>
 8006790:	9b03      	ldr	r3, [sp, #12]
 8006792:	1d1a      	adds	r2, r3, #4
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	9203      	str	r2, [sp, #12]
 8006798:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800679c:	3402      	adds	r4, #2
 800679e:	9305      	str	r3, [sp, #20]
 80067a0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006864 <_svfiprintf_r+0x1f4>
 80067a4:	7821      	ldrb	r1, [r4, #0]
 80067a6:	2203      	movs	r2, #3
 80067a8:	4650      	mov	r0, sl
 80067aa:	f7f9 fd51 	bl	8000250 <memchr>
 80067ae:	b138      	cbz	r0, 80067c0 <_svfiprintf_r+0x150>
 80067b0:	9b04      	ldr	r3, [sp, #16]
 80067b2:	eba0 000a 	sub.w	r0, r0, sl
 80067b6:	2240      	movs	r2, #64	@ 0x40
 80067b8:	4082      	lsls	r2, r0
 80067ba:	4313      	orrs	r3, r2
 80067bc:	3401      	adds	r4, #1
 80067be:	9304      	str	r3, [sp, #16]
 80067c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067c4:	4824      	ldr	r0, [pc, #144]	@ (8006858 <_svfiprintf_r+0x1e8>)
 80067c6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80067ca:	2206      	movs	r2, #6
 80067cc:	f7f9 fd40 	bl	8000250 <memchr>
 80067d0:	2800      	cmp	r0, #0
 80067d2:	d036      	beq.n	8006842 <_svfiprintf_r+0x1d2>
 80067d4:	4b21      	ldr	r3, [pc, #132]	@ (800685c <_svfiprintf_r+0x1ec>)
 80067d6:	bb1b      	cbnz	r3, 8006820 <_svfiprintf_r+0x1b0>
 80067d8:	9b03      	ldr	r3, [sp, #12]
 80067da:	3307      	adds	r3, #7
 80067dc:	f023 0307 	bic.w	r3, r3, #7
 80067e0:	3308      	adds	r3, #8
 80067e2:	9303      	str	r3, [sp, #12]
 80067e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067e6:	4433      	add	r3, r6
 80067e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80067ea:	e76a      	b.n	80066c2 <_svfiprintf_r+0x52>
 80067ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80067f0:	460c      	mov	r4, r1
 80067f2:	2001      	movs	r0, #1
 80067f4:	e7a8      	b.n	8006748 <_svfiprintf_r+0xd8>
 80067f6:	2300      	movs	r3, #0
 80067f8:	3401      	adds	r4, #1
 80067fa:	9305      	str	r3, [sp, #20]
 80067fc:	4619      	mov	r1, r3
 80067fe:	f04f 0c0a 	mov.w	ip, #10
 8006802:	4620      	mov	r0, r4
 8006804:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006808:	3a30      	subs	r2, #48	@ 0x30
 800680a:	2a09      	cmp	r2, #9
 800680c:	d903      	bls.n	8006816 <_svfiprintf_r+0x1a6>
 800680e:	2b00      	cmp	r3, #0
 8006810:	d0c6      	beq.n	80067a0 <_svfiprintf_r+0x130>
 8006812:	9105      	str	r1, [sp, #20]
 8006814:	e7c4      	b.n	80067a0 <_svfiprintf_r+0x130>
 8006816:	fb0c 2101 	mla	r1, ip, r1, r2
 800681a:	4604      	mov	r4, r0
 800681c:	2301      	movs	r3, #1
 800681e:	e7f0      	b.n	8006802 <_svfiprintf_r+0x192>
 8006820:	ab03      	add	r3, sp, #12
 8006822:	9300      	str	r3, [sp, #0]
 8006824:	462a      	mov	r2, r5
 8006826:	4b0e      	ldr	r3, [pc, #56]	@ (8006860 <_svfiprintf_r+0x1f0>)
 8006828:	a904      	add	r1, sp, #16
 800682a:	4638      	mov	r0, r7
 800682c:	f3af 8000 	nop.w
 8006830:	1c42      	adds	r2, r0, #1
 8006832:	4606      	mov	r6, r0
 8006834:	d1d6      	bne.n	80067e4 <_svfiprintf_r+0x174>
 8006836:	89ab      	ldrh	r3, [r5, #12]
 8006838:	065b      	lsls	r3, r3, #25
 800683a:	f53f af2d 	bmi.w	8006698 <_svfiprintf_r+0x28>
 800683e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006840:	e72c      	b.n	800669c <_svfiprintf_r+0x2c>
 8006842:	ab03      	add	r3, sp, #12
 8006844:	9300      	str	r3, [sp, #0]
 8006846:	462a      	mov	r2, r5
 8006848:	4b05      	ldr	r3, [pc, #20]	@ (8006860 <_svfiprintf_r+0x1f0>)
 800684a:	a904      	add	r1, sp, #16
 800684c:	4638      	mov	r0, r7
 800684e:	f000 f9bb 	bl	8006bc8 <_printf_i>
 8006852:	e7ed      	b.n	8006830 <_svfiprintf_r+0x1c0>
 8006854:	08007530 	.word	0x08007530
 8006858:	0800753a 	.word	0x0800753a
 800685c:	00000000 	.word	0x00000000
 8006860:	080065b9 	.word	0x080065b9
 8006864:	08007536 	.word	0x08007536

08006868 <__sfputc_r>:
 8006868:	6893      	ldr	r3, [r2, #8]
 800686a:	3b01      	subs	r3, #1
 800686c:	2b00      	cmp	r3, #0
 800686e:	b410      	push	{r4}
 8006870:	6093      	str	r3, [r2, #8]
 8006872:	da08      	bge.n	8006886 <__sfputc_r+0x1e>
 8006874:	6994      	ldr	r4, [r2, #24]
 8006876:	42a3      	cmp	r3, r4
 8006878:	db01      	blt.n	800687e <__sfputc_r+0x16>
 800687a:	290a      	cmp	r1, #10
 800687c:	d103      	bne.n	8006886 <__sfputc_r+0x1e>
 800687e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006882:	f000 bb6b 	b.w	8006f5c <__swbuf_r>
 8006886:	6813      	ldr	r3, [r2, #0]
 8006888:	1c58      	adds	r0, r3, #1
 800688a:	6010      	str	r0, [r2, #0]
 800688c:	7019      	strb	r1, [r3, #0]
 800688e:	4608      	mov	r0, r1
 8006890:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006894:	4770      	bx	lr

08006896 <__sfputs_r>:
 8006896:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006898:	4606      	mov	r6, r0
 800689a:	460f      	mov	r7, r1
 800689c:	4614      	mov	r4, r2
 800689e:	18d5      	adds	r5, r2, r3
 80068a0:	42ac      	cmp	r4, r5
 80068a2:	d101      	bne.n	80068a8 <__sfputs_r+0x12>
 80068a4:	2000      	movs	r0, #0
 80068a6:	e007      	b.n	80068b8 <__sfputs_r+0x22>
 80068a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068ac:	463a      	mov	r2, r7
 80068ae:	4630      	mov	r0, r6
 80068b0:	f7ff ffda 	bl	8006868 <__sfputc_r>
 80068b4:	1c43      	adds	r3, r0, #1
 80068b6:	d1f3      	bne.n	80068a0 <__sfputs_r+0xa>
 80068b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080068bc <_vfiprintf_r>:
 80068bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068c0:	460d      	mov	r5, r1
 80068c2:	b09d      	sub	sp, #116	@ 0x74
 80068c4:	4614      	mov	r4, r2
 80068c6:	4698      	mov	r8, r3
 80068c8:	4606      	mov	r6, r0
 80068ca:	b118      	cbz	r0, 80068d4 <_vfiprintf_r+0x18>
 80068cc:	6a03      	ldr	r3, [r0, #32]
 80068ce:	b90b      	cbnz	r3, 80068d4 <_vfiprintf_r+0x18>
 80068d0:	f7ff fc2a 	bl	8006128 <__sinit>
 80068d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80068d6:	07d9      	lsls	r1, r3, #31
 80068d8:	d405      	bmi.n	80068e6 <_vfiprintf_r+0x2a>
 80068da:	89ab      	ldrh	r3, [r5, #12]
 80068dc:	059a      	lsls	r2, r3, #22
 80068de:	d402      	bmi.n	80068e6 <_vfiprintf_r+0x2a>
 80068e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80068e2:	f7ff fd58 	bl	8006396 <__retarget_lock_acquire_recursive>
 80068e6:	89ab      	ldrh	r3, [r5, #12]
 80068e8:	071b      	lsls	r3, r3, #28
 80068ea:	d501      	bpl.n	80068f0 <_vfiprintf_r+0x34>
 80068ec:	692b      	ldr	r3, [r5, #16]
 80068ee:	b99b      	cbnz	r3, 8006918 <_vfiprintf_r+0x5c>
 80068f0:	4629      	mov	r1, r5
 80068f2:	4630      	mov	r0, r6
 80068f4:	f000 fb70 	bl	8006fd8 <__swsetup_r>
 80068f8:	b170      	cbz	r0, 8006918 <_vfiprintf_r+0x5c>
 80068fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80068fc:	07dc      	lsls	r4, r3, #31
 80068fe:	d504      	bpl.n	800690a <_vfiprintf_r+0x4e>
 8006900:	f04f 30ff 	mov.w	r0, #4294967295
 8006904:	b01d      	add	sp, #116	@ 0x74
 8006906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800690a:	89ab      	ldrh	r3, [r5, #12]
 800690c:	0598      	lsls	r0, r3, #22
 800690e:	d4f7      	bmi.n	8006900 <_vfiprintf_r+0x44>
 8006910:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006912:	f7ff fd41 	bl	8006398 <__retarget_lock_release_recursive>
 8006916:	e7f3      	b.n	8006900 <_vfiprintf_r+0x44>
 8006918:	2300      	movs	r3, #0
 800691a:	9309      	str	r3, [sp, #36]	@ 0x24
 800691c:	2320      	movs	r3, #32
 800691e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006922:	f8cd 800c 	str.w	r8, [sp, #12]
 8006926:	2330      	movs	r3, #48	@ 0x30
 8006928:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006ad8 <_vfiprintf_r+0x21c>
 800692c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006930:	f04f 0901 	mov.w	r9, #1
 8006934:	4623      	mov	r3, r4
 8006936:	469a      	mov	sl, r3
 8006938:	f813 2b01 	ldrb.w	r2, [r3], #1
 800693c:	b10a      	cbz	r2, 8006942 <_vfiprintf_r+0x86>
 800693e:	2a25      	cmp	r2, #37	@ 0x25
 8006940:	d1f9      	bne.n	8006936 <_vfiprintf_r+0x7a>
 8006942:	ebba 0b04 	subs.w	fp, sl, r4
 8006946:	d00b      	beq.n	8006960 <_vfiprintf_r+0xa4>
 8006948:	465b      	mov	r3, fp
 800694a:	4622      	mov	r2, r4
 800694c:	4629      	mov	r1, r5
 800694e:	4630      	mov	r0, r6
 8006950:	f7ff ffa1 	bl	8006896 <__sfputs_r>
 8006954:	3001      	adds	r0, #1
 8006956:	f000 80a7 	beq.w	8006aa8 <_vfiprintf_r+0x1ec>
 800695a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800695c:	445a      	add	r2, fp
 800695e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006960:	f89a 3000 	ldrb.w	r3, [sl]
 8006964:	2b00      	cmp	r3, #0
 8006966:	f000 809f 	beq.w	8006aa8 <_vfiprintf_r+0x1ec>
 800696a:	2300      	movs	r3, #0
 800696c:	f04f 32ff 	mov.w	r2, #4294967295
 8006970:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006974:	f10a 0a01 	add.w	sl, sl, #1
 8006978:	9304      	str	r3, [sp, #16]
 800697a:	9307      	str	r3, [sp, #28]
 800697c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006980:	931a      	str	r3, [sp, #104]	@ 0x68
 8006982:	4654      	mov	r4, sl
 8006984:	2205      	movs	r2, #5
 8006986:	f814 1b01 	ldrb.w	r1, [r4], #1
 800698a:	4853      	ldr	r0, [pc, #332]	@ (8006ad8 <_vfiprintf_r+0x21c>)
 800698c:	f7f9 fc60 	bl	8000250 <memchr>
 8006990:	9a04      	ldr	r2, [sp, #16]
 8006992:	b9d8      	cbnz	r0, 80069cc <_vfiprintf_r+0x110>
 8006994:	06d1      	lsls	r1, r2, #27
 8006996:	bf44      	itt	mi
 8006998:	2320      	movmi	r3, #32
 800699a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800699e:	0713      	lsls	r3, r2, #28
 80069a0:	bf44      	itt	mi
 80069a2:	232b      	movmi	r3, #43	@ 0x2b
 80069a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80069a8:	f89a 3000 	ldrb.w	r3, [sl]
 80069ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80069ae:	d015      	beq.n	80069dc <_vfiprintf_r+0x120>
 80069b0:	9a07      	ldr	r2, [sp, #28]
 80069b2:	4654      	mov	r4, sl
 80069b4:	2000      	movs	r0, #0
 80069b6:	f04f 0c0a 	mov.w	ip, #10
 80069ba:	4621      	mov	r1, r4
 80069bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80069c0:	3b30      	subs	r3, #48	@ 0x30
 80069c2:	2b09      	cmp	r3, #9
 80069c4:	d94b      	bls.n	8006a5e <_vfiprintf_r+0x1a2>
 80069c6:	b1b0      	cbz	r0, 80069f6 <_vfiprintf_r+0x13a>
 80069c8:	9207      	str	r2, [sp, #28]
 80069ca:	e014      	b.n	80069f6 <_vfiprintf_r+0x13a>
 80069cc:	eba0 0308 	sub.w	r3, r0, r8
 80069d0:	fa09 f303 	lsl.w	r3, r9, r3
 80069d4:	4313      	orrs	r3, r2
 80069d6:	9304      	str	r3, [sp, #16]
 80069d8:	46a2      	mov	sl, r4
 80069da:	e7d2      	b.n	8006982 <_vfiprintf_r+0xc6>
 80069dc:	9b03      	ldr	r3, [sp, #12]
 80069de:	1d19      	adds	r1, r3, #4
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	9103      	str	r1, [sp, #12]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	bfbb      	ittet	lt
 80069e8:	425b      	neglt	r3, r3
 80069ea:	f042 0202 	orrlt.w	r2, r2, #2
 80069ee:	9307      	strge	r3, [sp, #28]
 80069f0:	9307      	strlt	r3, [sp, #28]
 80069f2:	bfb8      	it	lt
 80069f4:	9204      	strlt	r2, [sp, #16]
 80069f6:	7823      	ldrb	r3, [r4, #0]
 80069f8:	2b2e      	cmp	r3, #46	@ 0x2e
 80069fa:	d10a      	bne.n	8006a12 <_vfiprintf_r+0x156>
 80069fc:	7863      	ldrb	r3, [r4, #1]
 80069fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a00:	d132      	bne.n	8006a68 <_vfiprintf_r+0x1ac>
 8006a02:	9b03      	ldr	r3, [sp, #12]
 8006a04:	1d1a      	adds	r2, r3, #4
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	9203      	str	r2, [sp, #12]
 8006a0a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006a0e:	3402      	adds	r4, #2
 8006a10:	9305      	str	r3, [sp, #20]
 8006a12:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006ae8 <_vfiprintf_r+0x22c>
 8006a16:	7821      	ldrb	r1, [r4, #0]
 8006a18:	2203      	movs	r2, #3
 8006a1a:	4650      	mov	r0, sl
 8006a1c:	f7f9 fc18 	bl	8000250 <memchr>
 8006a20:	b138      	cbz	r0, 8006a32 <_vfiprintf_r+0x176>
 8006a22:	9b04      	ldr	r3, [sp, #16]
 8006a24:	eba0 000a 	sub.w	r0, r0, sl
 8006a28:	2240      	movs	r2, #64	@ 0x40
 8006a2a:	4082      	lsls	r2, r0
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	3401      	adds	r4, #1
 8006a30:	9304      	str	r3, [sp, #16]
 8006a32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a36:	4829      	ldr	r0, [pc, #164]	@ (8006adc <_vfiprintf_r+0x220>)
 8006a38:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006a3c:	2206      	movs	r2, #6
 8006a3e:	f7f9 fc07 	bl	8000250 <memchr>
 8006a42:	2800      	cmp	r0, #0
 8006a44:	d03f      	beq.n	8006ac6 <_vfiprintf_r+0x20a>
 8006a46:	4b26      	ldr	r3, [pc, #152]	@ (8006ae0 <_vfiprintf_r+0x224>)
 8006a48:	bb1b      	cbnz	r3, 8006a92 <_vfiprintf_r+0x1d6>
 8006a4a:	9b03      	ldr	r3, [sp, #12]
 8006a4c:	3307      	adds	r3, #7
 8006a4e:	f023 0307 	bic.w	r3, r3, #7
 8006a52:	3308      	adds	r3, #8
 8006a54:	9303      	str	r3, [sp, #12]
 8006a56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a58:	443b      	add	r3, r7
 8006a5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a5c:	e76a      	b.n	8006934 <_vfiprintf_r+0x78>
 8006a5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a62:	460c      	mov	r4, r1
 8006a64:	2001      	movs	r0, #1
 8006a66:	e7a8      	b.n	80069ba <_vfiprintf_r+0xfe>
 8006a68:	2300      	movs	r3, #0
 8006a6a:	3401      	adds	r4, #1
 8006a6c:	9305      	str	r3, [sp, #20]
 8006a6e:	4619      	mov	r1, r3
 8006a70:	f04f 0c0a 	mov.w	ip, #10
 8006a74:	4620      	mov	r0, r4
 8006a76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a7a:	3a30      	subs	r2, #48	@ 0x30
 8006a7c:	2a09      	cmp	r2, #9
 8006a7e:	d903      	bls.n	8006a88 <_vfiprintf_r+0x1cc>
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d0c6      	beq.n	8006a12 <_vfiprintf_r+0x156>
 8006a84:	9105      	str	r1, [sp, #20]
 8006a86:	e7c4      	b.n	8006a12 <_vfiprintf_r+0x156>
 8006a88:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a8c:	4604      	mov	r4, r0
 8006a8e:	2301      	movs	r3, #1
 8006a90:	e7f0      	b.n	8006a74 <_vfiprintf_r+0x1b8>
 8006a92:	ab03      	add	r3, sp, #12
 8006a94:	9300      	str	r3, [sp, #0]
 8006a96:	462a      	mov	r2, r5
 8006a98:	4b12      	ldr	r3, [pc, #72]	@ (8006ae4 <_vfiprintf_r+0x228>)
 8006a9a:	a904      	add	r1, sp, #16
 8006a9c:	4630      	mov	r0, r6
 8006a9e:	f3af 8000 	nop.w
 8006aa2:	4607      	mov	r7, r0
 8006aa4:	1c78      	adds	r0, r7, #1
 8006aa6:	d1d6      	bne.n	8006a56 <_vfiprintf_r+0x19a>
 8006aa8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006aaa:	07d9      	lsls	r1, r3, #31
 8006aac:	d405      	bmi.n	8006aba <_vfiprintf_r+0x1fe>
 8006aae:	89ab      	ldrh	r3, [r5, #12]
 8006ab0:	059a      	lsls	r2, r3, #22
 8006ab2:	d402      	bmi.n	8006aba <_vfiprintf_r+0x1fe>
 8006ab4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006ab6:	f7ff fc6f 	bl	8006398 <__retarget_lock_release_recursive>
 8006aba:	89ab      	ldrh	r3, [r5, #12]
 8006abc:	065b      	lsls	r3, r3, #25
 8006abe:	f53f af1f 	bmi.w	8006900 <_vfiprintf_r+0x44>
 8006ac2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006ac4:	e71e      	b.n	8006904 <_vfiprintf_r+0x48>
 8006ac6:	ab03      	add	r3, sp, #12
 8006ac8:	9300      	str	r3, [sp, #0]
 8006aca:	462a      	mov	r2, r5
 8006acc:	4b05      	ldr	r3, [pc, #20]	@ (8006ae4 <_vfiprintf_r+0x228>)
 8006ace:	a904      	add	r1, sp, #16
 8006ad0:	4630      	mov	r0, r6
 8006ad2:	f000 f879 	bl	8006bc8 <_printf_i>
 8006ad6:	e7e4      	b.n	8006aa2 <_vfiprintf_r+0x1e6>
 8006ad8:	08007530 	.word	0x08007530
 8006adc:	0800753a 	.word	0x0800753a
 8006ae0:	00000000 	.word	0x00000000
 8006ae4:	08006897 	.word	0x08006897
 8006ae8:	08007536 	.word	0x08007536

08006aec <_printf_common>:
 8006aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006af0:	4616      	mov	r6, r2
 8006af2:	4698      	mov	r8, r3
 8006af4:	688a      	ldr	r2, [r1, #8]
 8006af6:	690b      	ldr	r3, [r1, #16]
 8006af8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006afc:	4293      	cmp	r3, r2
 8006afe:	bfb8      	it	lt
 8006b00:	4613      	movlt	r3, r2
 8006b02:	6033      	str	r3, [r6, #0]
 8006b04:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006b08:	4607      	mov	r7, r0
 8006b0a:	460c      	mov	r4, r1
 8006b0c:	b10a      	cbz	r2, 8006b12 <_printf_common+0x26>
 8006b0e:	3301      	adds	r3, #1
 8006b10:	6033      	str	r3, [r6, #0]
 8006b12:	6823      	ldr	r3, [r4, #0]
 8006b14:	0699      	lsls	r1, r3, #26
 8006b16:	bf42      	ittt	mi
 8006b18:	6833      	ldrmi	r3, [r6, #0]
 8006b1a:	3302      	addmi	r3, #2
 8006b1c:	6033      	strmi	r3, [r6, #0]
 8006b1e:	6825      	ldr	r5, [r4, #0]
 8006b20:	f015 0506 	ands.w	r5, r5, #6
 8006b24:	d106      	bne.n	8006b34 <_printf_common+0x48>
 8006b26:	f104 0a19 	add.w	sl, r4, #25
 8006b2a:	68e3      	ldr	r3, [r4, #12]
 8006b2c:	6832      	ldr	r2, [r6, #0]
 8006b2e:	1a9b      	subs	r3, r3, r2
 8006b30:	42ab      	cmp	r3, r5
 8006b32:	dc26      	bgt.n	8006b82 <_printf_common+0x96>
 8006b34:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006b38:	6822      	ldr	r2, [r4, #0]
 8006b3a:	3b00      	subs	r3, #0
 8006b3c:	bf18      	it	ne
 8006b3e:	2301      	movne	r3, #1
 8006b40:	0692      	lsls	r2, r2, #26
 8006b42:	d42b      	bmi.n	8006b9c <_printf_common+0xb0>
 8006b44:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006b48:	4641      	mov	r1, r8
 8006b4a:	4638      	mov	r0, r7
 8006b4c:	47c8      	blx	r9
 8006b4e:	3001      	adds	r0, #1
 8006b50:	d01e      	beq.n	8006b90 <_printf_common+0xa4>
 8006b52:	6823      	ldr	r3, [r4, #0]
 8006b54:	6922      	ldr	r2, [r4, #16]
 8006b56:	f003 0306 	and.w	r3, r3, #6
 8006b5a:	2b04      	cmp	r3, #4
 8006b5c:	bf02      	ittt	eq
 8006b5e:	68e5      	ldreq	r5, [r4, #12]
 8006b60:	6833      	ldreq	r3, [r6, #0]
 8006b62:	1aed      	subeq	r5, r5, r3
 8006b64:	68a3      	ldr	r3, [r4, #8]
 8006b66:	bf0c      	ite	eq
 8006b68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b6c:	2500      	movne	r5, #0
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	bfc4      	itt	gt
 8006b72:	1a9b      	subgt	r3, r3, r2
 8006b74:	18ed      	addgt	r5, r5, r3
 8006b76:	2600      	movs	r6, #0
 8006b78:	341a      	adds	r4, #26
 8006b7a:	42b5      	cmp	r5, r6
 8006b7c:	d11a      	bne.n	8006bb4 <_printf_common+0xc8>
 8006b7e:	2000      	movs	r0, #0
 8006b80:	e008      	b.n	8006b94 <_printf_common+0xa8>
 8006b82:	2301      	movs	r3, #1
 8006b84:	4652      	mov	r2, sl
 8006b86:	4641      	mov	r1, r8
 8006b88:	4638      	mov	r0, r7
 8006b8a:	47c8      	blx	r9
 8006b8c:	3001      	adds	r0, #1
 8006b8e:	d103      	bne.n	8006b98 <_printf_common+0xac>
 8006b90:	f04f 30ff 	mov.w	r0, #4294967295
 8006b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b98:	3501      	adds	r5, #1
 8006b9a:	e7c6      	b.n	8006b2a <_printf_common+0x3e>
 8006b9c:	18e1      	adds	r1, r4, r3
 8006b9e:	1c5a      	adds	r2, r3, #1
 8006ba0:	2030      	movs	r0, #48	@ 0x30
 8006ba2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006ba6:	4422      	add	r2, r4
 8006ba8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006bac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006bb0:	3302      	adds	r3, #2
 8006bb2:	e7c7      	b.n	8006b44 <_printf_common+0x58>
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	4622      	mov	r2, r4
 8006bb8:	4641      	mov	r1, r8
 8006bba:	4638      	mov	r0, r7
 8006bbc:	47c8      	blx	r9
 8006bbe:	3001      	adds	r0, #1
 8006bc0:	d0e6      	beq.n	8006b90 <_printf_common+0xa4>
 8006bc2:	3601      	adds	r6, #1
 8006bc4:	e7d9      	b.n	8006b7a <_printf_common+0x8e>
	...

08006bc8 <_printf_i>:
 8006bc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006bcc:	7e0f      	ldrb	r7, [r1, #24]
 8006bce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006bd0:	2f78      	cmp	r7, #120	@ 0x78
 8006bd2:	4691      	mov	r9, r2
 8006bd4:	4680      	mov	r8, r0
 8006bd6:	460c      	mov	r4, r1
 8006bd8:	469a      	mov	sl, r3
 8006bda:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006bde:	d807      	bhi.n	8006bf0 <_printf_i+0x28>
 8006be0:	2f62      	cmp	r7, #98	@ 0x62
 8006be2:	d80a      	bhi.n	8006bfa <_printf_i+0x32>
 8006be4:	2f00      	cmp	r7, #0
 8006be6:	f000 80d1 	beq.w	8006d8c <_printf_i+0x1c4>
 8006bea:	2f58      	cmp	r7, #88	@ 0x58
 8006bec:	f000 80b8 	beq.w	8006d60 <_printf_i+0x198>
 8006bf0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006bf4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006bf8:	e03a      	b.n	8006c70 <_printf_i+0xa8>
 8006bfa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006bfe:	2b15      	cmp	r3, #21
 8006c00:	d8f6      	bhi.n	8006bf0 <_printf_i+0x28>
 8006c02:	a101      	add	r1, pc, #4	@ (adr r1, 8006c08 <_printf_i+0x40>)
 8006c04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c08:	08006c61 	.word	0x08006c61
 8006c0c:	08006c75 	.word	0x08006c75
 8006c10:	08006bf1 	.word	0x08006bf1
 8006c14:	08006bf1 	.word	0x08006bf1
 8006c18:	08006bf1 	.word	0x08006bf1
 8006c1c:	08006bf1 	.word	0x08006bf1
 8006c20:	08006c75 	.word	0x08006c75
 8006c24:	08006bf1 	.word	0x08006bf1
 8006c28:	08006bf1 	.word	0x08006bf1
 8006c2c:	08006bf1 	.word	0x08006bf1
 8006c30:	08006bf1 	.word	0x08006bf1
 8006c34:	08006d73 	.word	0x08006d73
 8006c38:	08006c9f 	.word	0x08006c9f
 8006c3c:	08006d2d 	.word	0x08006d2d
 8006c40:	08006bf1 	.word	0x08006bf1
 8006c44:	08006bf1 	.word	0x08006bf1
 8006c48:	08006d95 	.word	0x08006d95
 8006c4c:	08006bf1 	.word	0x08006bf1
 8006c50:	08006c9f 	.word	0x08006c9f
 8006c54:	08006bf1 	.word	0x08006bf1
 8006c58:	08006bf1 	.word	0x08006bf1
 8006c5c:	08006d35 	.word	0x08006d35
 8006c60:	6833      	ldr	r3, [r6, #0]
 8006c62:	1d1a      	adds	r2, r3, #4
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	6032      	str	r2, [r6, #0]
 8006c68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006c6c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006c70:	2301      	movs	r3, #1
 8006c72:	e09c      	b.n	8006dae <_printf_i+0x1e6>
 8006c74:	6833      	ldr	r3, [r6, #0]
 8006c76:	6820      	ldr	r0, [r4, #0]
 8006c78:	1d19      	adds	r1, r3, #4
 8006c7a:	6031      	str	r1, [r6, #0]
 8006c7c:	0606      	lsls	r6, r0, #24
 8006c7e:	d501      	bpl.n	8006c84 <_printf_i+0xbc>
 8006c80:	681d      	ldr	r5, [r3, #0]
 8006c82:	e003      	b.n	8006c8c <_printf_i+0xc4>
 8006c84:	0645      	lsls	r5, r0, #25
 8006c86:	d5fb      	bpl.n	8006c80 <_printf_i+0xb8>
 8006c88:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006c8c:	2d00      	cmp	r5, #0
 8006c8e:	da03      	bge.n	8006c98 <_printf_i+0xd0>
 8006c90:	232d      	movs	r3, #45	@ 0x2d
 8006c92:	426d      	negs	r5, r5
 8006c94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c98:	4858      	ldr	r0, [pc, #352]	@ (8006dfc <_printf_i+0x234>)
 8006c9a:	230a      	movs	r3, #10
 8006c9c:	e011      	b.n	8006cc2 <_printf_i+0xfa>
 8006c9e:	6821      	ldr	r1, [r4, #0]
 8006ca0:	6833      	ldr	r3, [r6, #0]
 8006ca2:	0608      	lsls	r0, r1, #24
 8006ca4:	f853 5b04 	ldr.w	r5, [r3], #4
 8006ca8:	d402      	bmi.n	8006cb0 <_printf_i+0xe8>
 8006caa:	0649      	lsls	r1, r1, #25
 8006cac:	bf48      	it	mi
 8006cae:	b2ad      	uxthmi	r5, r5
 8006cb0:	2f6f      	cmp	r7, #111	@ 0x6f
 8006cb2:	4852      	ldr	r0, [pc, #328]	@ (8006dfc <_printf_i+0x234>)
 8006cb4:	6033      	str	r3, [r6, #0]
 8006cb6:	bf14      	ite	ne
 8006cb8:	230a      	movne	r3, #10
 8006cba:	2308      	moveq	r3, #8
 8006cbc:	2100      	movs	r1, #0
 8006cbe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006cc2:	6866      	ldr	r6, [r4, #4]
 8006cc4:	60a6      	str	r6, [r4, #8]
 8006cc6:	2e00      	cmp	r6, #0
 8006cc8:	db05      	blt.n	8006cd6 <_printf_i+0x10e>
 8006cca:	6821      	ldr	r1, [r4, #0]
 8006ccc:	432e      	orrs	r6, r5
 8006cce:	f021 0104 	bic.w	r1, r1, #4
 8006cd2:	6021      	str	r1, [r4, #0]
 8006cd4:	d04b      	beq.n	8006d6e <_printf_i+0x1a6>
 8006cd6:	4616      	mov	r6, r2
 8006cd8:	fbb5 f1f3 	udiv	r1, r5, r3
 8006cdc:	fb03 5711 	mls	r7, r3, r1, r5
 8006ce0:	5dc7      	ldrb	r7, [r0, r7]
 8006ce2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006ce6:	462f      	mov	r7, r5
 8006ce8:	42bb      	cmp	r3, r7
 8006cea:	460d      	mov	r5, r1
 8006cec:	d9f4      	bls.n	8006cd8 <_printf_i+0x110>
 8006cee:	2b08      	cmp	r3, #8
 8006cf0:	d10b      	bne.n	8006d0a <_printf_i+0x142>
 8006cf2:	6823      	ldr	r3, [r4, #0]
 8006cf4:	07df      	lsls	r7, r3, #31
 8006cf6:	d508      	bpl.n	8006d0a <_printf_i+0x142>
 8006cf8:	6923      	ldr	r3, [r4, #16]
 8006cfa:	6861      	ldr	r1, [r4, #4]
 8006cfc:	4299      	cmp	r1, r3
 8006cfe:	bfde      	ittt	le
 8006d00:	2330      	movle	r3, #48	@ 0x30
 8006d02:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006d06:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006d0a:	1b92      	subs	r2, r2, r6
 8006d0c:	6122      	str	r2, [r4, #16]
 8006d0e:	f8cd a000 	str.w	sl, [sp]
 8006d12:	464b      	mov	r3, r9
 8006d14:	aa03      	add	r2, sp, #12
 8006d16:	4621      	mov	r1, r4
 8006d18:	4640      	mov	r0, r8
 8006d1a:	f7ff fee7 	bl	8006aec <_printf_common>
 8006d1e:	3001      	adds	r0, #1
 8006d20:	d14a      	bne.n	8006db8 <_printf_i+0x1f0>
 8006d22:	f04f 30ff 	mov.w	r0, #4294967295
 8006d26:	b004      	add	sp, #16
 8006d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d2c:	6823      	ldr	r3, [r4, #0]
 8006d2e:	f043 0320 	orr.w	r3, r3, #32
 8006d32:	6023      	str	r3, [r4, #0]
 8006d34:	4832      	ldr	r0, [pc, #200]	@ (8006e00 <_printf_i+0x238>)
 8006d36:	2778      	movs	r7, #120	@ 0x78
 8006d38:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006d3c:	6823      	ldr	r3, [r4, #0]
 8006d3e:	6831      	ldr	r1, [r6, #0]
 8006d40:	061f      	lsls	r7, r3, #24
 8006d42:	f851 5b04 	ldr.w	r5, [r1], #4
 8006d46:	d402      	bmi.n	8006d4e <_printf_i+0x186>
 8006d48:	065f      	lsls	r7, r3, #25
 8006d4a:	bf48      	it	mi
 8006d4c:	b2ad      	uxthmi	r5, r5
 8006d4e:	6031      	str	r1, [r6, #0]
 8006d50:	07d9      	lsls	r1, r3, #31
 8006d52:	bf44      	itt	mi
 8006d54:	f043 0320 	orrmi.w	r3, r3, #32
 8006d58:	6023      	strmi	r3, [r4, #0]
 8006d5a:	b11d      	cbz	r5, 8006d64 <_printf_i+0x19c>
 8006d5c:	2310      	movs	r3, #16
 8006d5e:	e7ad      	b.n	8006cbc <_printf_i+0xf4>
 8006d60:	4826      	ldr	r0, [pc, #152]	@ (8006dfc <_printf_i+0x234>)
 8006d62:	e7e9      	b.n	8006d38 <_printf_i+0x170>
 8006d64:	6823      	ldr	r3, [r4, #0]
 8006d66:	f023 0320 	bic.w	r3, r3, #32
 8006d6a:	6023      	str	r3, [r4, #0]
 8006d6c:	e7f6      	b.n	8006d5c <_printf_i+0x194>
 8006d6e:	4616      	mov	r6, r2
 8006d70:	e7bd      	b.n	8006cee <_printf_i+0x126>
 8006d72:	6833      	ldr	r3, [r6, #0]
 8006d74:	6825      	ldr	r5, [r4, #0]
 8006d76:	6961      	ldr	r1, [r4, #20]
 8006d78:	1d18      	adds	r0, r3, #4
 8006d7a:	6030      	str	r0, [r6, #0]
 8006d7c:	062e      	lsls	r6, r5, #24
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	d501      	bpl.n	8006d86 <_printf_i+0x1be>
 8006d82:	6019      	str	r1, [r3, #0]
 8006d84:	e002      	b.n	8006d8c <_printf_i+0x1c4>
 8006d86:	0668      	lsls	r0, r5, #25
 8006d88:	d5fb      	bpl.n	8006d82 <_printf_i+0x1ba>
 8006d8a:	8019      	strh	r1, [r3, #0]
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	6123      	str	r3, [r4, #16]
 8006d90:	4616      	mov	r6, r2
 8006d92:	e7bc      	b.n	8006d0e <_printf_i+0x146>
 8006d94:	6833      	ldr	r3, [r6, #0]
 8006d96:	1d1a      	adds	r2, r3, #4
 8006d98:	6032      	str	r2, [r6, #0]
 8006d9a:	681e      	ldr	r6, [r3, #0]
 8006d9c:	6862      	ldr	r2, [r4, #4]
 8006d9e:	2100      	movs	r1, #0
 8006da0:	4630      	mov	r0, r6
 8006da2:	f7f9 fa55 	bl	8000250 <memchr>
 8006da6:	b108      	cbz	r0, 8006dac <_printf_i+0x1e4>
 8006da8:	1b80      	subs	r0, r0, r6
 8006daa:	6060      	str	r0, [r4, #4]
 8006dac:	6863      	ldr	r3, [r4, #4]
 8006dae:	6123      	str	r3, [r4, #16]
 8006db0:	2300      	movs	r3, #0
 8006db2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006db6:	e7aa      	b.n	8006d0e <_printf_i+0x146>
 8006db8:	6923      	ldr	r3, [r4, #16]
 8006dba:	4632      	mov	r2, r6
 8006dbc:	4649      	mov	r1, r9
 8006dbe:	4640      	mov	r0, r8
 8006dc0:	47d0      	blx	sl
 8006dc2:	3001      	adds	r0, #1
 8006dc4:	d0ad      	beq.n	8006d22 <_printf_i+0x15a>
 8006dc6:	6823      	ldr	r3, [r4, #0]
 8006dc8:	079b      	lsls	r3, r3, #30
 8006dca:	d413      	bmi.n	8006df4 <_printf_i+0x22c>
 8006dcc:	68e0      	ldr	r0, [r4, #12]
 8006dce:	9b03      	ldr	r3, [sp, #12]
 8006dd0:	4298      	cmp	r0, r3
 8006dd2:	bfb8      	it	lt
 8006dd4:	4618      	movlt	r0, r3
 8006dd6:	e7a6      	b.n	8006d26 <_printf_i+0x15e>
 8006dd8:	2301      	movs	r3, #1
 8006dda:	4632      	mov	r2, r6
 8006ddc:	4649      	mov	r1, r9
 8006dde:	4640      	mov	r0, r8
 8006de0:	47d0      	blx	sl
 8006de2:	3001      	adds	r0, #1
 8006de4:	d09d      	beq.n	8006d22 <_printf_i+0x15a>
 8006de6:	3501      	adds	r5, #1
 8006de8:	68e3      	ldr	r3, [r4, #12]
 8006dea:	9903      	ldr	r1, [sp, #12]
 8006dec:	1a5b      	subs	r3, r3, r1
 8006dee:	42ab      	cmp	r3, r5
 8006df0:	dcf2      	bgt.n	8006dd8 <_printf_i+0x210>
 8006df2:	e7eb      	b.n	8006dcc <_printf_i+0x204>
 8006df4:	2500      	movs	r5, #0
 8006df6:	f104 0619 	add.w	r6, r4, #25
 8006dfa:	e7f5      	b.n	8006de8 <_printf_i+0x220>
 8006dfc:	08007541 	.word	0x08007541
 8006e00:	08007552 	.word	0x08007552

08006e04 <__sflush_r>:
 8006e04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e0c:	0716      	lsls	r6, r2, #28
 8006e0e:	4605      	mov	r5, r0
 8006e10:	460c      	mov	r4, r1
 8006e12:	d454      	bmi.n	8006ebe <__sflush_r+0xba>
 8006e14:	684b      	ldr	r3, [r1, #4]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	dc02      	bgt.n	8006e20 <__sflush_r+0x1c>
 8006e1a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	dd48      	ble.n	8006eb2 <__sflush_r+0xae>
 8006e20:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006e22:	2e00      	cmp	r6, #0
 8006e24:	d045      	beq.n	8006eb2 <__sflush_r+0xae>
 8006e26:	2300      	movs	r3, #0
 8006e28:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006e2c:	682f      	ldr	r7, [r5, #0]
 8006e2e:	6a21      	ldr	r1, [r4, #32]
 8006e30:	602b      	str	r3, [r5, #0]
 8006e32:	d030      	beq.n	8006e96 <__sflush_r+0x92>
 8006e34:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006e36:	89a3      	ldrh	r3, [r4, #12]
 8006e38:	0759      	lsls	r1, r3, #29
 8006e3a:	d505      	bpl.n	8006e48 <__sflush_r+0x44>
 8006e3c:	6863      	ldr	r3, [r4, #4]
 8006e3e:	1ad2      	subs	r2, r2, r3
 8006e40:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006e42:	b10b      	cbz	r3, 8006e48 <__sflush_r+0x44>
 8006e44:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006e46:	1ad2      	subs	r2, r2, r3
 8006e48:	2300      	movs	r3, #0
 8006e4a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006e4c:	6a21      	ldr	r1, [r4, #32]
 8006e4e:	4628      	mov	r0, r5
 8006e50:	47b0      	blx	r6
 8006e52:	1c43      	adds	r3, r0, #1
 8006e54:	89a3      	ldrh	r3, [r4, #12]
 8006e56:	d106      	bne.n	8006e66 <__sflush_r+0x62>
 8006e58:	6829      	ldr	r1, [r5, #0]
 8006e5a:	291d      	cmp	r1, #29
 8006e5c:	d82b      	bhi.n	8006eb6 <__sflush_r+0xb2>
 8006e5e:	4a2a      	ldr	r2, [pc, #168]	@ (8006f08 <__sflush_r+0x104>)
 8006e60:	40ca      	lsrs	r2, r1
 8006e62:	07d6      	lsls	r6, r2, #31
 8006e64:	d527      	bpl.n	8006eb6 <__sflush_r+0xb2>
 8006e66:	2200      	movs	r2, #0
 8006e68:	6062      	str	r2, [r4, #4]
 8006e6a:	04d9      	lsls	r1, r3, #19
 8006e6c:	6922      	ldr	r2, [r4, #16]
 8006e6e:	6022      	str	r2, [r4, #0]
 8006e70:	d504      	bpl.n	8006e7c <__sflush_r+0x78>
 8006e72:	1c42      	adds	r2, r0, #1
 8006e74:	d101      	bne.n	8006e7a <__sflush_r+0x76>
 8006e76:	682b      	ldr	r3, [r5, #0]
 8006e78:	b903      	cbnz	r3, 8006e7c <__sflush_r+0x78>
 8006e7a:	6560      	str	r0, [r4, #84]	@ 0x54
 8006e7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006e7e:	602f      	str	r7, [r5, #0]
 8006e80:	b1b9      	cbz	r1, 8006eb2 <__sflush_r+0xae>
 8006e82:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006e86:	4299      	cmp	r1, r3
 8006e88:	d002      	beq.n	8006e90 <__sflush_r+0x8c>
 8006e8a:	4628      	mov	r0, r5
 8006e8c:	f7ff fa9c 	bl	80063c8 <_free_r>
 8006e90:	2300      	movs	r3, #0
 8006e92:	6363      	str	r3, [r4, #52]	@ 0x34
 8006e94:	e00d      	b.n	8006eb2 <__sflush_r+0xae>
 8006e96:	2301      	movs	r3, #1
 8006e98:	4628      	mov	r0, r5
 8006e9a:	47b0      	blx	r6
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	1c50      	adds	r0, r2, #1
 8006ea0:	d1c9      	bne.n	8006e36 <__sflush_r+0x32>
 8006ea2:	682b      	ldr	r3, [r5, #0]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d0c6      	beq.n	8006e36 <__sflush_r+0x32>
 8006ea8:	2b1d      	cmp	r3, #29
 8006eaa:	d001      	beq.n	8006eb0 <__sflush_r+0xac>
 8006eac:	2b16      	cmp	r3, #22
 8006eae:	d11e      	bne.n	8006eee <__sflush_r+0xea>
 8006eb0:	602f      	str	r7, [r5, #0]
 8006eb2:	2000      	movs	r0, #0
 8006eb4:	e022      	b.n	8006efc <__sflush_r+0xf8>
 8006eb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006eba:	b21b      	sxth	r3, r3
 8006ebc:	e01b      	b.n	8006ef6 <__sflush_r+0xf2>
 8006ebe:	690f      	ldr	r7, [r1, #16]
 8006ec0:	2f00      	cmp	r7, #0
 8006ec2:	d0f6      	beq.n	8006eb2 <__sflush_r+0xae>
 8006ec4:	0793      	lsls	r3, r2, #30
 8006ec6:	680e      	ldr	r6, [r1, #0]
 8006ec8:	bf08      	it	eq
 8006eca:	694b      	ldreq	r3, [r1, #20]
 8006ecc:	600f      	str	r7, [r1, #0]
 8006ece:	bf18      	it	ne
 8006ed0:	2300      	movne	r3, #0
 8006ed2:	eba6 0807 	sub.w	r8, r6, r7
 8006ed6:	608b      	str	r3, [r1, #8]
 8006ed8:	f1b8 0f00 	cmp.w	r8, #0
 8006edc:	dde9      	ble.n	8006eb2 <__sflush_r+0xae>
 8006ede:	6a21      	ldr	r1, [r4, #32]
 8006ee0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006ee2:	4643      	mov	r3, r8
 8006ee4:	463a      	mov	r2, r7
 8006ee6:	4628      	mov	r0, r5
 8006ee8:	47b0      	blx	r6
 8006eea:	2800      	cmp	r0, #0
 8006eec:	dc08      	bgt.n	8006f00 <__sflush_r+0xfc>
 8006eee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ef2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ef6:	81a3      	strh	r3, [r4, #12]
 8006ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8006efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f00:	4407      	add	r7, r0
 8006f02:	eba8 0800 	sub.w	r8, r8, r0
 8006f06:	e7e7      	b.n	8006ed8 <__sflush_r+0xd4>
 8006f08:	20400001 	.word	0x20400001

08006f0c <_fflush_r>:
 8006f0c:	b538      	push	{r3, r4, r5, lr}
 8006f0e:	690b      	ldr	r3, [r1, #16]
 8006f10:	4605      	mov	r5, r0
 8006f12:	460c      	mov	r4, r1
 8006f14:	b913      	cbnz	r3, 8006f1c <_fflush_r+0x10>
 8006f16:	2500      	movs	r5, #0
 8006f18:	4628      	mov	r0, r5
 8006f1a:	bd38      	pop	{r3, r4, r5, pc}
 8006f1c:	b118      	cbz	r0, 8006f26 <_fflush_r+0x1a>
 8006f1e:	6a03      	ldr	r3, [r0, #32]
 8006f20:	b90b      	cbnz	r3, 8006f26 <_fflush_r+0x1a>
 8006f22:	f7ff f901 	bl	8006128 <__sinit>
 8006f26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d0f3      	beq.n	8006f16 <_fflush_r+0xa>
 8006f2e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006f30:	07d0      	lsls	r0, r2, #31
 8006f32:	d404      	bmi.n	8006f3e <_fflush_r+0x32>
 8006f34:	0599      	lsls	r1, r3, #22
 8006f36:	d402      	bmi.n	8006f3e <_fflush_r+0x32>
 8006f38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f3a:	f7ff fa2c 	bl	8006396 <__retarget_lock_acquire_recursive>
 8006f3e:	4628      	mov	r0, r5
 8006f40:	4621      	mov	r1, r4
 8006f42:	f7ff ff5f 	bl	8006e04 <__sflush_r>
 8006f46:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006f48:	07da      	lsls	r2, r3, #31
 8006f4a:	4605      	mov	r5, r0
 8006f4c:	d4e4      	bmi.n	8006f18 <_fflush_r+0xc>
 8006f4e:	89a3      	ldrh	r3, [r4, #12]
 8006f50:	059b      	lsls	r3, r3, #22
 8006f52:	d4e1      	bmi.n	8006f18 <_fflush_r+0xc>
 8006f54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f56:	f7ff fa1f 	bl	8006398 <__retarget_lock_release_recursive>
 8006f5a:	e7dd      	b.n	8006f18 <_fflush_r+0xc>

08006f5c <__swbuf_r>:
 8006f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f5e:	460e      	mov	r6, r1
 8006f60:	4614      	mov	r4, r2
 8006f62:	4605      	mov	r5, r0
 8006f64:	b118      	cbz	r0, 8006f6e <__swbuf_r+0x12>
 8006f66:	6a03      	ldr	r3, [r0, #32]
 8006f68:	b90b      	cbnz	r3, 8006f6e <__swbuf_r+0x12>
 8006f6a:	f7ff f8dd 	bl	8006128 <__sinit>
 8006f6e:	69a3      	ldr	r3, [r4, #24]
 8006f70:	60a3      	str	r3, [r4, #8]
 8006f72:	89a3      	ldrh	r3, [r4, #12]
 8006f74:	071a      	lsls	r2, r3, #28
 8006f76:	d501      	bpl.n	8006f7c <__swbuf_r+0x20>
 8006f78:	6923      	ldr	r3, [r4, #16]
 8006f7a:	b943      	cbnz	r3, 8006f8e <__swbuf_r+0x32>
 8006f7c:	4621      	mov	r1, r4
 8006f7e:	4628      	mov	r0, r5
 8006f80:	f000 f82a 	bl	8006fd8 <__swsetup_r>
 8006f84:	b118      	cbz	r0, 8006f8e <__swbuf_r+0x32>
 8006f86:	f04f 37ff 	mov.w	r7, #4294967295
 8006f8a:	4638      	mov	r0, r7
 8006f8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f8e:	6823      	ldr	r3, [r4, #0]
 8006f90:	6922      	ldr	r2, [r4, #16]
 8006f92:	1a98      	subs	r0, r3, r2
 8006f94:	6963      	ldr	r3, [r4, #20]
 8006f96:	b2f6      	uxtb	r6, r6
 8006f98:	4283      	cmp	r3, r0
 8006f9a:	4637      	mov	r7, r6
 8006f9c:	dc05      	bgt.n	8006faa <__swbuf_r+0x4e>
 8006f9e:	4621      	mov	r1, r4
 8006fa0:	4628      	mov	r0, r5
 8006fa2:	f7ff ffb3 	bl	8006f0c <_fflush_r>
 8006fa6:	2800      	cmp	r0, #0
 8006fa8:	d1ed      	bne.n	8006f86 <__swbuf_r+0x2a>
 8006faa:	68a3      	ldr	r3, [r4, #8]
 8006fac:	3b01      	subs	r3, #1
 8006fae:	60a3      	str	r3, [r4, #8]
 8006fb0:	6823      	ldr	r3, [r4, #0]
 8006fb2:	1c5a      	adds	r2, r3, #1
 8006fb4:	6022      	str	r2, [r4, #0]
 8006fb6:	701e      	strb	r6, [r3, #0]
 8006fb8:	6962      	ldr	r2, [r4, #20]
 8006fba:	1c43      	adds	r3, r0, #1
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	d004      	beq.n	8006fca <__swbuf_r+0x6e>
 8006fc0:	89a3      	ldrh	r3, [r4, #12]
 8006fc2:	07db      	lsls	r3, r3, #31
 8006fc4:	d5e1      	bpl.n	8006f8a <__swbuf_r+0x2e>
 8006fc6:	2e0a      	cmp	r6, #10
 8006fc8:	d1df      	bne.n	8006f8a <__swbuf_r+0x2e>
 8006fca:	4621      	mov	r1, r4
 8006fcc:	4628      	mov	r0, r5
 8006fce:	f7ff ff9d 	bl	8006f0c <_fflush_r>
 8006fd2:	2800      	cmp	r0, #0
 8006fd4:	d0d9      	beq.n	8006f8a <__swbuf_r+0x2e>
 8006fd6:	e7d6      	b.n	8006f86 <__swbuf_r+0x2a>

08006fd8 <__swsetup_r>:
 8006fd8:	b538      	push	{r3, r4, r5, lr}
 8006fda:	4b29      	ldr	r3, [pc, #164]	@ (8007080 <__swsetup_r+0xa8>)
 8006fdc:	4605      	mov	r5, r0
 8006fde:	6818      	ldr	r0, [r3, #0]
 8006fe0:	460c      	mov	r4, r1
 8006fe2:	b118      	cbz	r0, 8006fec <__swsetup_r+0x14>
 8006fe4:	6a03      	ldr	r3, [r0, #32]
 8006fe6:	b90b      	cbnz	r3, 8006fec <__swsetup_r+0x14>
 8006fe8:	f7ff f89e 	bl	8006128 <__sinit>
 8006fec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ff0:	0719      	lsls	r1, r3, #28
 8006ff2:	d422      	bmi.n	800703a <__swsetup_r+0x62>
 8006ff4:	06da      	lsls	r2, r3, #27
 8006ff6:	d407      	bmi.n	8007008 <__swsetup_r+0x30>
 8006ff8:	2209      	movs	r2, #9
 8006ffa:	602a      	str	r2, [r5, #0]
 8006ffc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007000:	81a3      	strh	r3, [r4, #12]
 8007002:	f04f 30ff 	mov.w	r0, #4294967295
 8007006:	e033      	b.n	8007070 <__swsetup_r+0x98>
 8007008:	0758      	lsls	r0, r3, #29
 800700a:	d512      	bpl.n	8007032 <__swsetup_r+0x5a>
 800700c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800700e:	b141      	cbz	r1, 8007022 <__swsetup_r+0x4a>
 8007010:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007014:	4299      	cmp	r1, r3
 8007016:	d002      	beq.n	800701e <__swsetup_r+0x46>
 8007018:	4628      	mov	r0, r5
 800701a:	f7ff f9d5 	bl	80063c8 <_free_r>
 800701e:	2300      	movs	r3, #0
 8007020:	6363      	str	r3, [r4, #52]	@ 0x34
 8007022:	89a3      	ldrh	r3, [r4, #12]
 8007024:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007028:	81a3      	strh	r3, [r4, #12]
 800702a:	2300      	movs	r3, #0
 800702c:	6063      	str	r3, [r4, #4]
 800702e:	6923      	ldr	r3, [r4, #16]
 8007030:	6023      	str	r3, [r4, #0]
 8007032:	89a3      	ldrh	r3, [r4, #12]
 8007034:	f043 0308 	orr.w	r3, r3, #8
 8007038:	81a3      	strh	r3, [r4, #12]
 800703a:	6923      	ldr	r3, [r4, #16]
 800703c:	b94b      	cbnz	r3, 8007052 <__swsetup_r+0x7a>
 800703e:	89a3      	ldrh	r3, [r4, #12]
 8007040:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007044:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007048:	d003      	beq.n	8007052 <__swsetup_r+0x7a>
 800704a:	4621      	mov	r1, r4
 800704c:	4628      	mov	r0, r5
 800704e:	f000 f897 	bl	8007180 <__smakebuf_r>
 8007052:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007056:	f013 0201 	ands.w	r2, r3, #1
 800705a:	d00a      	beq.n	8007072 <__swsetup_r+0x9a>
 800705c:	2200      	movs	r2, #0
 800705e:	60a2      	str	r2, [r4, #8]
 8007060:	6962      	ldr	r2, [r4, #20]
 8007062:	4252      	negs	r2, r2
 8007064:	61a2      	str	r2, [r4, #24]
 8007066:	6922      	ldr	r2, [r4, #16]
 8007068:	b942      	cbnz	r2, 800707c <__swsetup_r+0xa4>
 800706a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800706e:	d1c5      	bne.n	8006ffc <__swsetup_r+0x24>
 8007070:	bd38      	pop	{r3, r4, r5, pc}
 8007072:	0799      	lsls	r1, r3, #30
 8007074:	bf58      	it	pl
 8007076:	6962      	ldrpl	r2, [r4, #20]
 8007078:	60a2      	str	r2, [r4, #8]
 800707a:	e7f4      	b.n	8007066 <__swsetup_r+0x8e>
 800707c:	2000      	movs	r0, #0
 800707e:	e7f7      	b.n	8007070 <__swsetup_r+0x98>
 8007080:	20000020 	.word	0x20000020

08007084 <memmove>:
 8007084:	4288      	cmp	r0, r1
 8007086:	b510      	push	{r4, lr}
 8007088:	eb01 0402 	add.w	r4, r1, r2
 800708c:	d902      	bls.n	8007094 <memmove+0x10>
 800708e:	4284      	cmp	r4, r0
 8007090:	4623      	mov	r3, r4
 8007092:	d807      	bhi.n	80070a4 <memmove+0x20>
 8007094:	1e43      	subs	r3, r0, #1
 8007096:	42a1      	cmp	r1, r4
 8007098:	d008      	beq.n	80070ac <memmove+0x28>
 800709a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800709e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80070a2:	e7f8      	b.n	8007096 <memmove+0x12>
 80070a4:	4402      	add	r2, r0
 80070a6:	4601      	mov	r1, r0
 80070a8:	428a      	cmp	r2, r1
 80070aa:	d100      	bne.n	80070ae <memmove+0x2a>
 80070ac:	bd10      	pop	{r4, pc}
 80070ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80070b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80070b6:	e7f7      	b.n	80070a8 <memmove+0x24>

080070b8 <_sbrk_r>:
 80070b8:	b538      	push	{r3, r4, r5, lr}
 80070ba:	4d06      	ldr	r5, [pc, #24]	@ (80070d4 <_sbrk_r+0x1c>)
 80070bc:	2300      	movs	r3, #0
 80070be:	4604      	mov	r4, r0
 80070c0:	4608      	mov	r0, r1
 80070c2:	602b      	str	r3, [r5, #0]
 80070c4:	f7fb fa22 	bl	800250c <_sbrk>
 80070c8:	1c43      	adds	r3, r0, #1
 80070ca:	d102      	bne.n	80070d2 <_sbrk_r+0x1a>
 80070cc:	682b      	ldr	r3, [r5, #0]
 80070ce:	b103      	cbz	r3, 80070d2 <_sbrk_r+0x1a>
 80070d0:	6023      	str	r3, [r4, #0]
 80070d2:	bd38      	pop	{r3, r4, r5, pc}
 80070d4:	2000042c 	.word	0x2000042c

080070d8 <_realloc_r>:
 80070d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070dc:	4607      	mov	r7, r0
 80070de:	4614      	mov	r4, r2
 80070e0:	460d      	mov	r5, r1
 80070e2:	b921      	cbnz	r1, 80070ee <_realloc_r+0x16>
 80070e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070e8:	4611      	mov	r1, r2
 80070ea:	f7ff b9d9 	b.w	80064a0 <_malloc_r>
 80070ee:	b92a      	cbnz	r2, 80070fc <_realloc_r+0x24>
 80070f0:	f7ff f96a 	bl	80063c8 <_free_r>
 80070f4:	4625      	mov	r5, r4
 80070f6:	4628      	mov	r0, r5
 80070f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070fc:	f000 f89e 	bl	800723c <_malloc_usable_size_r>
 8007100:	4284      	cmp	r4, r0
 8007102:	4606      	mov	r6, r0
 8007104:	d802      	bhi.n	800710c <_realloc_r+0x34>
 8007106:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800710a:	d8f4      	bhi.n	80070f6 <_realloc_r+0x1e>
 800710c:	4621      	mov	r1, r4
 800710e:	4638      	mov	r0, r7
 8007110:	f7ff f9c6 	bl	80064a0 <_malloc_r>
 8007114:	4680      	mov	r8, r0
 8007116:	b908      	cbnz	r0, 800711c <_realloc_r+0x44>
 8007118:	4645      	mov	r5, r8
 800711a:	e7ec      	b.n	80070f6 <_realloc_r+0x1e>
 800711c:	42b4      	cmp	r4, r6
 800711e:	4622      	mov	r2, r4
 8007120:	4629      	mov	r1, r5
 8007122:	bf28      	it	cs
 8007124:	4632      	movcs	r2, r6
 8007126:	f7ff f940 	bl	80063aa <memcpy>
 800712a:	4629      	mov	r1, r5
 800712c:	4638      	mov	r0, r7
 800712e:	f7ff f94b 	bl	80063c8 <_free_r>
 8007132:	e7f1      	b.n	8007118 <_realloc_r+0x40>

08007134 <__swhatbuf_r>:
 8007134:	b570      	push	{r4, r5, r6, lr}
 8007136:	460c      	mov	r4, r1
 8007138:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800713c:	2900      	cmp	r1, #0
 800713e:	b096      	sub	sp, #88	@ 0x58
 8007140:	4615      	mov	r5, r2
 8007142:	461e      	mov	r6, r3
 8007144:	da0d      	bge.n	8007162 <__swhatbuf_r+0x2e>
 8007146:	89a3      	ldrh	r3, [r4, #12]
 8007148:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800714c:	f04f 0100 	mov.w	r1, #0
 8007150:	bf14      	ite	ne
 8007152:	2340      	movne	r3, #64	@ 0x40
 8007154:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007158:	2000      	movs	r0, #0
 800715a:	6031      	str	r1, [r6, #0]
 800715c:	602b      	str	r3, [r5, #0]
 800715e:	b016      	add	sp, #88	@ 0x58
 8007160:	bd70      	pop	{r4, r5, r6, pc}
 8007162:	466a      	mov	r2, sp
 8007164:	f000 f848 	bl	80071f8 <_fstat_r>
 8007168:	2800      	cmp	r0, #0
 800716a:	dbec      	blt.n	8007146 <__swhatbuf_r+0x12>
 800716c:	9901      	ldr	r1, [sp, #4]
 800716e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007172:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007176:	4259      	negs	r1, r3
 8007178:	4159      	adcs	r1, r3
 800717a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800717e:	e7eb      	b.n	8007158 <__swhatbuf_r+0x24>

08007180 <__smakebuf_r>:
 8007180:	898b      	ldrh	r3, [r1, #12]
 8007182:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007184:	079d      	lsls	r5, r3, #30
 8007186:	4606      	mov	r6, r0
 8007188:	460c      	mov	r4, r1
 800718a:	d507      	bpl.n	800719c <__smakebuf_r+0x1c>
 800718c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007190:	6023      	str	r3, [r4, #0]
 8007192:	6123      	str	r3, [r4, #16]
 8007194:	2301      	movs	r3, #1
 8007196:	6163      	str	r3, [r4, #20]
 8007198:	b003      	add	sp, #12
 800719a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800719c:	ab01      	add	r3, sp, #4
 800719e:	466a      	mov	r2, sp
 80071a0:	f7ff ffc8 	bl	8007134 <__swhatbuf_r>
 80071a4:	9f00      	ldr	r7, [sp, #0]
 80071a6:	4605      	mov	r5, r0
 80071a8:	4639      	mov	r1, r7
 80071aa:	4630      	mov	r0, r6
 80071ac:	f7ff f978 	bl	80064a0 <_malloc_r>
 80071b0:	b948      	cbnz	r0, 80071c6 <__smakebuf_r+0x46>
 80071b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071b6:	059a      	lsls	r2, r3, #22
 80071b8:	d4ee      	bmi.n	8007198 <__smakebuf_r+0x18>
 80071ba:	f023 0303 	bic.w	r3, r3, #3
 80071be:	f043 0302 	orr.w	r3, r3, #2
 80071c2:	81a3      	strh	r3, [r4, #12]
 80071c4:	e7e2      	b.n	800718c <__smakebuf_r+0xc>
 80071c6:	89a3      	ldrh	r3, [r4, #12]
 80071c8:	6020      	str	r0, [r4, #0]
 80071ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071ce:	81a3      	strh	r3, [r4, #12]
 80071d0:	9b01      	ldr	r3, [sp, #4]
 80071d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80071d6:	b15b      	cbz	r3, 80071f0 <__smakebuf_r+0x70>
 80071d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071dc:	4630      	mov	r0, r6
 80071de:	f000 f81d 	bl	800721c <_isatty_r>
 80071e2:	b128      	cbz	r0, 80071f0 <__smakebuf_r+0x70>
 80071e4:	89a3      	ldrh	r3, [r4, #12]
 80071e6:	f023 0303 	bic.w	r3, r3, #3
 80071ea:	f043 0301 	orr.w	r3, r3, #1
 80071ee:	81a3      	strh	r3, [r4, #12]
 80071f0:	89a3      	ldrh	r3, [r4, #12]
 80071f2:	431d      	orrs	r5, r3
 80071f4:	81a5      	strh	r5, [r4, #12]
 80071f6:	e7cf      	b.n	8007198 <__smakebuf_r+0x18>

080071f8 <_fstat_r>:
 80071f8:	b538      	push	{r3, r4, r5, lr}
 80071fa:	4d07      	ldr	r5, [pc, #28]	@ (8007218 <_fstat_r+0x20>)
 80071fc:	2300      	movs	r3, #0
 80071fe:	4604      	mov	r4, r0
 8007200:	4608      	mov	r0, r1
 8007202:	4611      	mov	r1, r2
 8007204:	602b      	str	r3, [r5, #0]
 8007206:	f7fb f958 	bl	80024ba <_fstat>
 800720a:	1c43      	adds	r3, r0, #1
 800720c:	d102      	bne.n	8007214 <_fstat_r+0x1c>
 800720e:	682b      	ldr	r3, [r5, #0]
 8007210:	b103      	cbz	r3, 8007214 <_fstat_r+0x1c>
 8007212:	6023      	str	r3, [r4, #0]
 8007214:	bd38      	pop	{r3, r4, r5, pc}
 8007216:	bf00      	nop
 8007218:	2000042c 	.word	0x2000042c

0800721c <_isatty_r>:
 800721c:	b538      	push	{r3, r4, r5, lr}
 800721e:	4d06      	ldr	r5, [pc, #24]	@ (8007238 <_isatty_r+0x1c>)
 8007220:	2300      	movs	r3, #0
 8007222:	4604      	mov	r4, r0
 8007224:	4608      	mov	r0, r1
 8007226:	602b      	str	r3, [r5, #0]
 8007228:	f7fb f957 	bl	80024da <_isatty>
 800722c:	1c43      	adds	r3, r0, #1
 800722e:	d102      	bne.n	8007236 <_isatty_r+0x1a>
 8007230:	682b      	ldr	r3, [r5, #0]
 8007232:	b103      	cbz	r3, 8007236 <_isatty_r+0x1a>
 8007234:	6023      	str	r3, [r4, #0]
 8007236:	bd38      	pop	{r3, r4, r5, pc}
 8007238:	2000042c 	.word	0x2000042c

0800723c <_malloc_usable_size_r>:
 800723c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007240:	1f18      	subs	r0, r3, #4
 8007242:	2b00      	cmp	r3, #0
 8007244:	bfbc      	itt	lt
 8007246:	580b      	ldrlt	r3, [r1, r0]
 8007248:	18c0      	addlt	r0, r0, r3
 800724a:	4770      	bx	lr

0800724c <_init>:
 800724c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800724e:	bf00      	nop
 8007250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007252:	bc08      	pop	{r3}
 8007254:	469e      	mov	lr, r3
 8007256:	4770      	bx	lr

08007258 <_fini>:
 8007258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800725a:	bf00      	nop
 800725c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800725e:	bc08      	pop	{r3}
 8007260:	469e      	mov	lr, r3
 8007262:	4770      	bx	lr
